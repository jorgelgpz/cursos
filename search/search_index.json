{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Profe Jorge","text":"<p>Contenido que necesitas, por ejemplo: Programaci\u00f3n en Python.</p>"},{"location":"git/","title":"Manual de GIT","text":""},{"location":"git/#agregar-usuario","title":"Agregar usuario","text":"<p>Configuraci\u00f3n a  nivel global como me llamo</p> <p><pre><code>git config --global user.name \"su_nombre\"\n</code></pre> Para verificar configuraci\u00f3n (<code>git config --global user.name</code>)</p> <p>Configuraci\u00f3n a  nivel global mi correo en github <pre><code>git config --global user.email \"su_email\"\n</code></pre> Para verificar configuraci\u00f3n (<code>git config --global user.email</code>)</p>"},{"location":"git/#almacenar-credenciales-git-en-cache","title":"Almacenar credenciales GIT en cach\u00e9","text":"<p>Puede habilitar la cach\u00e9 auxiliar de credenciales para los usuarios que deseen  almacenar detalles de autorizaci\u00f3n mediante lo siguiente.</p> <pre><code>git config --global credential.helper cache\n</code></pre> <p>Si debe utilizar el asistente de credenciales, se recomienda almacenar en cach\u00e9 solo durante un tiempo limitado para mayor seguridad. Por ejemplo, si va a trabajar hoy usando GIT durante 1 a 4 horas pero  no lo tocar\u00e1 durante unas semanas, establezca la caducidad en 5 horas. <pre><code>git config --global credential.helper \"cache --timeout=18000\"\n</code></pre> Despu\u00e9s de 5 horas, las credenciales se eliminar\u00e1n, lo que proteger\u00e1 su GIT.</p>"},{"location":"git/#imprimir-detalles-de-configuracion-de-git","title":"Imprimir detalles de configuraci\u00f3n de GIT","text":"<p>Para confirmar los usuarios y detalles de la configuraci\u00f3n de GIT, use el comando config \u2013list <pre><code>git config --list\n</code></pre> A menos que se especifique, Git almacena detalles en el archivo <code>.gitconfig</code></p>"},{"location":"git/#iniciar-git","title":"Iniciar GIT","text":"<p>Inicia git en el directorio de trabajo. <pre><code>git init\n</code></pre> </p>"},{"location":"git/#ver-status-de-git","title":"Ver Status de GIT","text":"<p><pre><code>git status\n</code></pre> </p>"},{"location":"git/#agregar-un-archivo-al-index-area-stage","title":"Agregar un archivo al index \u00e1rea (stage)","text":"<p><pre><code>git add documento1\n</code></pre> </p>"},{"location":"git/#agregar-todos-los-archivos-al-index-area-stage","title":"Agregar todos los archivos al index \u00e1rea (stage)","text":"<p><pre><code>git add -A\n</code></pre> \u00f3 <pre><code>git add .\n</code></pre> </p>"},{"location":"git/#quitar-archivos-del-index-area-stage","title":"Quitar archivos del index \u00e1rea (stage)","text":"<p><pre><code>git rm --cached documento2\n</code></pre> </p>"},{"location":"git/#revisar-cambios","title":"Revisar cambios","text":"<p><pre><code>git log\n</code></pre> </p>"},{"location":"git/#crear-commit","title":"Crear commit","text":"<p><pre><code>git commit -m \"segundo cambios en documento1\"\n</code></pre> </p>"},{"location":"git/#regresar-a-un-commit-anterior","title":"Regresar a un commit anterior","text":"<p> <pre><code>git checkout d208f120a586e44f30d5834785b2d43929eb3db1\n</code></pre> </p>"},{"location":"git/#regresar-al-ultimo-commit","title":"Regresar al \u00faltimo commit","text":"<p>Cambiar nuevamente al \u00faltimo commit o cambiar al head, al master \u00f3 main(master es el \u00faltimo commit que se hizo) <pre><code>git checkout master\n</code></pre> </p>"},{"location":"git/#resetear-suave-el-commit","title":"Resetear suave el commit","text":"<p>Se va a borrar por ejemplo el tercer commit pero sin tocar los cambios ya realizados en los archivos. <pre><code>git reset --soft d208f120a586e44f30d5834785b2d43929eb3db1\n</code></pre> </p>"},{"location":"git/#resetear-duro-el-commit","title":"Resetear duro el commit","text":"<p>Se va a borrar por ejemplo el segundo commit y tambi\u00e9n borra todos los cambios realizados en los archivos. <pre><code>git reset --hard 6a83bc637d9b14cb790fddf09ed65fdb212a9ea1\n</code></pre> </p>"},{"location":"git/#ver-ramas","title":"Ver Ramas","text":"<p><pre><code>git branch pruebas\n</code></pre> </p>"},{"location":"git/#crear-ramas","title":"Crear ramas","text":"<p><pre><code>git branch pruebas\n</code></pre> </p>"},{"location":"git/#funcionar-ramas","title":"Funcionar ramas","text":"<p><pre><code>git merge pruebas\n</code></pre> </p>"},{"location":"git/#borrar-ramas","title":"Borrar ramas","text":"<p><pre><code>git branch pruebas -d\n</code></pre> </p>"},{"location":"git/#conectar-repo-local-a-github","title":"Conectar Repo local a GITHUB","text":"<p><pre><code>git remote add origin https://github.com/TU_REPO\n</code></pre> </p>"},{"location":"git/#subir-las-ramas-a-github","title":"Subir las ramas a GITHUB","text":"<p><pre><code>git push origin master\n</code></pre> </p>"},{"location":"git/#descargar-cambios-de-github","title":"Descargar cambios de GITHUB","text":"<p><pre><code>git pull \n</code></pre> </p> <p>\u00f3 <pre><code> git pull &lt;remote&gt; &lt;branch&gt;\n</code></pre></p>"},{"location":"git/#clonar-un-repo-de-github","title":"Clonar un Repo de GITHUB","text":"<p><pre><code>git clone https://github.com/jorgelgpz/alpha.git\n</code></pre> </p>"},{"location":"python/","title":"Programaci\u00f3n con Python","text":""},{"location":"python/#manual-de-python","title":"Manual de Python","text":"<p>Introducci\u00f3n a la programaci\u00f3n con Python con ejemplos. </p>"},{"location":"python/#ejercicios-de-programacion-con-python","title":"Ejercicios de Programaci\u00f3n con Python","text":"<p>Ejercicios de programaci\u00f3n con Python con soluciones. </p>"},{"location":"python/ejercicios/","title":"Ejercicios de Programaci\u00f3n con Python","text":"<p>Esta secci\u00f3n contiene una colecci\u00f3n de ejercicios resueltos de programaci\u00f3n con Python. La mayor parte de ellos son ejercicios aplicados a la econom\u00eda, pero tambi\u00e9n hay ejercicios gen\u00e9ricos para cualquier disciplina.</p> <p>Los ejercicios est\u00e1n clasificados por temas y siguen el orden m\u00e1s o menos habitual en el aprendizaje de este lenguaje.</p> <ul> <li>Tipos de Datos Simples</li> <li>Cadenas</li> <li>Condicionales</li> <li>Bucles</li> <li>Listas y Tuplas</li> <li>Diccionarios</li> <li>Funciones</li> <li>Programaci\u00f3n Funcional</li> <li>Ficheros</li> <li>Depuraci\u00f3n</li> <li>Librer\u00eda Pandas</li> <li>Librer\u00eda Matplotlib</li> </ul>","tags":["Ejercicios"]},{"location":"python/ejercicios/bucles/","title":"Ejercicios de Bucles","text":"","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que pida al usuario una palabra y la muestre por pantalla 10 veces.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que pregunte al usuario su edad y muestre por pantalla todos los a\u00f1os que ha cumplido (desde 1 hasta su edad).</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero positivo y muestre por pantalla todos los n\u00fameros impares desde 1 hasta ese n\u00famero separados por comas.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero positivo y muestre por pantalla la cuenta atr\u00e1s desde ese n\u00famero hasta cero separados por comas.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que pregunte al usuario una cantidad a invertir, el inter\u00e9s anual y el n\u00famero de a\u00f1os, y muestre por pantalla el capital obtenido en la inversi\u00f3n cada a\u00f1o que dura la inversi\u00f3n.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla un tri\u00e1ngulo rect\u00e1ngulo como el de m\u00e1s abajo, de altura el n\u00famero introducido.</p> <pre><code>*\n**\n***\n****\n*****\n</code></pre> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que muestre por pantalla la tabla de multiplicar del 1 al 10.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla un tri\u00e1ngulo rect\u00e1ngulo como el de m\u00e1s abajo.</p> <pre><code>1\n3 1\n5 3 1\n7 5 3 1\n9 7 5 3 1\n</code></pre> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que almacene la cadena de caracteres <code>contrase\u00f1a</code> en una variable, pregunte al usuario por la contrase\u00f1a hasta que introduzca la contrase\u00f1a correcta.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla si es un n\u00famero primo o no.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que pida al usuario una palabra y luego muestre por pantalla una a una las letras de la palabra introducida empezando por la \u00faltima.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa en el que se pregunte al usuario por una frase y una letra, y muestre por pantalla el n\u00famero de veces que aparece la letra en la frase.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/bucles/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que muestre el eco de todo lo que el usuario introduzca hasta que el usuario escriba \u201csalir\u201d que terminar\u00e1.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Bucles"]},{"location":"python/ejercicios/cadenas/","title":"Ejercicios de Cadenas","text":"","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/cadenas/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que pregunte el nombre del usuario en la consola y un n\u00famero entero e imprima por pantalla en l\u00edneas distintas el nombre del usuario tantas veces como el n\u00famero introducido.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/cadenas/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que pregunte el nombre completo del usuario en la consola y despu\u00e9s muestre por pantalla el nombre completo del usuario tres veces, una con todas las letras min\u00fasculas, otra con todas las letras may\u00fasculas y otra solo con la primera letra del nombre y de los apellidos en may\u00fascula. El usuario puede introducir su nombre combinando may\u00fasculas y min\u00fasculas como quiera.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/cadenas/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que pregunte el nombre del usuario en la consola y despu\u00e9s de que el usuario lo introduzca muestre por pantalla <code>&lt;NOMBRE&gt; tiene &lt;n&gt; letras</code>, donde <code>&lt;NOMBRE&gt;</code> es el nombre de usuario en may\u00fasculas y <code>&lt;n&gt;</code> es el n\u00famero de letras que tienen el nombre.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/cadenas/#ejercicio-4","title":"Ejercicio 4","text":"<p>Los tel\u00e9fonos de una empresa tienen el siguiente formato <code>prefijo-n\u00famero-extension</code> donde el prefijo es el c\u00f3digo del pa\u00eds <code>+34</code>, y la extensi\u00f3n tiene dos d\u00edgitos (por ejemplo <code>+34-913724710-56</code>). Escribir un programa que pregunte por un n\u00famero de tel\u00e9fono con este formato y muestre por pantalla el n\u00famero de tel\u00e9fono sin el prefijo y la extensi\u00f3n.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/cadenas/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que pida al usuario que introduzca una frase en la consola y muestre por pantalla la frase invertida.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/cadenas/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que pida al usuario que introduzca una frase en la consola y una vocal, y despu\u00e9s muestre por pantalla la misma frase pero con la vocal introducida en may\u00fascula.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/cadenas/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que pregunte el correo electr\u00f3nico del usuario en la consola y muestre por pantalla otro correo electr\u00f3nico con el mismo nombre (la parte delante de la arroba <code>@</code>) pero con dominio <code>ceu.es</code>.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/cadenas/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pregunte por consola el precio de un producto en euros con dos decimales y muestre por pantalla el n\u00famero de euros y el n\u00famero de c\u00e9ntimos del precio introducido.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/cadenas/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pregunte al usuario la fecha de su nacimiento en formato <code>dd/mm/aaaa</code> y muestra por pantalla, el d\u00eda, el mes y el a\u00f1o. Adaptar el programa anterior para que tambi\u00e9n funcione cuando el d\u00eda o el mes se introduzcan con un solo car\u00e1cter.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/cadenas/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que pregunte por consola por los productos de una cesta de la compra, separados por comas, y muestre por pantalla cada uno de los productos en una l\u00ednea distinta.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/cadenas/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que pregunte el nombre el un producto, su precio y un n\u00famero de unidades y muestre por pantalla una cadena con el nombre del producto seguido de su precio unitario con 6 d\u00edgitos enteros y 2 decimales, el n\u00famero de unidades con tres d\u00edgitos y el coste total con 8 d\u00edgitos enteros y 2 decimales.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos","Cadenas"]},{"location":"python/ejercicios/condicionales/","title":"Ejercicios de Condicionales","text":"","tags":["Ejercicios","Condicionales"]},{"location":"python/ejercicios/condicionales/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que pregunte al usuario su edad y muestre por pantalla si es mayor de edad o no.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Condicionales"]},{"location":"python/ejercicios/condicionales/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene la cadena de caracteres <code>contrase\u00f1a</code> en una variable, pregunte al usuario por la contrase\u00f1a e imprima por pantalla si la contrase\u00f1a introducida por el usuario coincide con la guardada en la variable sin tener en cuenta may\u00fasculas y min\u00fasculas.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Condicionales"]},{"location":"python/ejercicios/condicionales/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que pida al usuario dos n\u00fameros y muestre por pantalla su divisi\u00f3n. Si el divisor es cero el programa debe mostrar un error.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Condicionales"]},{"location":"python/ejercicios/condicionales/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla si es par o impar.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Condicionales"]},{"location":"python/ejercicios/condicionales/#ejercicio-5","title":"Ejercicio 5","text":"<p>Para tributar un determinado impuesto se debe ser mayor de 16 a\u00f1os y tener unos ingresos iguales o superiores a 1000 \u20ac mensuales. Escribir un programa que pregunte al usuario su edad y sus ingresos mensuales y muestre por pantalla si el usuario tiene que tributar o no.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Condicionales"]},{"location":"python/ejercicios/condicionales/#ejercicio-6","title":"Ejercicio 6","text":"<p>Los alumnos de un curso se han dividido en dos grupos A y B de acuerdo al sexo y el nombre. El grupo A esta formado por las mujeres con un nombre anterior a la M y los hombres con un nombre posterior a la N y el grupo B por el resto. Escribir un programa que pregunte al usuario su nombre y sexo, y muestre por pantalla el grupo que le corresponde.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Condicionales"]},{"location":"python/ejercicios/condicionales/#ejercicio-7","title":"Ejercicio 7","text":"<p>Los tramos impositivos para la declaraci\u00f3n de la renta en un determinado pa\u00eds son los siguientes:</p> Renta Tipo impositivo Menos de 10000\u20ac 5% Entre 10000\u20ac y 20000\u20ac 15% Entre 20000\u20ac y 35000\u20ac 20% Entre 35000\u20ac y 60000\u20ac 30% M\u00e1s de 60000\u20ac 45% <p>Escribir un programa que pregunte al usuario su renta anual y muestre por pantalla el tipo impositivo que le corresponde.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Condicionales"]},{"location":"python/ejercicios/condicionales/#ejercicio-8","title":"Ejercicio 8","text":"<p>En una determinada empresa, sus empleados son evaluados al final de cada a\u00f1o. Los puntos que pueden obtener en la evaluaci\u00f3n comienzan en 0.0 y pueden ir aumentando, traduci\u00e9ndose en mejores beneficios. Los puntos que pueden conseguir los empleados pueden ser 0.0, 0.4, 0.6 o m\u00e1s, pero no valores intermedios entre las cifras mencionadas. A continuaci\u00f3n se muestra una tabla con los niveles correspondientes a cada puntuaci\u00f3n. La cantidad de dinero conseguida en cada nivel es de 2.400\u20ac multiplicada por la puntuaci\u00f3n del nivel.</p> Nivel Puntuaci\u00f3n Inaceptable 0.0 Aceptable 0.4 Meritorio 0.6 o m\u00e1s <p>Escribir un programa que lea la puntuaci\u00f3n del usuario e indique su nivel de rendimiento, as\u00ed como la cantidad de dinero que recibir\u00e1 el usuario.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Condicionales"]},{"location":"python/ejercicios/condicionales/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa para una empresa que tiene salas de juegos para todas las edades y quiere calcular de forma autom\u00e1tica el precio que debe cobrar a sus clientes por entrar. El programa debe preguntar al usuario la edad del cliente y mostrar el precio de la entrada. Si el cliente es menor de 4 a\u00f1os puede entrar gratis, si tiene entre 4 y 18 a\u00f1os debe pagar 5\u20ac y si es mayor de 18 a\u00f1os, 10\u20ac.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Condicionales"]},{"location":"python/ejercicios/condicionales/#ejercicio-10","title":"Ejercicio 10","text":"<p>La pizzer\u00eda Bella Napoli ofrece pizzas vegetarianas y no vegetarianas a sus clientes. Los ingredientes para cada tipo de pizza aparecen a continuaci\u00f3n.</p> <ul> <li>Ingredientes vegetarianos: Pimiento y tofu.</li> <li>Ingredientes no vegetarianos: Peperoni, Jam\u00f3n y Salm\u00f3n.</li> </ul> <p>Escribir un programa que pregunte al usuario si quiere una pizza vegetariana o no, y en funci\u00f3n de su respuesta le muestre un men\u00fa con los ingredientes disponibles para que elija. Solo se puede eligir un ingrediente adem\u00e1s de la mozzarella y el tomate que est\u00e1n en todas la pizzas. Al final se debe mostrar por pantalla si la pizza elegida es vegetariana o no y todos los ingredientes que lleva.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Condicionales"]},{"location":"python/ejercicios/depuracion/","title":"Ejercicios de Depuraci\u00f3n","text":"","tags":["Ejercicios","Depuraci\u00f3n"]},{"location":"python/ejercicios/depuracion/#ejercicio-1","title":"Ejercicio 1","text":"<p>Corregir los errores sint\u00e1cticos del siguiente programa:</p> <pre><code>contrase\u00f1a = input('Introduce la contrase\u00f1a: \")\nif contrase\u00f1a in ['sesamo'):\n  print('Pasa')\nelse\n  print('No pasa')\n</code></pre> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Depuraci\u00f3n"]},{"location":"python/ejercicios/depuracion/#ejercicio-2","title":"Ejercicio 2","text":"<p>Detectar y corregir los errores del siguiente programa que aplica el iva a una factura:</p> <pre><code>base = input('Introduce la base imponible de la factura: ')\nprint(aplica_iva(base, iva))\n\ndef aplica_iva(base, iva = 21):\n    base = base * iva   \n    return base \n</code></pre> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Depuraci\u00f3n"]},{"location":"python/ejercicios/depuracion/#ejercicio-3","title":"Ejercicio 3","text":"<p>Detectar y corregir los errores del siguiente programa que calcula el producto escalar de dos vectores:</p> <pre><code>u = (1, 2, 3)\nv = (4, 5, 6)\n\ndef producto_escalar(u, v):\n    for i in u:\n        u[i+1] *= v[i+1]\n    return sum(u)\n\nprint(producto_escalar(u, v))\n</code></pre> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Depuraci\u00f3n"]},{"location":"python/ejercicios/depuracion/#ejercicio-4","title":"Ejercicio 4","text":"<p>Detectar y corregir los errores del siguiente programa que devuelve y elimina el tel\u00e9fono de un list\u00edn telef\u00f3nico a trav\u00e9s del nombre del usuario:</p> <pre><code>listin = {'Juan':123456789, 'Pedro':987654321}\n\ndef elimina(listin, usuario):\n    del listin[usuario]\n    return listin[usuario]\n\nprint(elimina(listin, 'Pablo'))\n</code></pre> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Depuraci\u00f3n"]},{"location":"python/ejercicios/depuracion/#ejercicio-5","title":"Ejercicio 5","text":"<p>Detectar y corregir los errores del siguiente programa que multiplica dos matrices:</p> <pre><code>a = ((1, 2, 3),\n     (3, 2, 1))\nb = ((1, 2),\n     (3, 4),\n     (5, 6))\n\ndef producto(a, b):\n    producto = []\n    for i in range(len(b)):\n        fila = []\n        for j in range(len(a[0])):\n            suma = 0\n            for k in range(len(a[0]+1)):\n                suma += a[i][k] * b[k+1][j]\n            fila[j] = suma\n        producto[i] = tuple(fila)\n    return tuple(producto)\n\nprint(producto(a, b))\n</code></pre> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Depuraci\u00f3n"]},{"location":"python/ejercicios/diccionarios/","title":"Ejercicios de Diccionarios","text":"","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/diccionarios/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que guarde en una variable el diccionario <code>{'Euro':'\u20ac', 'Dollar':'$', 'Yen':'\u00a5'}</code>, pregunte al usuario por una divisa y muestre su s\u00edmbolo o un mensaje de aviso si la divisa no est\u00e1 en el diccionario.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/diccionarios/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que pregunte al usuario su nombre, edad, direcci\u00f3n y tel\u00e9fono y lo guarde en un diccionario. Despu\u00e9s debe mostrar por pantalla el mensaje <code>&lt;nombre&gt; tiene &lt;edad&gt; a\u00f1os, vive en &lt;direcci\u00f3n&gt; y su n\u00famero de tel\u00e9fono es &lt;tel\u00e9fono&gt;</code>.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/diccionarios/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que guarde en un diccionario los precios de las frutas de la tabla, pregunte al usuario por una fruta, un n\u00famero de kilos y muestre por pantalla el precio de ese n\u00famero de kilos de fruta. Si la fruta no est\u00e1 en el diccionario debe mostrar un mensaje informando de ello.</p> Fruta Precio Pl\u00e1tano 1.35 Manzana 0.80 Pera 0.85 Naranja 0.70 <p>Soluci\u00f3n</p>","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/diccionarios/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte una fecha en formato <code>dd/mm/aaaa</code> y muestre por pantalla la misma fecha en formato <code>dd de &lt;mes&gt; de aaaa</code> donde <code>&lt;mes&gt;</code> es el nombre del mes.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/diccionarios/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene el diccionario con los cr\u00e9ditos de las asignaturas de un curso <code>{'Matem\u00e1ticas': 6, 'F\u00edsica': 4, 'Qu\u00edmica': 5}</code> y despu\u00e9s muestre por pantalla los cr\u00e9ditos de cada asignatura en el formato <code>&lt;asignatura&gt; tiene &lt;cr\u00e9ditos&gt; cr\u00e9ditos</code>, donde <code>&lt;asignatura&gt;</code> es cada una de las asignaturas del curso, y <code>&lt;cr\u00e9ditos&gt;</code> son sus cr\u00e9ditos. Al final debe mostrar tambi\u00e9n el n\u00famero total de cr\u00e9ditos del curso.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/diccionarios/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que cree un diccionario vac\u00edo y lo vaya llenado con informaci\u00f3n sobre una persona (por ejemplo nombre, edad, sexo, tel\u00e9fono, correo electr\u00f3nico, etc.) que se le pida al usuario. Cada vez que se a\u00f1ada un nuevo dato debe imprimirse el contenido del diccionario.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/diccionarios/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que cree un diccionario simulando una cesta de la compra. El programa debe preguntar el art\u00edculo y su precio y a\u00f1adir el par al diccionario, hasta que el usuario decida terminar. Despu\u00e9s se debe mostrar por pantalla la lista de la compra y el coste total, con el siguiente formato</p> Lista de la compra Art\u00edculo 1 Precio Art\u00edculo 2 Precio Art\u00edculo 3 Precio ... ... Total Coste <p>Soluci\u00f3n</p>","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/diccionarios/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que cree un diccionario de traducci\u00f3n espa\u00f1ol-ingl\u00e9s. El usuario introducir\u00e1 las palabras en espa\u00f1ol e ingl\u00e9s separadas por dos puntos, y cada par <code>&lt;palabra&gt;:&lt;traducci\u00f3n&gt;</code> separados por comas. El programa debe crear un diccionario con las palabras y sus traducciones. Despu\u00e9s pedir\u00e1 una frase en espa\u00f1ol y utilizar\u00e1 el diccionario para traducirla palabra a palabra. Si una palabra no est\u00e1 en el diccionario debe dejarla sin traducir.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/diccionarios/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que gestione las facturas pendientes de cobro de una empresa. Las facturas se almacenar\u00e1n en un diccionario donde la clave de cada factura ser\u00e1 el n\u00famero de factura y el valor el coste de la factura. El programa debe preguntar al usuario si quiere a\u00f1adir una nueva factura, pagar una existente o terminar. Si desea a\u00f1adir una nueva factura se preguntar\u00e1 por el n\u00famero de factura y su coste y se a\u00f1adir\u00e1 al diccionario. Si se desea pagar una factura se preguntar\u00e1 por el n\u00famero de factura y se eliminar\u00e1 del diccionario. Despu\u00e9s de cada operaci\u00f3n el programa debe mostrar por pantalla la cantidad cobrada hasta el momento y la cantidad pendiente de cobro.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/diccionarios/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que permita gestionar la base de datos de clientes de una empresa. Los clientes se guardar\u00e1n en un diccionario en el que la clave de cada cliente ser\u00e1 su NIF, y el valor ser\u00e1 otro diccionario con los datos del cliente (nombre, direcci\u00f3n, tel\u00e9fono, correo, preferente), donde preferente tendr\u00e1 el valor <code>True</code> si se trata de un cliente preferente. El programa debe preguntar al usuario por una opci\u00f3n del siguiente men\u00fa: (1) A\u00f1adir cliente, (2) Eliminar cliente, (3) Mostrar cliente, (4) Listar todos los clientes, (5) Listar clientes preferentes, (6) Terminar. En funci\u00f3n de la opci\u00f3n elegida el programa tendr\u00e1 que hacer lo siguiente:</p> <ol> <li>Preguntar los datos del cliente, crear un diccionario con los datos y a\u00f1adirlo a la base de datos.</li> <li>Preguntar por el NIF del cliente y eliminar sus datos de la base de datos.</li> <li>Preguntar por el NIF del cliente y mostrar sus datos.</li> <li>Mostrar lista de todos los clientes de la base datos con su NIF y nombre.</li> <li>Mostrar la lista de clientes preferentes de la base de datos con su NIF y nombre.</li> <li>Terminar el programa.</li> </ol> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/diccionarios/#ejercicio-11","title":"Ejercicio 11","text":"<p>El directorio de los clientes de una empresa est\u00e1 organizado en una cadena de texto como la de m\u00e1s abajo, donde cada l\u00ednea contiene la informaci\u00f3n del nombre, email, tel\u00e9fono, nif, y el descuento que se le aplica. Las l\u00edneas se separan con el car\u00e1cter de cambio de l\u00ednea <code>\\n</code> y la primera l\u00ednea contiene los nombres de los campos con la informaci\u00f3n contenida en el directorio.</p> <pre><code>\"nif;nombre;email;tel\u00e9fono;descuento\\n01234567L;Luis Gonz\u00e1lez;luisgonzalez@mail.com;656343576;12.5\\n71476342J;Macarena Ram\u00edrez;macarena@mail.com;692839321;8\\n63823376M;Juan Jos\u00e9 Mart\u00ednez;juanjo@mail.com;664888233;5.2\\n98376547F;Carmen S\u00e1nchez;carmen@mail.com;667677855;15.7\"\n</code></pre> <p>Escribir un programa que genere un diccionario con la informaci\u00f3n del directorio, donde cada elemento corresponda a un cliente y tenga por clave su nif y por valor otro diccionario con el resto de la informaci\u00f3n del cliente. Los diccionarios con la informaci\u00f3n de cada cliente tendr\u00e1n como claves los nombres de los campos y como valores la informaci\u00f3n de cada cliente correspondientes a los campos. Es decir, un diccionario como el siguiente</p> <pre><code>{'01234567L': {'nombre': 'Luis Gonz\u00e1lez', 'email': 'luisgonzalez@mail.com', 'tel\u00e9fono': '656343576', 'descuento': 12.5}, '71476342J': {'nombre': 'Macarena Ram\u00edrez', 'email': 'macarena@mail.com', 'tel\u00e9fono': '692839321', 'descuento': 8.0}, '63823376M': {'nombre': 'Juan Jos\u00e9 Mart\u00ednez', 'email': 'juanjo@mail.com', 'tel\u00e9fono': '664888233', 'descuento': 5.2}, '98376547F': {'nombre': 'Carmen S\u00e1nchez', 'email': 'carmen@mail.com', 'tel\u00e9fono': '667677855', 'descuento': 15.7}}\n</code></pre> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Diccionarios"]},{"location":"python/ejercicios/ficheros/","title":"Ejercicios de Ficheros","text":"","tags":["Ejercicios","Ficheros"]},{"location":"python/ejercicios/ficheros/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir una funci\u00f3n que pida un n\u00famero entero entre 1 y 10 y guarde en un fichero con el nombre <code>tabla-n.txt</code> la tabla de multiplicar de ese n\u00famero, done <code>n</code> es el n\u00famero introducido.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Ficheros"]},{"location":"python/ejercicios/ficheros/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir una funci\u00f3n que pida un n\u00famero entero entre 1 y 10, lea el fichero <code>tabla-n.txt</code> con la tabla de multiplicar de ese n\u00famero, done <code>n</code> es el n\u00famero introducido, y la muestre por pantalla. Si el fichero no existe debe mostrar un mensaje por pantalla informando de ello.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Ficheros"]},{"location":"python/ejercicios/ficheros/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir una funci\u00f3n que pida dos n\u00fameros <code>n</code> y <code>m</code> entre 1 y 10, lea el fichero <code>tabla-n.txt</code> con la tabla de multiplicar de ese n\u00famero, y muestre por pantalla la l\u00ednea <code>m</code> del fichero. Si el fichero no existe debe mostrar un mensaje por pantalla informando de ello.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Ficheros"]},{"location":"python/ejercicios/ficheros/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que acceda a un fichero de internet mediante su url y muestre por pantalla el n\u00famero de palabras que contiene.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Ficheros"]},{"location":"python/ejercicios/ficheros/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que abra el fichero con informaci\u00f3n sobre el PIB per c\u00e1pita de los pa\u00edses de la Uni\u00f3n Europea (url:<code>https://ec.europa.eu/eurostat/estat-navtree-portlet-prod/BulkDownloadListing?file=data/sdg_08_10.tsv.gz&amp;unzip=true</code>), pregunte por las iniciales de un pa\u00eds y muestre el PIB per c\u00e1pita de ese pa\u00eds de todos los a\u00f1os disponibles.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Ficheros"]},{"location":"python/ejercicios/ficheros/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa para gestionar un list\u00edn telef\u00f3nico con los nombres y los tel\u00e9fonos de los clientes de una empresa. El programa incorporar funciones crear el fichero con el list\u00edn si no existe, para consultar el tel\u00e9fono de un cliente, a\u00f1adir el tel\u00e9fono de un nuevo cliente y eliminar el tel\u00e9fono de un cliente. El list\u00edn debe estar guardado en el fichero de texto <code>listin.txt</code> donde el nombre del cliente y su tel\u00e9fono deben aparecer separados por comas y cada cliente en una l\u00ednea distinta.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Ficheros"]},{"location":"python/ejercicios/ficheros/#ejercicio-7","title":"Ejercicio 7","text":"<p>El fichero cotizacion.csv contiene las cotizaciones de las empresas del IBEX35 con las siguientes columnas: <code>Nombre</code> (nombre de la empresa), <code>Final</code> (precio de la acci\u00f3n al cierre de bolsa), <code>M\u00e1ximo</code> (precio m\u00e1ximo de la acci\u00f3n durante la jornada), <code>M\u00ednimo</code> (precio m\u00ednimo de la acci\u00f3n durante la jornada), <code>Volumen</code> (Volumen al cierre de bolsa), <code>Efectivo</code> (capitalizaci\u00f3n al cierre en miles de euros).</p> <ol> <li> <p>Construir una funci\u00f3n reciba el fichero de cotizaciones y devuelva un diccionario con los datos del fichero por columnas.</p> </li> <li> <p>Construir una funci\u00f3n que reciba el diccionario devuelto por la funci\u00f3n anterior y cree un fichero en formato csv con el m\u00ednimo, el m\u00e1ximo y la media de dada columna.</p> </li> </ol> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Ficheros"]},{"location":"python/ejercicios/ficheros/#ejercicio-8","title":"Ejercicio 8","text":"<p>El fichero calificaciones.csv contiene las calificaciones de un curso. Durante el curso se realizaron dos ex\u00e1menes parciales de teor\u00eda y un examen de pr\u00e1cticas. Los alumnos que tuvieron menos de 4 en alguno de estos ex\u00e1menes pudieron repetirlo en la al final del curso (convocatoria ordinaria). Escribir un programa que contenga las siguientes funciones:</p> <ol> <li> <p>Una funci\u00f3n que reciba el fichero de calificaciones y devuelva una lista de diccionarios, donde cada diccionario contiene la informaci\u00f3n de los ex\u00e1menes y la asistencia de un alumno. La lista tiene que estar ordenada por apellidos.</p> </li> <li> <p>Una funci\u00f3n que reciba una lista de diccionarios como la que devuelve la funci\u00f3n anterior y a\u00f1ada a cada diccionario un nuevo par con la nota final del curso. El peso de cada parcial de teor\u00eda en la nota final es de un 30% mientras que el peso del examen de pr\u00e1cticas es de un 40%.</p> </li> <li> <p>Una funci\u00f3n que reciba una lista de diccionarios como la que devuelve la funci\u00f3n anterior y devuelva dos listas, una con los alumnos aprobados y otra con los alumnos suspensos. Para aprobar el curso, la asistencia tiene que ser mayor o igual que el 75%, la nota de los ex\u00e1menes parciales y de pr\u00e1cticas mayor o igual que 4 y la nota final mayor o igual que 5.</p> </li> </ol> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Ficheros"]},{"location":"python/ejercicios/funciones/","title":"Ejercicios de Funciones","text":"","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/funciones/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir una funci\u00f3n que muestre por pantalla el saludo <code>\u00a1Hola amiga!</code> cada vez que se la invoque.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/funciones/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir una funci\u00f3n a la que se le pase una cadena <code>&lt;nombre&gt;</code> y muestre por pantalla el saludo <code>\u00a1hola &lt;nombre&gt;!</code>.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/funciones/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir una funci\u00f3n que reciba un n\u00famero entero positivo y devuelva su factorial.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/funciones/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir una funci\u00f3n que calcule el total de una factura tras aplicarle el IVA. La funci\u00f3n debe recibir la cantidad sin IVA y el porcentaje de IVA a aplicar, y devolver el total de la factura. Si se invoca la funci\u00f3n sin pasarle el porcentaje de IVA, deber\u00e1 aplicar un 21%.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/funciones/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir una funci\u00f3n que calcule el \u00e1rea de un c\u00edrculo y otra que calcule el volumen de un cilindro usando la primera funci\u00f3n.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/funciones/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir una funci\u00f3n que reciba una muestra de n\u00fameros en una lista y devuelva su media.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/funciones/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir una funci\u00f3n que reciba una muestra de n\u00fameros en una lista y devuelva otra lista con sus cuadrados.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/funciones/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir una funci\u00f3n que reciba una muestra de n\u00fameros en una lista y devuelva un diccionario con su media, varianza y desviaci\u00f3n t\u00edpica.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/funciones/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir una funci\u00f3n que calcule el m\u00e1ximo com\u00fan divisor de dos n\u00fameros y otra que calcule el m\u00ednimo com\u00fan m\u00faltiplo.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/funciones/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir una funci\u00f3n que convierta un n\u00famero decimal en binario y otra que convierta un n\u00famero binario en decimal.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/funciones/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que reciba una cadena de caracteres y devuelva un diccionario con cada palabra que contiene y su frecuencia. Escribir otra funci\u00f3n que reciba el diccionario generado con la funci\u00f3n anterior y devuelva una tupla con la palabra m\u00e1s repetida y su frecuencia.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Funciones"]},{"location":"python/ejercicios/listas-tuplas/","title":"Ejercicios de Listas y Tuplas","text":"","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla el mensaje <code>Yo estudio &lt;asignatura&gt;</code>, donde <code>&lt;asignatura&gt;</code> es cada una de las asignaturas de la lista.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y despu\u00e9s las muestre por pantalla con el mensaje <code>En &lt;asignatura&gt; has sacado &lt;nota&gt;</code> donde <code>&lt;asignatura&gt;</code> es cada una des las asignaturas de la lista y <code>&lt;nota&gt;</code> cada una de las correspondientes notas introducidas por el usuario.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que almacene en una lista los siguientes precios, 50, 75, 46, 22, 80, 65, 8, y muestre por pantalla el menor y el mayor de los precios.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que almacene los vectores (1,2,3) y (-1,0,2) en dos listas y muestre por pantalla su producto escalar.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa que almacene las matrices $$ A = \\left(   \\begin{array}{rrr}   1 &amp; 2 &amp; 3\\newline   4 &amp; 5 &amp; 6   \\end{array}   \\right)   \\quad  y   \\quad   B = \\left(   \\begin{array}{rr}   -1 &amp; 0\\newline   0 &amp; 1\\newline   1 &amp; 1   \\end{array}   \\right) $$</p> <p>en una lista y muestre por pantalla su producto. Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/listas-tuplas/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que pregunte por una muestra de n\u00fameros, separados por comas, los guarde en una lista y muestre por pantalla su media y desviaci\u00f3n t\u00edpica.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Listas","Tuplas"]},{"location":"python/ejercicios/matplotlib/","title":"Ejercicios de la librer\u00eda Matplotlib","text":"","tags":["Ejercicios","Matplotlib"]},{"location":"python/ejercicios/matplotlib/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que pregunte al usuario por las ventas de un rango de a\u00f1os y muestre por pantalla un diagrama de l\u00edneas con la evoluci\u00f3n de las ventas.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Matplotlib"]},{"location":"python/ejercicios/matplotlib/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir una funci\u00f3n que reciba una diccionario con las notas de las asignaturas de un curso y una cadena con el nombre de un color y devuelva un diagrama de barras de las notas en el color dado.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Matplotlib"]},{"location":"python/ejercicios/matplotlib/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir una funci\u00f3n que reciba una serie de Pandas con las notas de los alumnos de un curso y devuelva un diagrama de cajas con las notas. El diagrama debe tener el t\u00edtulo \"Distribuci\u00f3n de notas\".</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Matplotlib"]},{"location":"python/ejercicios/matplotlib/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir una funci\u00f3n que reciba una serie de Pandas con el n\u00famero de ventas de un producto durante los meses de un trimestre y un t\u00edtulo y cree un diagrama de sectores con las ventas en formato png con el titulo dado. El diagrama debe guardarse en un fichero con formato png y el t\u00edtulo dado.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Matplotlib"]},{"location":"python/ejercicios/matplotlib/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir una funci\u00f3n que reciba una serie de Pandas con el n\u00famero de ventas de un producto por a\u00f1os y una cadena con el tipo de gr\u00e1fico a generar (lineas, barras, sectores, areas) y devuelva un diagrama del tipo indicado con la evoluci\u00f3n de las ventas por a\u00f1os y con el t\u00edtulo \"Evoluci\u00f3n del n\u00famero de ventas\".</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Matplotlib"]},{"location":"python/ejercicios/matplotlib/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir una funci\u00f3n que reciba un dataframe de Pandas con los ingresos y gastos de una empresa por meses y devuelva un diagrama de l\u00edneas con dos l\u00edneas, una para los ingresos y otra para los gastos. El diagrama debe tener una leyenda identificando la l\u00ednea de los ingresos y la de los gastos, un t\u00edtulo con el nombre \"Evoluci\u00f3n de ingresos y gastos\" y el eje y debe empezar en 0.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Matplotlib"]},{"location":"python/ejercicios/matplotlib/#ejercicio-7","title":"Ejercicio 7","text":"<p>El fichero <code>bancos.csv</code> contiene las cotizaciones de los principales bancos de Espa\u00f1a con : <code>Empresa</code> (nombre de la empresa), <code>Apertura</code> (precio de la acci\u00f3n a la apertura de bolsa), <code>M\u00e1ximo</code> (precio m\u00e1ximo de la acci\u00f3n durante la jornada), <code>M\u00ednimo</code> (precio m\u00ednimo de la acci\u00f3n durante la jornada), <code>Cierre</code> (precio de la acci\u00f3n al cierre de bolsa), <code>Volumen</code> (volumen al cierre de bolsa). Construir una funci\u00f3n reciba el fichero <code>bancos.csv</code> y cree un diagrama de l\u00edneas con las series temporales de las cotizaciones de cierre de cada banco.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Matplotlib"]},{"location":"python/ejercicios/matplotlib/#ejercicio-8","title":"Ejercicio 8","text":"<p>El fichero titanic.csv contiene informaci\u00f3n sobre los pasajeros del Titanic. Crear un dataframe con Pandas y a partir de \u00e9l generar los siguientes diagramas.</p> <ol> <li>Diagrama de sectores con los fallecidos y supervivientes.</li> <li>Histograma con las edades.</li> <li>Diagrama de barras con el n\u00famero de personas en cada clase.</li> <li>Diagrama de barras con el n\u00famero de personas fallecidas y supervivientes en cada clase.</li> <li>Diagrama de barras con el n\u00famero de personas fallecidas y supervivientes acumuladas en cada clase.</li> </ol> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Matplotlib"]},{"location":"python/ejercicios/pandas/","title":"Ejercicios de la Librer\u00eda Pandas","text":"","tags":["Ejercicios","Pandas"]},{"location":"python/ejercicios/pandas/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que pregunte al usuario por las ventas de un rango de a\u00f1os y muestre por pantalla una serie con los datos de las ventas indexada por los a\u00f1os, antes y despu\u00e9s de aplicarles un descuento del 10%.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Pandas"]},{"location":"python/ejercicios/pandas/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir una funci\u00f3n que reciba un diccionario con las notas de los alumno de un curso y devuelva una serie con la nota m\u00ednima, la m\u00e1xima, media y la desviaci\u00f3n t\u00edpica.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Pandas"]},{"location":"python/ejercicios/pandas/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir una funci\u00f3n que reciba un diccionario con las notas de los alumnos de un curso y devuelva una serie con las notas de los alumnos aprobados ordenadas de mayor a menor.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Pandas"]},{"location":"python/ejercicios/pandas/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir programa que genere y muestre por pantalla un DataFrame con los datos de la tabla siguiente:</p> Mes Ventas Gastos Enero 30500 22000 Febrero 35600 23400 Marzo 28300 18100 Abril 33900 20700 <p>Soluci\u00f3n</p>","tags":["Ejercicios","Pandas"]},{"location":"python/ejercicios/pandas/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir una funci\u00f3n que reciba un DataFrame con el formato del ejercicio anterior, una lista de meses, y devuelva el balance (ventas - gastos) total en los meses indicados.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Pandas"]},{"location":"python/ejercicios/pandas/#ejercicio-6","title":"Ejercicio 6","text":"<p>El fichero <code>cotizacion.csv</code> contiene las cotizaciones de las empresas del IBEX35 con las siguientes columnas: <code>nombre</code> (nombre de la empresa), <code>Final</code> (precio de la acci\u00f3n al cierre de bolsa), <code>M\u00e1ximo</code> (precio m\u00e1ximo de la acci\u00f3n durante la jornada), <code>M\u00ednimo</code> (precio m\u00ednimo de la acci\u00f3n durante la jornada), <code>volumen</code> (Volumen al cierre de bolsa), <code>Efectivo</code> (capitalizaci\u00f3n al cierre en miles de euros). Construir una funci\u00f3n que construya un DataFrame a partir del un fichero con el formato anterior y devuelva otro DataFrame con el m\u00ednimo, el m\u00e1ximo y la media de dada columna.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Pandas"]},{"location":"python/ejercicios/pandas/#ejercicio-7","title":"Ejercicio 7","text":"<p>El fichero titanic.csv contiene informaci\u00f3n sobre los pasajeros del Titanic. Escribir un programa con los siguientes requisitos:</p> <ol> <li>Generar un DataFrame con los datos del fichero.</li> <li>Mostrar por pantalla las dimensiones del DataFrame, el n\u00famero de datos que contiene, los nombres de sus columnas y filas, los tipos de datos de las columnas, las 10 primeras filas y las 10 \u00faltimas filas</li> <li>Mostrar por pantalla los datos del pasajero con identificador 148.</li> <li>Mostrar por pantalla las filas pares del DataFrame.</li> <li>Mostrar por pantalla los nombres de las personas que iban en primera clase ordenadas alfab\u00e9ticamente.</li> <li>Mostrar por pantalla el porcentaje de personas que sobrevivieron y murieron.</li> <li>Mostrar por pantalla el porcentaje de personas que sobrevivieron en cada clase.</li> <li>Eliminar del DataFrame los pasajeros con edad desconocida.</li> <li>Mostrar por pantalla la edad media de las mujeres que viajaban en cada clase.</li> <li>A\u00f1adir una nueva columna booleana para ver si el pasajero era menor de edad o no.</li> <li>Mostrar por pantalla el porcentaje de menores y mayores de edad que sobrevivieron en cada clase.</li> </ol> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Pandas"]},{"location":"python/ejercicios/pandas/#ejercicio-8","title":"Ejercicio 8","text":"<p>Los ficheros emisiones-2016.csv, emisiones-2017.csv, emisiones-2018.csv y emisiones-2019.csv, contienen datos sobre las emisiones contaminates en la ciudad de Madrid en los a\u00f1os 2016, 2017, 2018 y 2019 respectivamente. Escribir un programa con los siguientes requisitos:</p> <ol> <li>Generar un DataFrame con los datos de los cuatro ficheros.</li> <li>Filtrar las columnas del DataFrame para quedarse con las columnas ESTACION, MAGNITUD, A\u00d1O, MES y las correspondientes a los d\u00edas D01, D02, etc. </li> <li>Reestructurar el DataFrame para que los valores de los contaminantes de las columnas de los d\u00edas aparezcan en una \u00fanica columna.</li> <li>A\u00f1adir una columna con la fecha a partir de la concatenaci\u00f3n del a\u00f1o, el mes y el d\u00eda (usar el m\u00f3dulo <code>datetime</code>).</li> <li>Eliminar las filas con fechas no v\u00e1lidas (utilizar la funci\u00f3n <code>isnat</code> del m\u00f3dulo <code>numpy</code>) y ordenar el DataFrame por estaciones contaminantes y fecha.</li> <li>Mostrar por pantalla las estaciones y los contaminantes disponibles en el DataFrame.</li> <li>Crear una funci\u00f3n que reciba una estaci\u00f3n, un contaminante y un rango de fechas y devuelva una serie con las emisiones del contaminante dado en la estaci\u00f3n y rango de fechas dado.</li> <li>Mostrar un resumen descriptivo (m\u00ednimo, m\u00e1ximo, media, etc.) para cada contaminante.</li> <li>Mostrar un resumen descriptivo para cada contaminante por distritos.</li> <li>Crear una funci\u00f3n que reciba una estaci\u00f3n y un contaminante y devuelva un resumen descriptivo de las emisiones del contaminante indicado en la estaci\u00f3n indicada. </li> <li>Crear una funci\u00f3n que devuelva las emisiones medias mensuales de un contaminante y un a\u00f1o dados para todos las estaciones.</li> <li>Crear un funci\u00f3n que reciba una estaci\u00f3n de medici\u00f3n y devuelva un DataFrame con las medias mensuales de los distintos tipos de contaminantes.</li> </ol> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Pandas"]},{"location":"python/ejercicios/programacion-funcional/","title":"Ejercicios de Programaci\u00f3n Funcional","text":"","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/programacion-funcional/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir una funci\u00f3n que aplique un descuento a un precio y otra que aplique el IVA a un precio. Escribir una tercera funci\u00f3n que reciba un diccionario con los precios y porcentajes de una cesta de la compra, y una de las funciones anteriores, y utilice la funci\u00f3n pasada para aplicar los descuentos o el IVA a los productos de la cesta y devolver el precio final de la cesta.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/programacion-funcional/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir una funci\u00f3n que simule una calculadora cient\u00edfica que permita calcular el seno, coseno, tangente, exponencial y logaritmo neperiano. La funci\u00f3n preguntar\u00e1 al usuario el valor y la funci\u00f3n a aplicar, y mostrar\u00e1 por pantalla una tabla con los enteros de 1 al valor introducido y el resultado de aplicar la funci\u00f3n a esos enteros.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/programacion-funcional/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir una funci\u00f3n que reciba otra funci\u00f3n y una lista, y devuelva otra lista con el resultado de aplicar la funci\u00f3n dada a cada uno de los elementos de la lista.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/programacion-funcional/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir una funci\u00f3n que reciba otra funci\u00f3n booleana y una lista, y devuelva otra lista con los elementos de la lista que devuelvan <code>True</code> al aplicarles la funci\u00f3n booleana.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/programacion-funcional/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir una funci\u00f3n que reciba una frase y devuelva un diccionario con las palabras que contiene y su longitud.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/programacion-funcional/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir una funci\u00f3n reciba una lista de notas y devuelva la lista de calificaciones correspondientes a esas notas.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/programacion-funcional/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir una funci\u00f3n reciba un diccionario con las asignaturas y las notas de un alumno y devuelva otro diccionario con las asignaturas en may\u00fasculas y las calificaciones correspondientes a las notas.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/programacion-funcional/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir una funci\u00f3n reciba un diccionario con las asignaturas y las notas de un alumno y devuelva otro diccionario con las asignaturas en may\u00fasculas y las calificaciones correspondientes a las notas aprobadas.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/programacion-funcional/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir una funci\u00f3n que calcule el m\u00f3dulo de un vector.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/programacion-funcional/#ejercicio-10","title":"Ejercicio 10","text":"<p>Una inmobiliaria de una ciudad maneja una lista de inmuebles como la siguiente:</p> <pre><code>[{'a\u00f1o': 2000, 'metros': 100, 'habitaciones': 3, 'garaje': True, 'zona': 'A'},\n{'a\u00f1o': 2012, 'metros': 60, 'habitaciones': 2, 'garaje': True, 'zona': 'B'},\n{'a\u00f1o': 1980, 'metros': 120, 'habitaciones': 4, 'garaje': False, 'zona': 'A'},\n{'a\u00f1o': 2005, 'metros': 75, 'habitaciones': 3, 'garaje': True, 'zona': 'B'},\n{'a\u00f1o': 2015, 'metros': 90, 'habitaciones': 2, 'garaje': False, 'zona': 'A'}]\n</code></pre> <p>Construir una funci\u00f3n que permita hacer b\u00fasqueda de inmuebles en funci\u00f3n de un presupuesto dado. La funci\u00f3n recibir\u00e1 como entrada la lista de inmuebles y un precio, y devolver\u00e1 otra lista con los inmuebles cuyo precio sea menor o igual que el dado. Los inmuebles de la lista que se devuelva deben incorporar un nuevo par a cada diccionario con el precio del inmueble, donde el precio de un inmueble se calcula con las siguiente f\u00f3rmula en funci\u00f3n de la zona:</p> <ul> <li>Zona A: precio = (metros * 1000 + habitaciones * 5000 + garaje * 15000) * (1-antiguedad/100)</li> <li>Zona B: precio = (metros * 1000 + habitaciones * 5000 + garaje * 15000) * (1-antiguedad/100) * 1.5</li> </ul> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/programacion-funcional/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir una funci\u00f3n que reciba una muestra de n\u00fameros y devuelva los valores at\u00edpicos, es decir, los valores cuya puntuaci\u00f3n t\u00edpica sea mayor que 3 o menor que -3.  Nota: La puntuaci\u00f3n t\u00edpica de un valor se obtiene restando la media y dividiendo por la desviaci\u00f3n t\u00edpica de la muestra.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Programaci\u00f3n Funcional"]},{"location":"python/ejercicios/tipos-datos/","title":"Ejercicios de Tipos de Datos Simples","text":"","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que muestre por pantalla la cadena <code>\u00a1Hola Mundo!</code>.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene la cadena <code>\u00a1Hola Mundo!</code> en una variable y luego muestre por pantalla el contenido de la variable.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que pregunte el nombre del usuario en la consola y despu\u00e9s de que el usuario lo introduzca muestre por pantalla la cadena <code>\u00a1Hola &lt;nombre&gt;!</code>, donde <code>&lt;nombre&gt;</code> es el nombre que el usuario haya introducido.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que muestre por pantalla el resultado de la siguiente operaci\u00f3n aritm\u00e9tica \\(\\left(\\frac{3+2}{2\\cdot 5}\\right)^2\\).</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que pregunte al usuario por el n\u00famero de horas trabajadas y el coste por hora. Despu\u00e9s debe mostrar por pantalla la paga que le corresponde.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que lea un entero positivo, \\(n\\), introducido por el usuario y despu\u00e9s muestre en pantalla la suma de todos los enteros desde 1 hasta \\(n\\). La suma de los \\(n\\) primeros enteros positivos puede ser calculada de la siguiente forma:</p> \\[ \\mbox{suma} = \\frac{n(n+1)}{2} \\] <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que pida al usuario su peso (en kg) y estatura (en metros), calcule el \u00edndice de masa corporal y lo almacene en una variable, y muestre por pantalla la frase <code>Tu \u00edndice de masa corporal es &lt;imc&gt;</code> donde <code>&lt;imc&gt;</code> es el \u00edndice de masa corporal calculado redondeado con dos decimales.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario dos n\u00fameros enteros y muestre por pantalla la <code>&lt;n&gt; entre &lt;m&gt; da un cociente &lt;c&gt; y un resto &lt;r&gt;</code> donde <code>&lt;n&gt;</code> y <code>&lt;m&gt;</code> son los n\u00fameros introducidos por el usuario, y <code>&lt;c&gt;</code> y <code>&lt;r&gt;</code> son el cociente y el resto de la divisi\u00f3n entera respectivamente.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pregunte al usuario una cantidad a invertir, el inter\u00e9s anual y el n\u00famero de a\u00f1os, y muestre por pantalla el capital obtenido en la inversi\u00f3n.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-10","title":"Ejercicio 10","text":"<p>Una jugueter\u00eda tiene mucho \u00e9xito en dos de sus productos: payasos y mu\u00f1ecas. Suele hacer venta por correo y la empresa de log\u00edstica les cobra por peso de cada paquete as\u00ed que deben calcular el peso de los payasos y mu\u00f1ecas que saldr\u00e1n en cada paquete a demanda. Cada payaso pesa 112 g y cada mu\u00f1eca 75 g. Escribir un programa que lea el n\u00famero de payasos y mu\u00f1ecas vendidos en el \u00faltimo pedido y calcule el peso total del paquete que ser\u00e1 enviado.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-11","title":"Ejercicio 11","text":"<p>Imagina que acabas de abrir una nueva cuenta de ahorros que te ofrece el 4% de inter\u00e9s al a\u00f1o. Estos ahorros debido a intereses, que no se cobran hasta finales de a\u00f1o, se te a\u00f1aden al balance final de tu cuenta de ahorros. Escribir un programa que comience leyendo la cantidad de dinero depositada en la cuenta de ahorros, introducida por el usuario. Despu\u00e9s el programa debe calcular y mostrar por pantalla la cantidad de ahorros tras el primer, segundo y tercer a\u00f1os. Redondear cada cantidad a dos decimales.  </p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/ejercicios/tipos-datos/#ejercicio-12","title":"Ejercicio 12","text":"<p>Una panader\u00eda vende barras de pan a 3.49\u20ac cada una. El pan que no es el d\u00eda tiene un descuento del 60%. Escribir un programa que comience leyendo el n\u00famero de barras vendidas que no son del d\u00eda. Despu\u00e9s el programa debe mostrar el precio habitual de una barra de pan, el descuento que se le hace por no ser fresca y el coste final total.</p> <p>Soluci\u00f3n</p>","tags":["Ejercicios","Tipos de Datos"]},{"location":"python/manual/","title":"Manual de Python","text":"<p>Python es uno de los lenguajes de programaci\u00f3n m\u00e1s extendidos que se caracteriza por ser f\u00e1cil de aprender debido a que su sintaxis es f\u00e1cil de entender para los humanos. En este manual se presentan los conceptos b\u00e1sicos para iniciarse en la programaci\u00f3n con este lenguaje.  </p>"},{"location":"python/manual/#tabla-de-contenidos","title":"Tabla de contenidos","text":"<ul> <li>Introducci\u00f3n a Python</li> <li>Tipos de Datos Primitivos Simples</li> <li>Entrada y Salida por Terminal</li> <li>Condicionales</li> <li>Bucles</li> <li>Listas</li> <li>Tuplas</li> <li>Diccionarios</li> <li>Funciones</li> <li>Programaci\u00f3n funcional</li> <li>Comprensi\u00f3n de Colecciones</li> <li>Ficheros</li> <li>Excepciones</li> <li>Programaci\u00f3n Orientada a Objetos</li> <li>M\u00f3dulos</li> <li>Filter</li> <li>Enumerate</li> <li>La librer\u00eda Datetime</li> <li>La librer\u00eda Numpy</li> <li>La librer\u00eda Pandas</li> <li>La librer\u00eda Matplotlib</li> <li>Depuraci\u00f3n de c\u00f3digo</li> <li>Referencias</li> </ul>"},{"location":"python/manual/bucles/","title":"Bucles","text":"","tags":["Bucles"]},{"location":"python/manual/bucles/#bucles-condicionales-while","title":"Bucles condicionales (<code>while</code>)","text":"<p><code>while</code> <code>condici\u00f3n</code><code>:</code> <code>bloque c\u00f3digo</code> </p> <p>Repite la ejecuci\u00f3n del bloque de c\u00f3digo mientras la expresi\u00f3n l\u00f3gica <code>condici\u00f3n</code> sea cierta.</p> <p>Se puede interrumpir en cualquier momento la ejecuci\u00f3n del bloque de c\u00f3digo con la instrucci\u00f3n <code>break</code>.</p> <p> El bloque de c\u00f3digo debe estar indentado por 4 espacios.</p> <p><pre><code># Pregunta al usuario por un n\u00famero hasta que introduce 0.\nnum = None\nwhile num != 0:\n    num = int(input('Introduce un n\u00famero: '))\n</code></pre> <code>output</code> <pre><code>Introduce un n\u00famero: 2\nIntroduce un n\u00famero: 1\nIntroduce un n\u00famero: 0\n</code></pre></p> <p>Alternativa:</p> <p><pre><code># Pregunta al usuario por un n\u00famero hasta que introduce 0.\nwhile True:\n    num = int(input('Introduce un n\u00famero: '))\n    if num == 0:\n        break\n</code></pre> <code>output</code> <pre><code>Introduce un n\u00famero: 2\nntroduce un n\u00famero: 1\nIntroduce un n\u00famero: 0\n</code></pre></p>","tags":["Bucles"]},{"location":"python/manual/bucles/#practica-el-while","title":"Practica el while","text":"","tags":["Bucles"]},{"location":"python/manual/bucles/#bucles-iterativos-for","title":"Bucles iterativos (<code>for</code>)","text":"<p><code>for</code> <code>i</code> <code>in</code> <code>secuencia</code><code>:</code> <code>bloque c\u00f3digo</code> </p> <p>Repite la ejecuci\u00f3n del bloque de c\u00f3digo para cada elemento de la secuencia <code>secuencia</code>, asignado dicho elemento a <code>i</code> en cada repetici\u00f3n.</p> <p>Se puede interrumpir en cualquier momento la ejecuci\u00f3n del bloque de c\u00f3digo con la instrucci\u00f3n <code>break</code> o saltar la ejecuci\u00f3n para un determinado elemento de la secuencia con la instrucci\u00f3n <code>continue</code>.</p> <p> El bloque de c\u00f3digo debe estar indentado por 4 espacios.</p> <p>Se utiliza fundamentalmente para recorrer colecciones de objetos como cadenas, listas, tuplas o diccionarios.</p> <p>A menudo se usan con la instrucci\u00f3n <code>range</code>:</p> <ul> <li><code>range(fin)</code> : Genera una secuencia de n\u00fameros enteros desde 0 hasta <code>fin-1</code>.</li> <li><code>range(inicio, fin, salto)</code> : Genera una secuencia de n\u00fameros enteros desde <code>inicio</code> hasta <code>fin-1</code> con un incremento de <code>salto</code>.</li> </ul> <p><pre><code>palabra = 'Python'\nfor letra in palabra:\n    print(letra)\n</code></pre> <pre><code>P\ny\nt\nh\no\nn\n</code></pre></p> <pre><code>for i in range(1, 10, 2):\n    print(i, end=\", \") # output 1, 3, 5, 7, 9,\n</code></pre>","tags":["Bucles"]},{"location":"python/manual/bucles/#practica-el-for","title":"Practica el for","text":"","tags":["Bucles"]},{"location":"python/manual/comprension-colecciones/","title":"Comprensi\u00f3n de Colecciones","text":"","tags":["Comprensi\u00f3n Colecciones"]},{"location":"python/manual/comprension-colecciones/#comprension-de-colecciones","title":"Comprensi\u00f3n de colecciones","text":"<p>En muchas aplicaciones es habitual aplicar una funci\u00f3n o realizar una operaci\u00f3n con los elementos de una colecci\u00f3n (lista, tupla o diccionario) y obtener una nueva colecci\u00f3n de elementos transformados. Aunque esto se puede hacer recorriendo la secuencia con un bucle iterativo, y en programaci\u00f3n funcional mediante la funci\u00f3n <code>map</code>, Python incorpora un mecanismo muy potente que permite esto mismo de manera m\u00e1s simple.</p>","tags":["Comprensi\u00f3n Colecciones"]},{"location":"python/manual/comprension-colecciones/#comprension-de-listas","title":"Comprensi\u00f3n de listas","text":"<p>[expresion <code>for</code> variable <code>in</code> lista <code>if</code> condicion]</p> <p>Esta instrucci\u00f3n genera la lista cuyos elementos son el resultado de evaluar la expresi\u00f3n expresion, para cada valor que toma la variable variable, donde variable toma todos los valores de la lista lista que cumplen la condici\u00f3n condici\u00f3n.</p> <pre><code>[x ** 2 for x in range(10)] # output [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n[x for x in range(10) if x % 2 == 0] # output [0, 2, 4, 6, 8]\n[x ** 2 for x in range(10) if x % 2 == 0] # output [0, 4, 16, 36, 64]\nnotas = {'Carmen':5, 'Antonio':4, 'Juan':8, 'M\u00f3nica':9, 'Mar\u00eda': 6, 'Pablo':3}\n[nombre for (nombre, nota) in notas.items() if nota &gt;= 5] # output ['Carmen', 'Juan', 'M\u00f3nica', 'Mar\u00eda']\n</code></pre>","tags":["Comprensi\u00f3n Colecciones"]},{"location":"python/manual/comprension-colecciones/#comprension-de-diccionarios","title":"Comprensi\u00f3n de diccionarios","text":"<p>{expresion-clave<code>:</code>expresion-valor <code>for</code> variables <code>in</code> lista <code>if</code> condicion}</p> <p>Esta instrucci\u00f3n genera el diccionario formado por los pares cuyas claves son el resultado de evaluar la expresi\u00f3n expresion-clave y cuyos valores son el resultado de evaluar la expresi\u00f3n expresion-valor, para cada valor que toma la variable variable, donde variable toma todos los valores de la lista lista que cumplen la condici\u00f3n condici\u00f3n.</p> <pre><code>{palabra:len(palabra) for palabra in ['I', 'love', 'Python']} # output 'I': 1, 'love': 4, 'Python': 6}\nnotas = {'Carmen':5, 'Antonio':4, 'Juan':8, 'M\u00f3nica':9, 'Mar\u00eda': 6, 'Pablo':3}\n{nombre: nota +1 for (nombre, nota) in notas.items() if nota &gt;= 5} # output 'Carmen': 6, 'Juan': 9, 'M\u00f3nica': 10, 'Mar\u00eda': 7}\n</code></pre>","tags":["Comprensi\u00f3n Colecciones"]},{"location":"python/manual/condicionales/","title":"Condicionales","text":"","tags":["Condicionales"]},{"location":"python/manual/condicionales/#condicionales-if","title":"Condicionales (<code>if</code>)","text":"<p><code>if</code> <code>condici\u00f3n1</code><code>:</code> <code>bloque c\u00f3digo</code> <code>elif</code> <code>condici\u00f3n2</code><code>:</code> <code>bloque c\u00f3digo</code> ... <code>else :</code> <code>bloque c\u00f3digo</code></p> <p>Eval\u00faa la expresi\u00f3n l\u00f3gica <code>condici\u00f3n1</code> y ejecuta el primer bloque de c\u00f3digo si es <code>True</code>; si no, eval\u00faa la siguientes condiciones hasta llegar a la primera que es <code>True</code> y ejecuta el bloque de c\u00f3digo asociado. Si ninguna condici\u00f3n es <code>True</code> ejecuta el bloque de c\u00f3digo despu\u00e9s de <code>else:</code>.</p> <p>Pueden aparecer varios bloques <code>elif</code> pero solo uno <code>else</code> al final.</p> <p> Los bloques de c\u00f3digo deben estar indentados por 4 espacios.</p> <p>La instrucci\u00f3n condicional permite evaluar el estado del programa y tomar decisiones sobre qu\u00e9 c\u00f3digo ejecutar en funci\u00f3n del mismo.</p> <pre><code>edad = 14\nif edad &lt;= 18 : \n    print('Menor')\nelif edad &gt; 65:\n    print('Jubilado')\nelse:\n    print('Activo')\n\n# output Menor\nage = 20\nif edad &lt;= 18 : \n    print('Menor')\nelif edad &gt; 65:\n    print('Jubilado')\nelse:\n    print('Activo')\n\n# output Activo\n</code></pre>","tags":["Condicionales"]},{"location":"python/manual/datetime/","title":"La librer\u00eda Datetime","text":"<p>Para manejar fechas en Python se suele utilizar la librer\u00eda <code>datetime</code> que incorpora los tipos de datos <code>date</code>, <code>time</code> y <code>datetime</code> para representar fechas y funciones para manejarlas. Algunas de las operaciones m\u00e1s habituales que permite son:</p> <ul> <li>Acceder a los distintos componentes de una fecha (a\u00f1o, mes, d\u00eda, hora, minutos, segundos y microsegundos).</li> <li>Convertir cadenas con formato de fecha en los tipos <code>date</code>, <code>time</code> o <code>datetime</code>.</li> <li>Convertir fechas de los tipos <code>date</code>, <code>time</code> o <code>datetime</code> en cadenas formateadas de acuerdo a diferentes formatos de fechas.</li> <li>Hacer aritm\u00e9tica de fechas (sumar o restar fechas).</li> <li>Comparar fechas.</li> </ul>","tags":[]},{"location":"python/manual/datetime/#los-tipos-de-datos-date-time-y-datetime","title":"Los tipos de datos <code>date</code>, <code>time</code> y <code>datetime</code>","text":"<ul> <li><code>date(a\u00f1o, mes, dia)</code> : Devuelve un objeto de tipo <code>date</code> que representa la fecha con el <code>a\u00f1o</code>, <code>mes</code> y <code>dia</code> indicados.</li> <li><code>time(hora, minutos, segundos, microsegundos)</code> : Devuelve un objeto de tipo <code>time</code> que representa un tiempo la <code>hora</code>, <code>minutos</code>, <code>segundos</code> y <code>microsegundos</code> indicados.</li> <li><code>datetime(a\u00f1o, mes, dia, hora, minutos, segundos, microsegundos)</code> : Devuelve un objeto de tipo <code>datetime</code> que representa una fecha y hora con el <code>a\u00f1o</code>, <code>mes</code>, <code>dia</code>, <code>hora</code>, <code>minutos</code>, <code>segundos</code> y <code>microsegundos</code> indicados.</li> </ul> <pre><code>from datetime import date, time, datetime\n\ndate(2020, 12, 25) # output datetime.date(2020, 12, 25)\ntime(13,30,5) # output datetime.time(13, 30, 5)\ndatetime(2020, 12, 25, 13, 30, 5) # output datetime.datetime(2020, 12, 25, 13, 30, 5)\nprint(datetime(2020, 12, 25, 13, 30, 5)) # output 2020-12-25 13:30:05\n</code></pre> <p>--</p>","tags":[]},{"location":"python/manual/datetime/#acceso-a-los-componentes-de-una-fecha","title":"Acceso a los componentes de una fecha","text":"<ul> <li><code>date.today()</code> : Devuelve un objeto del tipo <code>date</code> la fecha del sistema en el momento en el que se ejecuta.</li> <li><code>datetime.now()</code>: Devuelve un objeto del tipo <code>datetime</code> con la fecha y la hora del sistema en el momento exacto en el que se ejecuta.</li> <li><code>d.year</code> : Devuelve el a\u00f1o de la fecha <code>d</code>, puede ser del tipo <code>date</code> o <code>datetime</code>.</li> <li><code>d.month</code> : Devuelve el mes de la fecha <code>d</code>, que puede ser del tipo <code>date</code> o <code>datetime</code>.</li> <li><code>d.day</code> : Devuelve el d\u00eda de la fecha <code>d</code>, que puede ser del tipo <code>date</code> o <code>datetime</code>.</li> <li><code>d.weekday()</code> : Devuelve el d\u00eda de la semana de la fecha <code>d</code>, que puede serpuede ser del tipo <code>date</code> o <code>datetime</code>.</li> <li><code>t.hour</code> : Devuelve las horas del tiempo <code>t</code>, que puede ser del tipo <code>time</code> o <code>datetime</code>.</li> <li><code>t.hour</code> : Devuelve los minutos del tiempo <code>t</code>, que puede ser del tipo <code>time</code> o <code>datetime</code>.</li> <li><code>t.second</code> : Devuelve los segundos del tiempo <code>t</code>, que puede ser del tipo <code>time</code> o <code>datetime</code>.</li> <li><code>t.microsecond</code> : Devuelve los microsegundos del tiempo <code>t</code>, que puede ser del tipo <code>time</code> o <code>datetime</code>.</li> </ul> <pre><code>from datetime import date, time, datetime\nprint(date.today()) # output 2020-04-11\ndt = datetime.now()\ndt.year # output 2020\ndt.month # output 4\ndt.day # output 11\ndt.hour # output 22\ndt.minute # output 5\ndt.second # output 45\ndt.microsecond # output 1338\n</code></pre>","tags":[]},{"location":"python/manual/datetime/#conversion-de-fechas-en-cadenas-con-diferentes-formatos","title":"Conversi\u00f3n de fechas en cadenas con diferentes formatos","text":"<ul> <li><code>d.strftime(formato)</code> : Devuelve la cadena que resulta de transformar la fecha <code>d</code> con el formato indicado en la cadena <code>formato</code>. La cadena <code>formato</code> puede contener los siguientes marcadores de posici\u00f3n: <code>%Y</code> (a\u00f1o completo), <code>%y</code> (\u00faltimos dos d\u00edgitos del a\u00f1o), <code>%m</code> (mes en n\u00famero), <code>%B</code> (mes en palabra), <code>%d</code> (d\u00eda), <code>%A</code> (d\u00eda de la semana), <code>%a</code> (d\u00eda de la semana abrevidado), <code>%H</code> (hora en formato 24 horas), <code>%I</code> (hora en formato 12 horas), <code>%M</code> (minutos), <code>%S</code> (segundos), <code>%p</code> (AM o PM), <code>%C</code> (fecha y hora completas), <code>%x</code> (fecha completa), <code>%X</code> (hora completa).</li> </ul> <pre><code>from datetime import date, time, datetime\nd = datetime.now()\nprint(d.strftime('%d-%m-%Y')) # output 202013-04-2020\nprint(d.strftime('%A, %d %B, %y')) # output 2020Monday, 13 April, 20\nprint(d.strftime('%H:%M:%S')) # output 202020:55:53\nprint(d.strftime('%H horas, %M minutos y %S segundos')) # output 202020 horas, 55 minutos y 53 segundos\n</code></pre>","tags":[]},{"location":"python/manual/datetime/#conversion-de-cadenas-en-fechas","title":"Conversi\u00f3n de cadenas en fechas","text":"<ul> <li><code>strptime(s, formato)</code> : Devuelve el objeto de tipo <code>date</code>, <code>time</code> o <code>datetime</code> que resulta de convertir la cadena <code>s</code> de acuerdo al formato indicado en la cadena <code>formato</code>. La cadena <code>formato</code> puede contener los siguientes marcadores de posici\u00f3n: <code>%Y</code> (a\u00f1o completo), <code>%y</code> (\u00faltimos dos d\u00edgitos del a\u00f1o), <code>%m</code> (mes en n\u00famero), <code>%B</code> (mes en palabra), <code>%d</code> (d\u00eda), <code>%A</code> (d\u00eda de la semana), <code>%a</code> (d\u00eda de la semana abrevidado), <code>%H</code> (hora en formato 24 horas), <code>%I</code> (hora en formato 12 horas), <code>%M</code> (minutos), <code>%S</code> (segundos), <code>%p</code> (AM o PM), <code>%C</code> (fecha y hora completas), <code>%x</code> (fecha completa), <code>%X</code> (hora completa).</li> </ul> <pre><code>from datetime import date, time, datetime\ndatetime.strptime('15/4/2020', '%d/%m/%Y') # output datetime.datetime(2020, 4, 15, 0, 0)\ndatetime.strptime('2020-4-15 20:50:30', '%Y-%m-%d %H:%M:%S') # output datetime.datetime(2020, 4, 15, 20, 50, 30)\n</code></pre>","tags":[]},{"location":"python/manual/datetime/#aritmetica-de-fechas","title":"Aritm\u00e9tica de fechas","text":"<p>Para representar el tiempo transcurrido entre dos fechas se utiliza el tipo <code>timedelta</code>.</p> <ul> <li><code>timedelta(dias, segundos, microsegundos)</code> : Devuelve un objeto del tipo <code>timedelta</code> que representa un intervalo de tiempo con los <code>dias</code>, <code>segundos</code> y <code>micorsegundos</code> indicados.</li> <li><code>d1 - d2</code> : Devuelve un objeto del tipo <code>timedelta</code> que representa el tiempo transcurrido entre las fechas <code>d1</code> y <code>d2</code> del tipo <code>datetime</code>.</li> <li><code>d + delta</code> : Devuelve la fecha del tipo <code>datetime</code> que resulta de sumar a la fecha <code>d</code> el intervalo de tiempo <code>delta</code>, donde <code>delta</code> es del tipo <code>timedelta</code>. </li> </ul> <pre><code>from datetime import date, time, datetime, timedelta\nd1 = datetime(2020, 1, 1)\nd1 + timedelta(31, 3600) # output datetime.datetime(2020, 2, 1, 1, 0)\ndatetime.now() - d1 # output datetime.timedelta(days=132, seconds=1826, microseconds=895590)\n</code></pre>","tags":[]},{"location":"python/manual/depuracion/","title":"Depuraci\u00f3n de c\u00f3digo","text":"","tags":[]},{"location":"python/manual/depuracion/#depuracion-de-programas","title":"Depuraci\u00f3n de programas","text":"<p>La depuraci\u00f3n es una t\u00e9cnica que permite trazar un programa, es decir, seguir el flujo de ejecuci\u00f3n de un programa paso a paso, ejecutando una instrucci\u00f3n en cada paso, y observar el estado de sus variables.</p> <p>Cuando un programa tiene cierta complejidad, la depuraci\u00f3n es imprescindible pare detectar posibles errores.</p> <p>Python dispone del m\u00f3dulo <code>pyd</code> para depurar programas, pero es mucho m\u00e1s c\u00f3modo utilizar alg\u00fan entorno de desarrollo que incorpore la depuraci\u00f3n, como por ejemplo Visual Studio Code.</p>","tags":[]},{"location":"python/manual/depuracion/#comandos-de-depuracion","title":"Comandos de depuraci\u00f3n","text":"<ul> <li>Establecer punto de parada: Detiene la ejecuci\u00f3n del programa en una l\u00ednea concreta de c\u00f3digo.</li> <li>Continuar la ejecuci\u00f3n: Contin\u00faa la ejecuci\u00f3n del programa hasta el siguiente punto de parada o hasta que finalice.</li> <li>Pr\u00f3ximo paso: Ejecuta la siguiente l\u00ednea de c\u00f3digo y para la ejecuci\u00f3n.</li> <li>Pr\u00f3ximo paso con entrada en funci\u00f3n: Ejecuta la siguiente l\u00ednea de c\u00f3digo. Si se trata de una llamada a una funci\u00f3n entonces ejecuta la primera instrucci\u00f3n de la funci\u00f3n y para la ejecuci\u00f3n.</li> <li>Pr\u00f3ximo paso con salida de funci\u00f3n: Ejecuta lo que queda de la funci\u00f3n actual y para la ejecuci\u00f3n.</li> <li>Terminar la depuraci\u00f3n: Termina la depuraci\u00f3n.</li> </ul>","tags":[]},{"location":"python/manual/depuracion/#depuracion-en-visual-studio-code","title":"Depuraci\u00f3n en Visual Studio Code","text":"<p>Antes de iniciar la depuraci\u00f3n de un programa en VSCode hay que establecer alg\u00fan punto de parada. Para ello basta con hacer click en le margen izquierdo de la ventana con del c\u00f3digo a la altura de la l\u00ednea donde se quiere parar la ejecuci\u00f3n del programa.</p> <p>&gt;</p> <p>Para iniciar la depuraci\u00f3n de un programa en VSCode hay que hacer clic sobre el bot\u00f3n  o pulsar la combinaci\u00f3n de teclas (Ctr+Shift+D).</p> <p>La primera vez que depuremos un programa tendremos que crear un fichero de configuraci\u00f3n del depurador (<code>launch.json</code>). Para ello hay que hacer clic en el bot\u00f3n <code>Run and Debug</code>. VSCode mostrar\u00e1 los distintos ficheros de configuraci\u00f3n disponibles y debe seleccionarse el m\u00e1s adecuado para el tipo de programa a depurar. Para programas simples se debe seleccionar <code>Python file</code>.</p> <p>La depuraci\u00f3n comenzar\u00e1 iniciando la ejecuci\u00f3n del programa desde el inicio hasta el primer punto de parada que encuentre.</p> <p>Una vez iniciado el proceso de depuraci\u00f3n, se puede avanzar en la ejecuci\u00f3n del programa haciendo uso de la barra de depuraci\u00f3n que contiene botones con los principales comandos de depuraci\u00f3n.</p> <p></p> <p>Durante la ejecuci\u00f3n del programa, se puede ver el contenido de las variables del programa en la ventana del estado de las variables.</p> <p>El usuario tambi\u00e9n puede introducir expresiones y ver c\u00f3mo se eval\u00faan durante la ejecuci\u00f3n del programa en la ventana de vista de expresiones.</p> <p></p>","tags":[]},{"location":"python/manual/diccionarios/","title":"Diccionarios","text":"","tags":["Diccionarios"]},{"location":"python/manual/diccionarios/#diccionarios","title":"Diccionarios","text":"<p>Un diccionario es una colecci\u00f3n de pares formados por una clave y un valor asociado a la clave.</p> <p>Se construyen poniendo los pares entre llaves <code>{ }</code> separados por comas, y separando la clave del valor con dos puntos <code>:</code>.</p> <p>Se caracterizan por:</p> <ul> <li>No tienen orden.</li> <li>Pueden contener elementos de distintos tipos.</li> <li>Son mutables, es decir, pueden alterarse durante la ejecuci\u00f3n de un programa.</li> <li>Las claves son \u00fanicas, es decir, no pueden repetirse en un mismo diccionario, y pueden ser de cualquier tipo de datos inmutable.</li> </ul> <pre><code># Diccionario vac\u00edo\ntype({})\n# output &lt;class 'dict'&gt;\n# Diccionario con elementos de distintos tipos\n{'nombre':'Alfredo', 'despacho': 218, 'email':'asalber@ceu.es'}\n# Diccionarios anidados\n{'nombre_completo':{'nombre': 'Alfredo', 'Apellidos': 'S\u00e1nchez Alberca'}}\n</code></pre>","tags":["Diccionarios"]},{"location":"python/manual/diccionarios/#acceso-a-los-elementos-de-un-diccionario","title":"Acceso a los elementos de un diccionario","text":"<ul> <li><code>d[clave]</code> devuelve el valor del diccionario <code>d</code> asociado a la clave <code>clave</code>. Si en el diccionario no existe esa clave devuelve un error.</li> <li><code>d.get(clave, valor)</code> devuelve el valor del diccionario <code>d</code> asociado a la clave <code>clave</code>. Si en el diccionario no existe esa clave devuelve <code>valor</code>, y si no se especifica un valor por defecto devuelve <code>None</code>.</li> </ul> <pre><code>a = {'nombre':'Alfredo', 'despacho': 218, 'email':'asalber@ceu.es'}\na['nombre'] # output 'Alfredo'\na['despacho'] = 210\na # output {'nombre':'Alfredo', 'despacho': 218, 'email':'asalber@ceu.es'}\na.get('email') # output 'asalber@ceu.es'\na.get('universidad', 'CEU') # output 'CEU'\n</code></pre>","tags":["Diccionarios"]},{"location":"python/manual/diccionarios/#operaciones-que-no-modifican-un-diccionario","title":"Operaciones que no modifican un diccionario","text":"<ul> <li><code>len(d)</code> : Devuelve el n\u00famero de elementos del diccionario <code>d</code>.</li> <li><code>min(d)</code> : Devuelve la m\u00ednima clave del diccionario <code>d</code> siempre que las claves sean comparables.</li> <li><code>max(d)</code> : Devuelve la m\u00e1xima clave del diccionario <code>d</code> siempre que las claves sean comparables.</li> <li><code>sum(d)</code> : Devuelve la suma de las claves del diccionario <code>d</code>, siempre que las claves se puedan sumar.</li> <li><code>clave in d</code> : Devuelve <code>True</code> si la clave <code>clave</code> pertenece al diccionario <code>d</code> y <code>False</code> en caso contrario.</li> <li><code>d.keys()</code> : Devuelve un iterador sobre las claves de un diccionario.</li> <li><code>d.values()</code> : Devuelve un iterador sobre los valores de un diccionario.</li> <li><code>d.items()</code> : Devuelve un iterador sobre los pares clave-valor de un diccionario.</li> </ul> <pre><code>a = {'nombre':'Alfredo', 'despacho': 218, 'email':'asalber@ceu.es'}\nlen(a) # output 3\nmin(a) # output 'despacho'\n'email' in a # output True\na.keys() # output dict_keys(['nombre', 'despacho', 'email'])\na.values() # output dict_values(['Alfredo', 218, 'asalber@ceu.es'])\na.items() # output dict_items([('nombre', 'Alfredo'), ('despacho', 218), ('email', 'asalber@ceu.es')])\n</code></pre>","tags":["Diccionarios"]},{"location":"python/manual/diccionarios/#operaciones-que-modifican-un-diccionario","title":"Operaciones que modifican un diccionario","text":"<ul> <li><code>d[clave] = valor</code> : A\u00f1ade al diccionario <code>d</code> el par formado por la clave <code>clave</code> y el valor <code>valor</code>.</li> <li><code>d.update(d2)</code>. A\u00f1ade los pares del diccionario <code>d2</code> al diccionario <code>d</code>. </li> <li><code>d.pop(clave, alternativo)</code> : Devuelve del valor asociado a la clave <code>clave</code> del diccionario <code>d</code> y lo elimina del diccionario. Si la clave no est\u00e1 devuelve el valor <code>alternativo</code>.</li> <li><code>d.popitem()</code> : Devuelve la tupla formada por la clave y el valor del \u00faltimo par a\u00f1adido al diccionario <code>d</code> y lo elimina del diccionario.</li> <li><code>del d[clave]</code> : Elimina del diccionario <code>d</code> el par con la clave <code>clave</code>.</li> <li><code>d.clear()</code> : Elimina todos los pares del diccionario <code>d</code> de manera que se queda vac\u00edo.</li> </ul> <pre><code>a = {'nombre':'Alfredo', 'despacho': 218, 'email':'asalber@ceu.es'}\na['universidad'] = 'CEU'\na # output {'nombre': 'Alfredo', 'despacho': 218, 'email': 'asalber@ceu.es', 'universidad': 'CEU'}\na.pop('despacho') # output 218\na # output {'nombre': 'Alfredo', 'email': 'asalber@ceu.es', 'universidad': 'CEU'}\na.popitem() # output ('universidad', 'CEU')\na # output {'nombre': 'Alfredo', 'email': 'asalber@ceu.es'}\ndel a['email']\na # output {'nombre': 'Alfredo'}\na.clear()\na # output {}\n</code></pre>","tags":["Diccionarios"]},{"location":"python/manual/diccionarios/#copia-de-diccionarios","title":"Copia de diccionarios","text":"<p>Existen dos formas de copiar diccionarios:</p> <ul> <li>Copia por referencia <code>d1 = d2</code>: Asocia la variable <code>d1</code> el mismo diccionario que tiene asociado la variable <code>d2</code>, es decir, ambas variables apuntan a la misma direcci\u00f3n de memoria. Cualquier cambio que hagamos a trav\u00e9s de <code>l1</code> o <code>l2</code> afectar\u00e1 al mismo diccionario.</li> <li>Copia por valor <code>d1 = dict(d2)</code>: Crea una copia del diccionario asociado a <code>d2</code> en una direcci\u00f3n de memoria diferente y se la asocia a <code>d1</code>. Las variables apuntan a direcciones de memoria diferentes que contienen los mismos datos. Cualquier cambio que hagamos a trav\u00e9s de <code>l1</code> no afectar\u00e1 al diccionario de <code>l2</code> y viceversa.</li> </ul> <pre><code>a = {1:'A', 2:'B', 3:'C'}\n# copia por referencia\nb = a\nb # output {1:'A', 2:'B', 3:'C'}\nb.pop(2)\nb # output {1:'A', 3:'C'}\na # output {1:'A', 3:'C'}\n</code></pre> <pre><code>a = {1:'A', 2:'B', 3:'C'}\n# copia por referencia\nb = dict(a)\nb # output {1:'A', 2:'B', 3:'C'}\nb.pop(2)\nb # output {1:'A', 3:'C'}\na # output {1:'A', 2:'B', 3:'C'}\n</code></pre>","tags":["Diccionarios"]},{"location":"python/manual/entrada-salida/","title":"Entrada y Salida por Terminal","text":"","tags":[]},{"location":"python/manual/entrada-salida/#entrada-por-terminal-input","title":"Entrada por terminal (<code>input()</code>)","text":"<p>Para asignar a una variable un valor introducido por el usuario en la consola se utiliza la instrucci\u00f3n</p> <p><code>input(mensaje)</code> : Muestra la cadena <code>mensaje</code> por la terminal y devuelve una cadena con la entrada del usuario.  </p> <p> El valor devuelto siempre es una cadena, incluso si el usuario introduce un dato num\u00e9rico.</p> <pre><code>language = input('\u00bfCu\u00e1l es tu lenguaje favorito? ')\nPython\nlanguage # output 'Python'\nage = input('\u00bfCu\u00e1l es tu edad? ')\n20\nage # output '20'\n</code></pre>","tags":[]},{"location":"python/manual/entrada-salida/#salida-por-terminal-print","title":"Salida por terminal (<code>print()</code>)","text":"<p>Para mostrar un dato por la terminal se utiliza la instrucci\u00f3n</p> <p><code>print(dato1, ..., sep=' ', end='\\n', file=sys.stdout</code>)</p> <p>donde</p> <ul> <li><code>dato1, ...</code> son los datos a imprimir y pueden indicarse tantos como se quieran separados por comas.</li> <li><code>sep</code> establece el separador entre los datos, que por defecto es un espacio en blanco <code>' '</code>.</li> <li><code>end</code> indica la cadena final de la impresi\u00f3n, que por defecto es un cambio de l\u00ednea <code>\\n</code>.</li> <li><code>file</code> indica la direcci\u00f3n del flujo de salida, que por defecto es la salida est\u00e1ndar <code>sys.stdout</code>.</li> </ul> <pre><code>print('Hola') # output Hola\nname = 'Alf' \nprint('Hola', name) # output Hola Alf\nprint('El valor de pi es', 3.1415) # output El valor de pi es 3.1415\nprint('Hola', name, sep='') # output HolaAlf\nprint('Hola', name, end='!\\n') # output Hola Alf!\n</code></pre>","tags":[]},{"location":"python/manual/enumerate/","title":"Funci\u00f3n Enumerate()","text":"","tags":["Funciones","Enumerate"]},{"location":"python/manual/enumerate/#la-funcion-enumerate","title":"La funci\u00f3n enumerate()","text":"<p>La funci\u00f3n incorporada (i.e. no necesita importarse) <code>enumerate()</code> toma como argumento un objeto iterable <code>it</code> y retorna  otro cuyos elementos son tuplas de dos objetos, el primero de los cuales indica la posici\u00f3n de un elemento perteneciente  a <code>it</code> y el segundo, el elemento mismo.</p> <p>Para dilucidar esta un tanto oscura definici\u00f3n, v\u00e9ase el siguiente ejemplo.</p> <p><pre><code>lenguajes = [\"Java\", \"C\", \"C++\", \"Rust\", \"Elixir\"]\nlist(enumerate(lenguajes))\n</code></pre> <code>output</code> <pre><code>[(0, 'Java'), (1, 'C'), (2, 'C++'), (3, 'Rust'), (4, 'Elixir')]\n</code></pre></p> <p>El resultado es un objeto iterable que contiene tuplas, dentro de las cuales el primer valor es un n\u00famero correspondiente  a la posici\u00f3n del lenguaje en la lista <code>lenguajes</code>, y el segundo es el nombre del lenguaje mismo.</p> <p>Por defecto las posiciones empiezan desde el cero, pero puede indicarse el n\u00famero de inicio como segundo argumento.</p> <p><pre><code>list(enumerate(lenguajes, 1))\n</code></pre> <code>output</code> <pre><code>[(1, 'Java'), (2, 'C'), (3, 'C++'), (4, 'Rust'), (5, 'Elixir')]\n</code></pre></p> <p>La funci\u00f3n <code>enumerate()</code> es especialmente \u00fatil cuando al emplear un bucle <code>for</code> se precisa tanto de los elementos de un  iterable como de su posici\u00f3n.</p> <p><pre><code>for i, lenguaje in enumerate(lenguajes):\n    print(i, lenguaje)\n</code></pre> <code>output</code> <pre><code>0 Java\n1 C\n2 C++\n3 Rust\n4 Elixir\n</code></pre></p> <p>Este m\u00e9todo es m\u00e1s r\u00e1pido, legible y recomendable que el siguiente.</p> <p><pre><code>for i in range(len(lenguajes)):\n    print(i, lenguajes[i])\n</code></pre> <code>output</code> <pre><code>0 Java\n1 C\n2 C++\n3 Rust\n4 Elixir\n</code></pre></p>","tags":["Funciones","Enumerate"]},{"location":"python/manual/excepciones/","title":"Excepciones","text":"","tags":["Excepciones"]},{"location":"python/manual/excepciones/#control-de-errores-mediante-excepciones","title":"Control de errores mediante excepciones","text":"<p>Python utiliza un objeto especial llamado excepci\u00f3n para controlar cualquier error que pueda ocurrir durante la ejecuci\u00f3n de un programa.</p> <p>Cuando ocurre un error durante la ejecuci\u00f3n de un programa, Python crea una excepci\u00f3n. Si no se controla esta excepci\u00f3n la ejecuci\u00f3n del programa se detiene y se muestra el error (traceback).</p> <p><pre><code>print(1 / 0)  # Error al intentar dividir por 0.\n</code></pre> <code>output</code> <pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero\n</code></pre></p>","tags":["Excepciones"]},{"location":"python/manual/excepciones/#tipos-de-excepciones","title":"Tipos de excepciones","text":"<p>Los principales excepciones definidas en Python son:</p> <ul> <li><code>TypeError</code> : Ocurre cuando se aplica una operaci\u00f3n o funci\u00f3n a un dato del tipo inapropiado.</li> <li><code>ZeroDivisionError</code> : Ocurre cuando se itenta dividir por cero.</li> <li><code>OverflowError</code> : Ocurre cuando un c\u00e1lculo excede el l\u00edmite para un tipo de dato num\u00e9rico.</li> <li><code>IndexError</code> : Ocurre cuando se intenta acceder a una secuencia con un \u00edndice que no existe.</li> <li><code>KeyError</code> : Ocurre cuando se intenta acceder a un diccionario con una clave que no existe.</li> <li><code>FileNotFoundError</code> : Ocurre cuando se intenta acceder a un fichero que no existe en la ruta indicada.</li> <li><code>ImportError</code> : Ocurre cuando falla la importaci\u00f3n de un m\u00f3dulo.</li> </ul> <p>Consultar la documentaci\u00f3nde Python para ver la lista de exepciones predefinidas.</p>","tags":["Excepciones"]},{"location":"python/manual/excepciones/#control-de-excepciones","title":"Control de excepciones","text":"","tags":["Excepciones"]},{"location":"python/manual/excepciones/#try-except-else","title":"<code>try - except - else</code>","text":"<p>Para evitar la interruci\u00f3n de la ejecuci\u00f3n del programa cuando se produce un error, es posible controlar la exepci\u00f3n que se genera con la siguiente instrucci\u00f3n:</p> <p><code>try:</code> bloque c\u00f3digo 1 <code>except</code> excepci\u00f3n<code>:</code> bloque c\u00f3digo 2 <code>else:</code> bloque c\u00f3digo 3</p> <p>Esta instrucci\u00f3n ejecuta el primer bloque de c\u00f3digo y si se produce un error que genera una excepci\u00f3n del tipo excepci\u00f3n entonces ejecuta el segundo bloque de c\u00f3digo, mientras que si no se produce ning\u00fan error, se ejecuta el tercer bloque de c\u00f3digo.</p>","tags":["Excepciones"]},{"location":"python/manual/excepciones/#control-de-excepciones_1","title":"Control de excepciones","text":"<pre><code>def division(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        print('\u00a1No se puede dividir por cero!')\n    else:\n        print(result)\n\ndivision(1, 0) # output \u00a1No se puede dividir por cero!\ndivision(1, 2) # output 0.5\n</code></pre> <pre><code>try:\n    f = open('fichero.txt')  # output El fichero no existe\nexcept FileNotFoundError:\n    print('\u00a1El fichero no existe!')\nelse:\n    print(f.read())\n</code></pre>","tags":["Excepciones"]},{"location":"python/manual/ficheros/","title":"Ficheros","text":"","tags":["Ficheros"]},{"location":"python/manual/ficheros/#ficheros","title":"Ficheros","text":"<p>Hasta ahora hemos visto como interactuar con un programa a trav\u00e9s del teclado (entrada de datos) y la terminal (salida), pero en la mayor parte de las aplicaciones reales tendremos que leer y escribir datos en ficheros.</p> <p>Al utilizar ficheros para guardar los datos estos perdurar\u00e1n tras la ejecuci\u00f3n del programa, pudiendo ser consultados o utilizados m\u00e1s tarde.</p> <p>Las operaciones m\u00e1s habituales con ficheros son:</p> <ul> <li>Crear un fichero.</li> <li>Escribir datos en un fichero.</li> <li>Leer datos de un fichero.</li> <li>Borrar un fichero.</li> </ul>","tags":["Ficheros"]},{"location":"python/manual/ficheros/#creacion-y-escritura-de-ficheros","title":"Creaci\u00f3n y escritura de ficheros","text":"<p>Para crear un fichero nuevo se utiliza la siguiente funci\u00f3n:</p> <ul> <li><code>open(ruta, 'w')</code> : Crea el fichero con la ruta <code>ruta</code>, lo abre en modo escritura (el argumento 'w' significa write) y devuelve un objeto que lo referencia.</li> </ul> <p> Si el fichero indicado por la ruta ya existe en el sistema, se reemplazar\u00e1 por el nuevo.</p> <p>Una vez creado el fichero, para escribir datos en \u00e9l se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>f.write(c)</code> : Escribe la cadena <code>c</code> en el fichero referenciado por <code>f</code> y devuelve el n\u00famero de caracteres escritos. </li> </ul> <pre><code>f = open('saludo.txt', 'w')\nf.write('\u00a1Bienvenido a Python!') # output 21\n</code></pre>","tags":["Ficheros"]},{"location":"python/manual/ficheros/#anadir-datos-a-un-fichero","title":"A\u00f1adir datos a un fichero","text":"<p>Si en lugar de crear un fichero nuevo queremos a\u00f1adir datos a un fichero existente se debe utilizar la siguiente funci\u00f3n:</p> <ul> <li><code>open(ruta, 'a')</code> : Abre el fichero con la ruta <code>ruta</code> en modo a\u00f1adir (el argumento 'a' significa append) y devuelve un objeto que lo referencia.</li> </ul> <p>Una vez abierto el fichero, se utiliza el m\u00e9todo de escritura anterior y los datos se a\u00f1aden al final del fichero.</p> <pre><code>f = open('saludo.txt', 'a')\nf.write('\\n\u00a1Hasta pronto!') # output 15\n</code></pre>","tags":["Ficheros"]},{"location":"python/manual/ficheros/#leer-datos-de-un-fichero","title":"Leer datos de un fichero","text":"<p>Para abrir un fichero en modo lectura se utiliza la siguiente funci\u00f3n:</p> <ul> <li><code>open(ruta, 'r')</code> : Abre el fichero con la ruta <code>ruta</code> en modo lectura (el argumento 'r' significa read) y devuelve un objeto que lo referencia.</li> </ul> <p>Una vez abierto el fichero, se puede leer todo el contenido del fichero o se puede leer l\u00ednea a l\u00ednea. Para ello se utilizan las siguientes funciones:</p> <ul> <li> <p><code>f.read()</code> : Devuelve todos los datos contenidos en el fichero referenciado por <code>f</code> como una cadena de caracteres.</p> </li> <li> <p><code>f.readlines()</code> : Devuelve una lista de cadenas de caracteres donde cada cadena es una linea del fichero referenciado por <code>f</code>.</p> </li> </ul> <p><pre><code>f = open('saludo.txt', 'r')\nprint(f.read())\n</code></pre> <code>output</code> <pre><code>\u00a1Bienvenido a Python!\n\u00a1Hasta pronto!\n</code></pre></p> <p><pre><code>f = open('saludo.txt', 'r')\nlineas = f.readlines()\nprint(lineas)\n</code></pre> <pre><code>['Bienvenido a Python!\\n', '\u00a1Hasta pronto!']\n</code></pre></p>","tags":["Ficheros"]},{"location":"python/manual/ficheros/#cerrar-un-fichero","title":"Cerrar un fichero","text":"<p>Para cerrar un fichero se utiliza el siguiente m\u00e9todo:</p> <p><code>f.close()</code> : Cierra el fichero referenciado por el objeto <code>f</code>.</p> <p>Cuando se termina de trabajar con un fichero conviene cerrarlo, sobre todo si se abre en modo escritura, ya que mientras est\u00e1 abierto en este modo no se puede abrir por otra aplicaci\u00f3n. Si no se cierra expl\u00edcitamente un fichero, Python intentar\u00e1 cerrarlo cuando estime que ya no se va a usar m\u00e1s.</p> <p><pre><code>f = open('saludo.txt', 'r')\nprint(f.read()) # output \u00a1Bienvenido a Python! Hasta pronto!\nf.close()  # Cierre del fichero\nprint(f.read())  # Produce un error\n</code></pre> <code>output</code> <pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: I/O operation on closed file.\n</code></pre></p>","tags":["Ficheros"]},{"location":"python/manual/ficheros/#la-estructura-with-open-as","title":"La estructura <code>with open(...) as</code>","text":"<p>Para despreocuparnos del cierre de un fichero cuando ya no es necesario y no tener que cerrarlo expl\u00edcitamente, se utiliza la siguiente estructura:</p> <p><code>with open(ruta, modo) as f</code>: <code>bloque c\u00f3digo</code></p> <p>Esta estructura abre el fichero con la ruta <code>ruta</code> en el modo <code>modo</code> (<code>'w'</code> para escribir, <code>'a'</code> para a\u00f1adir y <code>'r'</code> para leer) y devuelve una referencia al mismo en la variable <code>f</code>. El fichero permanece abierto mientras se ejecuta el bloque de c\u00f3digo asociado y se cierra autom\u00e1ticamente cuando termina la ejecuci\u00f3n del bloque. </p> <p><pre><code>with open('saludo.txt', 'w') as f:\n    f.write(\"Hola de nuevo\")\n\n# output 13\nwith open('saludo.txt', 'r') as f:\n    print(f.read())\n\n# output Hola de nuevo\nprint(f.read())  # Produce un error al estar el fichero cerrado\n</code></pre> <code>output</code> <pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: I/O operation on closed file.\n</code></pre></p>","tags":["Ficheros"]},{"location":"python/manual/ficheros/#renombrado-y-borrado-de-un-fichero","title":"Renombrado y borrado de un fichero","text":"<p>Para renombra o borrar un fichero se utilizan funciones del m\u00f3dulo <code>os</code>.</p> <p><code>os.rename(ruta1, ruta2)</code> : Renombra y mueve el fichero de la ruta <code>ruta1</code> a la ruta <code>ruta2</code>.</p> <p><code>os.remove(ruta)</code> : Borra el fichero de la ruta <code>ruta</code>.</p> <p>Antes de borrar o renombra un directorio conviene comprobar que existe para que no se produzca un error. Para ello se utiliza la funci\u00f3n</p> <p><code>os.path.isfile(ruta)</code> : Devuelve <code>True</code> si existe un fichero en la ruta <code>ruta</code> y <code>False</code> en caso contrario.</p>","tags":["Ficheros"]},{"location":"python/manual/ficheros/#renombrado-y-borrado-de-un-fichero-o-directorio","title":"Renombrado y borrado de un fichero o directorio","text":"<pre><code>import os\nf = 'saludo.txt'\nif os.path.isfile(f):\n    os.rename(f, 'bienvenida.txt') # renombrado\nelse:\n    print('\u00a1El fichero', f, 'no existe!')\n\nf = 'bienvenida.txt'\nif os.path.isfile(f):\n    os.remove(f) # borrado\nelse:\n    print('\u00a1El fichero', f, 'no existe!')\n</code></pre>","tags":["Ficheros"]},{"location":"python/manual/ficheros/#creacion-cambio-y-eliminacion-de-directorios","title":"Creaci\u00f3n, cambio y eliminaci\u00f3n de directorios","text":"<p>Para trabajar con directorios tambi\u00e9n se utilizan funciones del m\u00f3dulo <code>os</code>.</p> <p><code>os.listdir(ruta)</code> : Devuelve una lista con los ficheros y directiorios contenidos en la ruta <code>ruta</code>.</p> <p><code>os.mkdir(ruta)</code> : Crea un nuevo directorio en la ruta <code>ruta</code>.</p> <p><code>os.chdir(ruta)</code> : Cambia el directorio actual al indicado por la ruta <code>ruta</code>.</p> <p><code>os.getcwd()</code> : Devuelve una cadena con la ruta del directorio actual.</p> <p><code>os.rmdir(ruta)</code> : Borra el directorio de la ruta <code>ruta</code>, siempre y cuando est\u00e9 vac\u00edo.</p>","tags":["Ficheros"]},{"location":"python/manual/ficheros/#leer-un-fichero-de-internet","title":"Leer un fichero de internet","text":"<p>Para leer un fichero de internet hay que utilizar la funci\u00f3n <code>urlopen</code> del m\u00f3dulo <code>urllib.request</code>.</p> <p><code>urlopen(url)</code> : Abre el fichero con la <code>url</code> especificada y devuelve un objeto del tipo fichero al que se puede acceder con los m\u00e9todos de lectura de ficheros anteriores.</p> <p><pre><code>from urllib import request\nf = request.urlopen('https://raw.githubusercontent.com/jorgelgpz/cursos/main/README.md')\ndatos = f.read()\nprint(datos.decode('utf-8'))\n</code></pre> <code>output</code> <pre><code>Aprende Python con Profe Jorge\n</code></pre></p>","tags":["Ficheros"]},{"location":"python/manual/filter/","title":"Funci\u00f3n Filter","text":"","tags":["Funciones","Filter"]},{"location":"python/manual/filter/#la-funcion-filter","title":"La funci\u00f3n filter()","text":"<p>La funci\u00f3n incorporada <code>filter()</code> permite filtrar elementos de una lista o de cualquier objeto iterable.  Como primer argumento se le debe indicar una funci\u00f3n <code>f(i)</code> que tome como argumento un objeto y retorne un valor  booleano (<code>True</code> o <code>False</code>); en segundo lugar, el objeto iterable it que se desea filtrar.  Como resultado retorna un iterador cuyos elementos son aquellos presentes en <code>it</code> para los cuales <code>f(i) == True</code>.</p> <p><pre><code>def es_par(n):\n    return n % 2 == 0\n\nlist(filter(es_par, range(1, 51))) \n</code></pre> <code>output</code> <pre><code>[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]\n</code></pre></p> <p>En este caso, <code>filter()</code> recorre cada uno de los elementos de <code>range(1, 51)</code> y ejecuta para cada uno de ellos la funci\u00f3n  especificada (<code>es_par()</code>). Si el resultado es verdadero, lo incluye en el iterador resultante.</p>","tags":["Funciones","Filter"]},{"location":"python/manual/funciones/","title":"Funciones","text":"","tags":["Funciones"]},{"location":"python/manual/funciones/#funciones-def","title":"Funciones (<code>def</code>)","text":"<p>Una funci\u00f3n es un bloque de c\u00f3digo que tiene asociado un nombre, de manera que cada vez que se quiera ejecutar el bloque de c\u00f3digo basta con invocar el nombre de la funci\u00f3n.</p> <p>Para declarar una funci\u00f3n se utiliza la siguiente sintaxis:</p> <p><code>def &lt;nombre-funcion&gt; (&lt;par\u00e1metros&gt;):</code> <code>bloque c\u00f3digo</code> <code>return &lt;objeto&gt;</code></p> <pre><code>def bienvenida():\n    print('\u00a1Bienvenido a Python!')\n    return\n\ntype(bienvenida) # output &lt;class 'function'&gt;\nbienvenida() # output \u00a1Bienvenido a Python!\n</code></pre>","tags":["Funciones"]},{"location":"python/manual/funciones/#parametros-y-argumentos-de-una-funcion","title":"Par\u00e1metros y argumentos de una funci\u00f3n","text":"<p>Una funci\u00f3n puede recibir valores cuando se invoca a trav\u00e9s de unas variables conocidas como par\u00e1metros que se definen entre par\u00e9ntesis en la declaraci\u00f3n de la funci\u00f3n. En el cuerpo de la funci\u00f3n se pueden usar estos par\u00e1metros como si fuesen variables.</p> <p>Los valores que se pasan a la funci\u00f3n en una llamada o invocaci\u00f3n concreta de ella se conocen como argumentos y se asocian a los par\u00e1metros de la declaraci\u00f3n de la funci\u00f3n.</p> <pre><code>def bienvenida(nombre):\n    print('\u00a1Bienvenido a Python', nombre + '!')\n    return\n\nbienvenida('Alf') # output \u00a1Bienvenido a Python Alf!\n</code></pre>","tags":["Funciones"]},{"location":"python/manual/funciones/#paso-de-argumentos-a-una-funcion","title":"Paso de argumentos a una funci\u00f3n","text":"<p>Los argumentos se pueden pasar de dos formas:</p> <ul> <li>Argumentos posicionales: Se asocian a los par\u00e1metros de la funci\u00f3n en el mismo orden que aparecen en la definici\u00f3n de la funci\u00f3n.</li> <li>Argumentos nominales: Se indica expl\u00edcitamente el nombre del par\u00e1metro al que se asocia un argumento de la forma <code>parametro = argumento</code>.</li> </ul> <pre><code>def bienvenida(nombre, apellido):\n    print('\u00a1Bienvenido a Python', nombre, apellido + '!')\n    return\n\nbienvenida('Alfredo', 'S\u00e1nchez') # output \u00a1Bienvenido a Python Alfredo S\u00e1nchez!\nbienvenida(apellido = 'S\u00e1nchez', nombre = 'Alfredo') # output \u00a1Bienvenido a Python Alfredo S\u00e1nchez!\n</code></pre>","tags":["Funciones"]},{"location":"python/manual/funciones/#retorno-de-una-funcion","title":"Retorno de una funci\u00f3n","text":"<p>Una funci\u00f3n puede devolver un objeto de cualquier tipo tras su invocaci\u00f3n. Para ello el objeto a devolver debe escribirse detr\u00e1s de la palabra reservada <code>return</code>. Si no se indica ning\u00fan objeto, la funci\u00f3n no devolver\u00e1 nada.</p> <pre><code>def area_triangulo(base, altura):\n    return base * altura / 2\n\narea_triangulo(2, 3) # output 3\narea_triangulo(4, 5) # output 10\n</code></pre> <p>Una funci\u00f3n puede devolver m\u00e1s de un objeto separ\u00e1ndolos por comas tras la palabra reservada <code>return</code>. En tal caso, la funci\u00f3n agrupar\u00e1 los objetos en una tupla y devolver\u00e1 la tupla.</p>","tags":["Funciones"]},{"location":"python/manual/funciones/#argumentos-por-defecto","title":"Argumentos por defecto","text":"<p>En la definici\u00f3n de una funci\u00f3n se puede asignar a cada par\u00e1metro un argumento por defecto, de manera que si se invoca la funci\u00f3n sin proporcionar ning\u00fan argumento para ese par\u00e1metro, se utiliza el argumento por defecto.</p> <pre><code>def bienvenida(nombre, lenguaje = 'Python'):\n    print('\u00a1Bienvenido a', lenguaje, nombre + '!')\n    return\n\nbienvenida('Alf') # output \u00a1Bienvenido a Python Alf!\nbienvenida('Alf', 'Java') # output \u00a1Bienvenido a Java Alf!\n</code></pre> <p>Los par\u00e1metros con un argumento por defecto deben indicarse despu\u00e9s de los par\u00e1metros sin argumentos por defectos. De lo contrario se produce un error.</p>","tags":["Funciones"]},{"location":"python/manual/funciones/#pasar-un-numero-indeterminado-de-argumentos","title":"Pasar un n\u00famero indeterminado de argumentos","text":"<p>Por \u00faltimo, es posible pasar un n\u00famero variable de argumentos a un par\u00e1metro. Esto se puede hacer de dos formas:</p> <ul> <li><code>*parametro</code>: Se antepone un asterisco al nombre del par\u00e1metro y en la invocaci\u00f3n de la funci\u00f3n se pasa el n\u00famero variable de argumentos separados por comas. Los argumentos se guardan en una lista que se asocia al par\u00e1metro.</li> </ul> <pre><code>def menu(*platos):\n    print('Hoy tenemos: ', end='')\n    for plato in platos:\n        print(plato, end=', ')\n    return\n\nmenu('pasta', 'pizza', 'ensalada') # output Hoy tenemos: pasta, pizza, ensalada,\n</code></pre> <ul> <li><code>**parametro</code>: Se anteponen dos asteriscos al nombre del par\u00e1metro y en la invocaci\u00f3n de la funci\u00f3n se pasa el n\u00famero variable de argumentos por pares <code>nombre = valor</code>, separados por comas. Los argumentos se guardan en un diccionario que se asocia al par\u00e1metro.</li> </ul> <p><pre><code>def contacto(**info):\n    print('Datos del contacto')\n    for clave, valor in info.items():\n        print(clave, \":\", valor)\n    return\n</code></pre> <code>output</code> <pre><code>contacto(Nombre = \"Alf\", Email = \"asalber@ceu.es\")\n</code></pre> <code>output</code> <pre><code>Datos del contacto\nNombre : Alf\nEmail : asalber@ceu.es\n</code></pre> <code>output</code> <pre><code>contacto(Nombre = \"Alf\", Email = \"asalber@ceu.es\", Direcci\u00f3n = \"Madrid\")\n</code></pre> <code>output</code> <pre><code>Datos del contacto\nNombre : Alf\nEmail : asalber@ceu.es\nDirecci\u00f3n : Madrid\n</code></pre></p>","tags":["Funciones"]},{"location":"python/manual/funciones/#ambito-de-los-parametros-y-variables-de-una-funcion","title":"\u00c1mbito de los par\u00e1metros y variables de una funci\u00f3n","text":"<p>Los par\u00e1metros y las variables declaradas dentro de una funci\u00f3n son de \u00e1mbito local, mientras que las definidas fuera de ella son de \u00e1mbito \u00e1mbito global.</p> <p>Tanto los par\u00e1metros como las variables del \u00e1mbito local de una funci\u00f3n s\u00f3lo est\u00e1n accesibles durante la ejecuci\u00f3n de la funci\u00f3n, es decir, cuando termina la ejecuci\u00f3n de la funci\u00f3n estas variables desaparecen y no son accesibles desde fuera de la funci\u00f3n.</p> <p><pre><code>def bienvenida(nombre):\n    usar_lenguaje = 'Python'\n    print('\u00a1Bienvenido a', lenguaje, nombre + '!')\n    return\n\nbienvenida('Alf') # output \u00a1Bienvenido a Python Alf!\nusar_lenguaje\n</code></pre> <code>output</code> <pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'lenguaje' is not defined\n</code></pre></p> <p>Si en el \u00e1mbito local de una funci\u00f3n existe una variable que tambi\u00e9n existe en el \u00e1mbito global, durante la ejecuci\u00f3n de la funci\u00f3n la variable global queda eclipsada por la variable local y no es accesible hasta que finaliza la ejecuci\u00f3n de la funci\u00f3n.</p> <pre><code>lenguaje = 'Java'\ndef bienvenida():\n    lenguaje = 'Python'\n    print('\u00a1Bienvenido a', lenguaje + '!')\n    return\n\nbienvenida() # output \u00a1Bienvenido a Python!\nprint(lenguaje) # output Java\n</code></pre>","tags":["Funciones"]},{"location":"python/manual/funciones/#paso-de-argumentos-por-asignacion","title":"Paso de argumentos por asignaci\u00f3n","text":"<p>En Python los argumentos se pasan a una funci\u00f3n por asignaci\u00f3n, es decir, se asignan a los par\u00e1metros de la funci\u00f3n como si fuesen variables locales. De este modo, cuando los argumentos son objetos mutables (listas, diccionarios, etc.) se pasa al par\u00e1metro una referencia al objeto, de manera que cualquier cambio que se haga dentro de la funci\u00f3n mediante el par\u00e1metro asociado afectar\u00e1 al objeto original.</p> <pre><code>primer_curso = ['Matem\u00e1ticas', 'F\u00edsica']\ndef a\u00f1ade_asignatura(curso, asignatura):\n    curso.append(asignatura)\n    return\n\na\u00f1ade_asignatura(primer_curso, 'Qu\u00edmica')\nprint(primer_curso) # output ['Matem\u00e1ticas', 'F\u00edsica', 'Qu\u00edmica']\n</code></pre>","tags":["Funciones"]},{"location":"python/manual/funciones/#las-funciones-son-objetos","title":"Las funciones son objetos","text":"<p>En Python las funciones son objetos como el resto de tipos de datos, de manera que es posible asignar una funci\u00f3n a una variable y luego utilizar la variable para hacer la llamada a la funci\u00f3n.</p> <pre><code>def saludo(nombre):\n    print(\"Hola\", nombre)\n    return\n\nbienvenida = saludo\nbienvenida(\"Alf\") # output Hola Alf\n</code></pre> <p>Esto permite, por tanto, pasar funciones como argumentos en la llamada a una funci\u00f3n y que una funci\u00f3n pueda devolver otras funciones.</p> <pre><code>def impuesto(porcentaje):\n    def aplicar(base):\n        return base * porcentaje / 100\n    return aplicar\n\niva = impuesto(21)\niva(1000) # output 210.0\n</code></pre>","tags":["Funciones"]},{"location":"python/manual/funciones/#funciones-recursivas","title":"Funciones recursivas","text":"<p>Una funci\u00f3n recursiva es una funci\u00f3n que en su cuerpo contiene una llama a si misma.</p> <p>La recursi\u00f3n es una pr\u00e1ctica com\u00fan en la mayor\u00eda de los lenguajes de programaci\u00f3n ya que permite resolver las tareas recursivas de manera m\u00e1s natural.</p> <p>Para garantizar el final de una funci\u00f3n recursiva, las sucesivas llamadas tienen que reducir el grado de complejidad del problema, hasta que este pueda resolverse directamente sin necesidad de volver a llamar a la funci\u00f3n.</p> <pre><code>def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nfactorial(5) # output 120\n</code></pre>","tags":["Funciones"]},{"location":"python/manual/funciones/#funciones-recursivas-multiples","title":"Funciones recursivas m\u00faltiples","text":"<p>Una funci\u00f3n recursiva puede invocarse a si misma tantas veces como quiera en su cuerpo.</p> <pre><code>def fibonacci(n):\n    if n &lt;= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nfibonacci(6) # output 8\n</code></pre>","tags":["Funciones"]},{"location":"python/manual/funciones/#los-riesgos-de-la-recursion","title":"Los riesgos de la recursi\u00f3n","text":"<p>Aunque la recursi\u00f3n permite resolver las tareas recursivas de forma m\u00e1s natural, hay que tener cuidado con ella porque suele consumir bastante memoria, ya que cada llamada a la funci\u00f3n crea un nuevo \u00e1mbito local con las variables y los par\u00e1metros de la funci\u00f3n.</p> <p>En muchos casos es m\u00e1s eficiente resolver la tarea recursiva de forma iterativa usando bucles.</p> <pre><code>def fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\nfibonacci(6) # output 8\n</code></pre>","tags":["Funciones"]},{"location":"python/manual/funciones/#documentacion-de-funciones","title":"Documentaci\u00f3n de funciones","text":"<p>Una pr\u00e1ctica muy recomendable cuando se define una funci\u00f3n es describir lo que la funci\u00f3n hace en un comentario.</p> <p>En Python esto se hace con un docstring que es un tipo de comentario especial se hace en la l\u00ednea siguiente al encabezado de la funci\u00f3n entre tres comillas simples <code>'''</code> o dobles <code>\"\"\"</code>.</p> <p>Despu\u00e9s se puede acceder a la documentaci\u00f3n de la funci\u00f3n con la funci\u00f3n <code>help(&lt;nombre-funci\u00f3n&gt;)</code>.</p> <p><pre><code>def area_triangulo(base, altura):\n    \"\"\"\n    Funci\u00f3n que calcula el \u00e1rea de un tri\u00e1ngulo.\n\n    Par\u00e1metros:\n        - base: Un n\u00famero real con la base del tri\u00e1ngulo.\n        - altura: Un n\u00famero real con la altura del tri\u00e1ngulo.\n    Salida:\n        Un n\u00famero real con el \u00e1rea del tri\u00e1ngulo de base y altura especificadas.\n    \"\"\"\n    return base * altura / 2\n\nhelp(area_triangulo)\n</code></pre> <code>output</code> <pre><code>area_triangulo(base, altura)\n    Funci\u00f3n que calcula el \u00e1rea de un tri\u00e1ngulo.\n\n    Par\u00e1metros:\n        - base: Un n\u00famero real con la base del tri\u00e1ngulo.\n        - altura: Un n\u00famero real con la altura del tri\u00e1ngulo.\n    Salida:\n        Un n\u00famero real con el \u00e1rea del tri\u00e1ngulo de base y altura especificadas.\n</code></pre></p>","tags":["Funciones"]},{"location":"python/manual/introduccion-python/","title":"Introducci\u00f3n a Python","text":"","tags":[]},{"location":"python/manual/introduccion-python/#que-es-python","title":"\u00bfQu\u00e9 es Python?","text":"<p>Python es un lenguaje de programaci\u00f3n de alto nivel multiparadigma que permite:</p> <ul> <li>Programaci\u00f3n imperativa</li> <li>Programaci\u00f3n funcional</li> <li>Programaci\u00f3n orientada a objetos</li> </ul> <p>Fue creado por Guido van Rossum en 1990 aunque actualmente es desarrollado y mantenido por la Python Software Foundation</p>","tags":[]},{"location":"python/manual/introduccion-python/#principales-ventajas-de-python","title":"Principales ventajas de Python","text":"<ul> <li>Es de c\u00f3digo abierto (certificado por la OSI).</li> <li>Es interpretable y compilable.</li> <li>Es f\u00e1cil de aprender gracias a que su sintaxis es bastante legible para los humanos.</li> <li>Es un lenguaje maduro (29 a\u00f1os).</li> <li>Es f\u00e1cilmente extensible e integrable en otros lenguajes (C, java).</li> <li>Esta mantenido por una gran comunidad de desarrolladores y hay multitud de recursos para su aprendizaje.</li> </ul>","tags":[]},{"location":"python/manual/introduccion-python/#tipos-de-ejecucion","title":"Tipos de ejecuci\u00f3n","text":"","tags":[]},{"location":"python/manual/introduccion-python/#interpretado-en-la-consola-de-python","title":"Interpretado en la consola de Python","text":"<p>Se ejecuta cada instrucci\u00f3n que introduce el usuario de manera interactiva.</p> <pre><code># (1)!\n&gt; python\nname = \"Alf\"\nprint(\"Hola \", name)\n# output Hola Alf\n</code></pre> <ol> <li>El comando <code>python</code> permite ingresar al interprete de python.</li> </ol>","tags":[]},{"location":"python/manual/introduccion-python/#interpretado-en-fichero","title":"Interpretado en fichero","text":"<p>Se leen y se ejecutan una a una todas las instrucciones del fichero.</p> hola.py<pre><code>name = \"Alf\"\nprint(\"Hola \", name)\n</code></pre> <pre><code>&gt; python hola.py\nHola Alf\n</code></pre> <p>Tambi\u00e9n se puede hacer el fichero ejecutable indicando en la primera l\u00ednea la ruta hasta el int\u00e9rprete de Python.</p> <pre><code>#!/usr/bin/python3\nname = \"Alf\"\nprint(\"Hola\", name)\n</code></pre> <pre><code>&gt; chmod +x hola.py\n&gt; ./hola.py\nHola Alf\n</code></pre>","tags":[]},{"location":"python/manual/introduccion-python/#compilado-a-bytecode","title":"Compilado a bytecode","text":"hola.py<pre><code>name = \"Alf\"\nprint(\"Hola \" + name)\n</code></pre> <pre><code>&gt; python -O -m py_compile hola.py\n&gt; python __pycache__/hola.cpython-37.pyc\nHola Alf\n</code></pre>","tags":[]},{"location":"python/manual/introduccion-python/#compilado-a-ejecutable-del-sistema","title":"Compilado a ejecutable del sistema","text":"<p>Hay distintos paquetes que permiten compilar a un ejecutable del sistema operativo usado, por ejemplo <code>pyinstaller</code>.</p> <pre><code>&gt; conda install pyinstaller\n&gt; pyinstaller hola.py\n&gt; ./dist/hola/hola\nHola Alf\n</code></pre>","tags":[]},{"location":"python/manual/listas/","title":"Listas","text":"","tags":["Listas"]},{"location":"python/manual/listas/#listas","title":"Listas","text":"<p>Una lista es una secuencias ordenadas de objetos de distintos tipos.</p> <p>Se construyen poniendo los elementos entre corchetes <code>[</code> <code>]</code> separados por comas.</p> <p>Se caracterizan por:</p> <ul> <li>Tienen orden.</li> <li>Pueden contener elementos de distintos tipos.</li> <li>Son mutables, es decir, pueden alterarse durante la ejecuci\u00f3n de un programa.</li> </ul> <pre><code># Lista vac\u00eda\ntype([]) # output &lt;class 'list'&gt;\n# Lista con elementos de distintos tipos\n[1, \"dos\", True]\n# Listas anidadas\n[1, [2, 3], 4]\n</code></pre>","tags":["Listas"]},{"location":"python/manual/listas/#creacion-de-listas-mediante-la-funcion-list","title":"Creaci\u00f3n de listas mediante la funci\u00f3n <code>list()</code>","text":"<p>Otra forma de crear listas es mediante la funci\u00f3n <code>list()</code>.</p> <ul> <li><code>list(c)</code> : Crea una lista con los elementos de la secuencia o colecci\u00f3n <code>c</code>.</li> </ul> <p>Se pueden indicar los elementos separados por comas, mediante una cadena, o mediante una colecci\u00f3n de elementos iterable.</p> <pre><code>list() # output []\nlist(1, 2, 3) # output [1, 2, 3]\nlist(\"Python\") # output 'P', 'y', 't', 'h', 'o', 'n']\n</code></pre>","tags":["Listas"]},{"location":"python/manual/listas/#acceso-a-los-elementos-de-una-lista","title":"Acceso a los elementos de una lista","text":"<p>Se utilizan los mismos operadores de acceso que para cadenas de caracteres.</p> <ul> <li><code>l[i]</code> : Devuelve el elemento de la lista <code>l</code> con el \u00edndice <code>i</code>.</li> </ul> <p> El \u00edndice del primer elemento de la lista es 0.</p> <p><pre><code>a = ['P', 'y', 't', 'h', 'o', 'n']\na[0] # output 'P'\na[5] # output 'n'\na[-1] # output 'n'\na[6]\n</code></pre> <pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre></p>","tags":["Listas"]},{"location":"python/manual/listas/#sublistas","title":"Sublistas","text":"<ul> <li><code>l[i:j:k]</code> : Devuelve la sublista desde el elemento de <code>l</code> con el \u00edndice <code>i</code> hasta el elemento anterior al \u00edndice <code>j</code>, tomando elementos cada <code>k</code>.</li> </ul> <pre><code>a = ['P', 'y', 't', 'h', 'o', 'n']\na[1:4] # output ['y', 't', 'h']\na[1:1] # output []\na[:-3] # output ['y', 't', 'h']\na[:] # output ['P', 'y', 't', 'h', 'o', 'n']\na[0:6:2] # output ['P', 't', 'o']\n</code></pre>","tags":["Listas"]},{"location":"python/manual/listas/#operaciones-que-no-modifican-una-lista","title":"Operaciones que no modifican una lista","text":"<ul> <li><code>len(l)</code> : Devuelve el n\u00famero de elementos de la lista <code>l</code>.</li> <li><code>min(l)</code> : Devuelve el m\u00ednimo elemento de la lista <code>l</code> siempre que los datos sean comparables.</li> <li><code>max(l)</code> : Devuelve el m\u00e1ximo elemento de la lista <code>l</code> siempre que los datos sean comparables.</li> <li><code>sum(l)</code> : Devuelve la suma de los elementos de la lista <code>l</code>, siempre que los datos se puedan sumar.</li> <li><code>dato in l</code> : Devuelve <code>True</code> si el dato <code>dato</code> pertenece a la lista <code>l</code> y <code>False</code> en caso contrario.</li> <li><code>l.index(dato)</code> : Devuelve la posici\u00f3n que ocupa en la lista <code>l</code> el primer elemento con valor <code>dato</code>.</li> <li><code>l.count(dato)</code> : Devuelve el n\u00famero de veces que el valor <code>dato</code> est\u00e1 contenido en la lista <code>l</code>.</li> <li><code>all(l)</code> : Devuelve <code>True</code> si todos los elementos de la lista <code>l</code> son <code>True</code> y <code>False</code> en caso contrario.</li> <li><code>any(l)</code> : Devuelve <code>True</code> si alg\u00fan elemento de la lista <code>l</code> es <code>True</code> y <code>False</code> en caso contrario.</li> </ul> <pre><code>a = [1, 2, 2, 3]\nlen(a) # output 4\nmin(a) # output 1\nmax(a) # output 3\nsum(a) # output 8\n3 in a # output True\na.index(2) # output 1\na.count(2) # output 2\nall(a) # output True\nany([0, False, 3&lt;2]) # output False\n</code></pre>","tags":["Listas"]},{"location":"python/manual/listas/#operaciones-que-modifican-una-lista","title":"Operaciones que modifican una lista","text":"<ul> <li><code>l1 + l2</code> : Crea una nueva lista concatenan los elementos de la listas <code>l1</code> y <code>l2</code>.</li> <li><code>l.append(dato)</code> : A\u00f1ade <code>dato</code> al final de la lista <code>l</code>. </li> <li><code>l.extend(sequencia)</code> : A\u00f1ade los datos de <code>sequencia</code> al final de la lista <code>l</code>.</li> <li><code>l.insert(\u00edndice, dato)</code> : Inserta <code>dato</code> en la posici\u00f3n <code>\u00edndice</code> de la lista <code>l</code> y desplaza los elementos una posici\u00f3n a partir de la posici\u00f3n <code>\u00edndice</code>.</li> <li><code>l.remove(dato)</code> : Elimina el primer elemento con valor <code>dato</code> en la lista <code>l</code> y desplaza los que est\u00e1n por detr\u00e1s de \u00e9l una posici\u00f3n hacia delante.</li> <li><code>l.pop([\u00edndice])</code> : Devuelve el dato en la posici\u00f3n <code>\u00edndice</code> y lo elimina de la lista <code>l</code>, desplazando los elementos por detr\u00e1s de \u00e9l una posici\u00f3n hacia delante.</li> <li><code>l.sort()</code> : Ordena los elementos de la lista <code>l</code> de acuerdo al orden predefinido, siempre que los elementos sean comparables.</li> <li><code>l.reverse()</code> : invierte el orden de los elementos de la lista <code>l</code>.</li> </ul> <pre><code>a = [1, 3]\nb = [2 , 4, 6]\na.append(5)\na # output [1, 3, 5]\na.remove(3)\na # output [1, 5]\na.insert(1, 3)\na # output [1, 3, 5]\nb.pop() # output 6\nc = a + b\nc # output [1, 3, 5, 2, 4]\nc.sort()\nc # output [1, 2, 3, 4, 5]\nc.reverse()\nc # output [5, 4, 3, 2, 1]\n</code></pre>","tags":["Listas"]},{"location":"python/manual/listas/#copia-de-listas","title":"Copia de listas","text":"<p>Existen dos formas de copiar listas:</p> <ul> <li>Copia por referencia <code>l1 = l2</code>: Asocia la la variable <code>l1</code> la misma lista que tiene asociada la variable <code>l2</code>, es decir, ambas variables apuntan a la misma direcci\u00f3n de memoria. Cualquier cambio que hagamos a trav\u00e9s de <code>l1</code> o <code>l2</code> afectar\u00e1 a la misma lista.</li> <li>Copia por valor <code>l1 = list(l2)</code>: Crea una copia de la lista asociada a <code>l2</code> en una direcci\u00f3n de memoria diferente y se la asocia a <code>l1</code>. Las variables apuntan a direcciones de memoria diferentes que contienen los mismos datos. Cualquier cambio que hagamos a trav\u00e9s de <code>l1</code> no afectar\u00e1 a la lista de <code>l2</code> y viceversa.</li> </ul> <pre><code>a = [1, 2, 3]\n# copia por referencia\nb = a\nb # output [1, 2, 3]\nb.remove(2)\nb # output [1, 3]\na # output [1, 3]\n</code></pre> <pre><code>a = [1, 2, 3]\n# copia por referencia\nb = list(a)\nb # output [1, 2, 3]\nb.remove(2)\nb # output [1, 3]\na # output [1, 2, 3]\n</code></pre>","tags":["Listas"]},{"location":"python/manual/matplotlib/","title":"La librer\u00eda Matplotlib","text":"<p>Matplotlib es una librer\u00eda de Python especializada en la creaci\u00f3n de gr\u00e1ficos en dos dimensiones.</p> <p></p> <p>Permite crear y personalizar los tipos de gr\u00e1ficos m\u00e1s comunes, entre ellos:</p> <ul> <li>Diagramas de barras</li> <li>Histograma</li> <li>Diagramas de sectores</li> <li>Diagramas de caja y bigotes</li> <li>Diagramas de viol\u00edn</li> <li>Diagramas de dispersi\u00f3n o puntos</li> <li>Diagramas de lineas</li> <li>Diagramas de areas</li> <li>Diagramas de contorno</li> <li>Mapas de color</li> </ul> <p>y combinaciones de todos ellos.</p> <p>En la siguiente galer\u00eda de gr\u00e1ficos pueden apreciarse todos los tipos de gr\u00e1ficos que pueden crearse con esta librer\u00eda.</p>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#creacion-de-graficos-con-matplotlib","title":"Creaci\u00f3n de gr\u00e1ficos con matplotlib","text":"<p>Para crear un gr\u00e1fico con matplotlib es habitual seguir los siguientes pasos:</p> <ol> <li> <p>Importar el m\u00f3dulo <code>pyplot</code>.</p> </li> <li> <p>Definir la figura que contendr\u00e1 el gr\u00e1fico, que es la region (ventana o p\u00e1gina) donde se dibujar\u00e1 y los ejes sobre los que se dibujar\u00e1n los datos. Para ello se utiliza la funci\u00f3n <code>subplots()</code>.</p> </li> <li> <p>Dibujar los datos sobre los ejes. Para ello se utilizan distintas funciones dependiendo del tipo de gr\u00e1fico que se quiera.</p> </li> <li> <p>Personalizar el gr\u00e1fico. Para ello existen multitud de funciones que permiten a\u00f1adir un t\u00edtulo, una leyenda, una rejilla, cambiar colores o personalizar los ejes.</p> </li> <li> <p>Guardar el gr\u00e1fico. Para ello se utiliza la funci\u00f3n <code>savefig()</code>.</p> </li> <li> <p>Mostrar el gr\u00e1fico. Para ello se utiliza la funci\u00f3n <code>show()</code>.</p> </li> </ol> <pre><code># (1)!\n# Importar el m\u00f3dulo pyplot con el alias plt\nimport matplotlib.pyplot as plt\n# Crear la figura y los ejes\nfig, ax = plt.subplots()\n# Dibujar puntos\nax.scatter(x = [1, 2, 3], y = [3, 2, 1])\n# Guardar el gr\u00e1fico en formato png\nplt.savefig('diagrama-dispersion.png')\n# Mostrar el gr\u00e1fico\nplt.show()\n</code></pre> <ol> <li>Debes instalar la libreria de matplotlib en tu int\u00e9rprete con el siguiente comando <code>pip install matplotlib</code>.</li> </ol> <p></p>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#diagramas-de-dispersion-o-puntos","title":"Diagramas de dispersi\u00f3n o puntos","text":"<ul> <li><code>scatter(x, y)</code>: Dibuja un diagrama de puntos con las coordenadas de la lista <code>x</code> en el eje X y las coordenadas de la lista <code>y</code> en el eje Y. </li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.scatter([1, 2, 3, 4], [1, 2, 0, 0.5])\nplt.show()\n</code></pre>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#diagramas-de-lineas","title":"Diagramas de l\u00edneas","text":"<ul> <li><code>plot(x, y)</code>: Dibuja un pol\u00edgono con los v\u00e9rtices dados por las coordenadas de la lista <code>x</code> en el eje X y las coordenadas de la lista <code>y</code> en el eje Y. </li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.plot([1, 2, 3, 4], [1, 2, 0, 0.5])\nplt.show()\n</code></pre>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#diagramas-de-areas","title":"Diagramas de areas","text":"<ul> <li><code>fill_between(x, y)</code>: Dibuja el area bajo el pol\u00edgono con los v\u00e9rtices dados por las coordenadas de la lista <code>x</code> en el eje X y las coordenadas de la lista <code>y</code> en el eje Y. </li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.fill_between([1, 2, 3, 4], [1, 2, 0, 0.5])\nplt.show()\n</code></pre>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#diagramas-de-barras-verticales","title":"Diagramas de barras verticales","text":"<ul> <li><code>bar(x, y)</code>: Dibuja un diagrama de barras verticales donde <code>x</code> es una lista con la posici\u00f3n de las barras en el eje X, e <code>y</code> es una lista con la altura de las barras en el eje Y. </li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.bar([1, 2, 3], [3, 2, 1])\nplt.show()\n</code></pre>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#diagramas-de-barras-horizontales","title":"Diagramas de barras horizontales","text":"<ul> <li><code>barh(x, y)</code>: Dibuja un diagrama de barras horizontales donde <code>x</code> es una lista con la posici\u00f3n de las barras en el eje Y, e <code>y</code> es una lista con la longitud de las barras en el eje X. </li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.barh([1, 2, 3], [3, 2, 1])\nplt.show()\n</code></pre>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#histogramas","title":"Histogramas","text":"<ul> <li><code>hist(x, bins)</code>: Dibuja un histograma con las frecuencias resultantes de agrupar los datos de la lista <code>x</code> en las clases definidas por la lista <code>bins</code>. </li> </ul> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nx = np.random.normal(5, 1.5, size=1000)\nax.hist(x, np.arange(0, 11))\nplt.show()\n</code></pre>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#diagramas-de-sectores","title":"Diagramas de sectores","text":"<ul> <li><code>pie(x)</code>: Dibuja un diagrama de sectores con las frecuencias de la lista <code>x</code>. </li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.pie([5, 4, 3, 2, 1])\nplt.show()\n</code></pre>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#diagramas-de-caja-y-bigotes","title":"Diagramas de caja y bigotes","text":"<ul> <li><code>boxplot(x)</code>: Dibuja un diagrama de caja y bigotes con los datos de la lista <code>x</code>. </li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.boxplot([1, 2, 1, 2, 3, 4, 3, 3, 5, 7])\nplt.show()\n</code></pre>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#diagramas-de-violin","title":"Diagramas de viol\u00edn","text":"<ul> <li><code>violinplot(x)</code>: Dibuja un diagrama de viol\u00edn con los datos de la lista <code>x</code>. </li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.violinplot([1, 2, 1, 2, 3, 4, 3, 3, 5, 7])\nplt.show()\n</code></pre>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#diagramas-de-contorno","title":"Diagramas de contorno","text":"<ul> <li><code>contourf(x, y, z)</code>: Dibuja un diagrama de contorno con las curvas de nivel de la superficie dada por los puntos con las coordenadas de las listas <code>x</code>, <code>y</code> y <code>z</code> en los ejes X, Y y Z respectivamente. </li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nx = np.linspace(-3.0, 3.0, 100)\ny = np.linspace(-3.0, 3.0, 100)\nx, y = np.meshgrid(x, y)\nz = np.sqrt(x**2 + 2*y**2)\nax.contourf(x, y, z)\nplt.show()\n</code></pre>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#mapas-de-color","title":"Mapas de color","text":"<ul> <li><code>imshow(x)</code>: Dibuja un mapa de color a partir de una matriz (array bidimensiona) <code>x</code>. </li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nx = np.random.random((16, 16))\nax.imshow(x)\nplt.show()\n</code></pre> <ul> <li><code>hist2d(x, y)</code>: Dibuja un mapa de color que simula un histograma bidimensional, donde los colores de los cuadrados dependen de las frecuencias de las clases de la muestra dada por las listas <code>x</code> e <code>y</code>. </li> </ul> <p><pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nx, y = np.random.multivariate_normal(mean=[0.0, 0.0], cov=[[1.0, 0.4], [0.4, 0.5]], size=1000).T\nax.hist2d(x, y)\nplt.show()\n</code></pre> </p>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#cambiar-el-aspecto-de-los-graficos","title":"Cambiar el aspecto de los gr\u00e1ficos","text":"<p>Los gr\u00e1ficos creados con Matplotlib son personalizables y puede cambiarse el aspecto de casi todos sus elementos. Los elementos que suelen modificarse m\u00e1s a menudo son:</p> <ul> <li>Colores</li> <li>Marcadores de puntos</li> <li>Estilo de l\u00edneas</li> <li>T\u00edtulos</li> <li>Ejes</li> <li>Leyenda</li> <li>Rejilla</li> </ul>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#colores","title":"Colores","text":"<p>Para cambiar el color de los objetos se utiliza el par\u00e1metro <code>color = nombre-color</code>, donde <code>nombre-color</code> es una cadena con el nombre del color de entre los colores disponibles.</p> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ndias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']\ntemperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}\nax.plot(dias, temperaturas['Madrid'], color = 'tab:purple')\nax.plot(dias, temperaturas['Barcelona'], color = 'tab:green')\nplt.show()\n</code></pre> <p></p>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#marcadores","title":"Marcadores","text":"<p>Para cambiar la forma de los puntos marcadores se utiliza el par\u00e1metro <code>marker = nombre-marcador</code> donde <code>nombre-marcador</code> es una cadena con el nombre del marcador de entre los marcadores disponibles</p> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ndias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']\ntemperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}\nax.plot(dias, temperaturas['Madrid'], marker = '^')\nax.plot(dias, temperaturas['Barcelona'], marker = 'o')\nplt.show()\n</code></pre> <p></p>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#lineas","title":"L\u00edneas","text":"<p>Para cambiar el estilo de las l\u00edneas se utiliza el par\u00e1metro <code>linestyle = nombre-estilo</code> donde <code>nombre-estilo</code> es una cadena con el nombre del estilo de entre los estilos disponibles</p> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ndias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']\ntemperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}\nax.plot(dias, temperaturas['Madrid'], linestyle = 'dashed')\nax.plot(dias, temperaturas['Barcelona'], linestyle = 'dotted')\nplt.show()\n</code></pre> <p></p>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#titulos","title":"T\u00edtulos","text":"<p>Para a\u00f1adir un t\u00edtulo principal al gr\u00e1fico se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>ax.set_title(titulo, loc=alineacion, fontdict=fuente)</code> : A\u00f1ade un t\u00edtulo con el contenido de la cadena <code>titulo</code> a los ejes <code>ax</code>. El par\u00e1metro <code>loc</code> indica la alineaci\u00f3n del t\u00edtulo, que puede ser <code>'left'</code> (izquierda), <code>'center'</code> (centro) o <code>'right'</code> (derecha), y el par\u00e1metro <code>fontdict</code> indica mediante un diccionario las caracter\u00edsticas de la fuente (la el tama\u00f1o <code>fontisize</code>, el grosor <code>fontweight</code> o el color <code>color</code>).</li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ndias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']\ntemperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}\nax.plot(dias, temperaturas['Madrid'])\nax.plot(dias, temperaturas['Barcelona'])\nax.set_title('Evoluci\u00f3n de la temperatura diaria', loc = \"left\", fontdict = {'fontsize':14, 'fontweight':'bold', 'color':'tab:blue'})\nplt.show()\n</code></pre> <p></p>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#ejes","title":"Ejes","text":"<p>Para cambiar el aspecto de los ejes se suelen utilizar los siguientes m\u00e9todos:</p> <ul> <li><code>ax.set_xlabel(titulo)</code> : A\u00f1ade un t\u00edtulo con el contenido de la cadena <code>titulo</code> al eje x de <code>ax</code>. Se puede personalizar la alineaci\u00f3n y la fuente con los mismos par\u00e1metros que para el t\u00edtulo principal.</li> <li><code>ax.set_ylabel(titulo)</code> : A\u00f1ade un t\u00edtulo con el contenido de la cadena <code>titulo</code> al eje y de <code>ax</code>. Se puede personalizar la alineaci\u00f3n y la fuente con los mismos par\u00e1metros que para el t\u00edtulo principal.</li> <li><code>ax.set_xlim([limite-inferior, limite-superior])</code> : Establece los l\u00edmites que se muestran en el eje x de <code>ax</code>.</li> <li><code>ax.set_ylim([limite-inferior, limite-superior])</code> : Establece los l\u00edmites que se muestran en el eje y de <code>ax</code>.</li> <li><code>ax.set_xticks(marcas)</code> : Dibuja marcas en el eje x de <code>ax</code> en las posiciones indicadas en la lista <code>marcas</code>.</li> <li><code>ax.set_yticks(marcas)</code> : Dibuja marcas en el eje y de <code>ax</code> en las posiciones indicadas en la lista <code>marcas</code>.</li> <li><code>ax.set_xscale(escala)</code> : Establece la escala del eje x de <code>ax</code>, donde el par\u00e1metro <code>escala</code> puede ser <code>'linear'</code> (lineal) o <code>'log'</code> (logar\u00edtmica).  </li> <li><code>ax.set_yscale(escala)</code> : Establece la escala del eje y de <code>ax</code>, donde el par\u00e1metro <code>escala</code> puede ser <code>'linear'</code> (lineal) o <code>'log'</code> (logar\u00edtmica).  </li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ndias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']\ntemperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}\nax.plot(dias, temperaturas['Madrid'])\nax.plot(dias, temperaturas['Barcelona'])\nax.set_xlabel(\"D\u00edas\", fontdict = {'fontsize':14, 'fontweight':'bold', 'color':'tab:blue'})\nax.set_ylabel(\"Temperatura \u00baC\")\nax.set_ylim([20,35])\nax.set_yticks(range(20, 35))\nplt.show()\n</code></pre> <p></p>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#leyenda","title":"Leyenda","text":"<p>Para a\u00f1adir una leyenda a un gr\u00e1fico se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>ax.legend(leyendas, loc = posici\u00f3n)</code> : Dibuja un leyenda en los ejes <code>ax</code> con los nombres indicados en la lista <code>leyendas</code>. El par\u00e1metro <code>loc</code> indica la posici\u00f3n en la que se dibuja la leyenda y puede ser <code>'upper left'</code> (arriba izquierda), <code>'upper center'</code> (arriba centro), <code>'upper right'</code> (arriba derecha), <code>'center left'</code> (centro izquierda), <code>'center'</code> (centro), <code>'center right'</code> (centro derecha), <code>'lower left'</code> (abajo izquierda), <code>'lower center'</code> (abajo centro), <code>'lower right'</code> (abajo derecha). Se puede omitir la lista <code>leyendas</code> si se indica la leyenda de cada serie en la funci\u00f3n que la dibuja mediante el par\u00e1metro <code>label</code>.</li> </ul> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ndias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']\ntemperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}\nax.plot(dias, temperaturas['Madrid'], label = 'Madrid')\nax.plot(dias, temperaturas['Barcelona'], label = 'Barcelona')\nax.legend(loc = 'upper right')\nplt.show()\n</code></pre> <p></p>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#rejilla","title":"Rejilla","text":"<p><code>ax.grid(axis=ejes, color=color, linestyle=estilo)</code> : Dibuja una rejilla en los ejes de <code>ax</code>. El par\u00e1metro <code>axis</code> indica los ejes sobre los que se dibuja la regilla y puede ser <code>'x'</code> (eje x), <code>'y'</code> (eje y) o <code>'both'</code> (ambos). Los par\u00e1metros <code>color</code> y <code>linestyle</code> establecen el color y el estilo de las l\u00edneas de la rejilla, y pueden tomar los mismos valores vistos en los apartados de colores y l\u00edneas.</p> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ndias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']\ntemperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}\nax.plot(dias, temperaturas['Madrid'])\nax.plot(dias, temperaturas['Barcelona'])\nax.grid(axis = 'y', color = 'gray', linestyle = 'dashed')\nplt.show()\n</code></pre> <p></p>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#multiples-graficos","title":"M\u00faltiples gr\u00e1ficos","text":"<p>Es posible dibujar varios gr\u00e1ficos en distintos ejes en una misma figura organizados en forma de tabla. Para ello, cuando se inicializa la figura y los ejes, hay que pasarle a la funci\u00f3n <code>subplots</code> el n\u00famero de filas y columnas de la tabla que contendr\u00e1 los gr\u00e1ficos. Con esto los distintos ejes se organizan en un array y se puede acceder a cada uno de ellos a trav\u00e9s de sus \u00edndices. Si se quiere que los distintos ejes compartan los mismos l\u00edmites para los ejes se pueden pasar los par\u00e1metros <code>sharex = True</code> para el eje x o <code>sharey = True</code> para el eje y.</p> <pre><code>import matplotlib.pyplot as plt\nfig, ax = plt.subplots(2, 2, sharey = True)\ndias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']\ntemperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}\nax[0, 0].plot(dias, temperaturas['Madrid'])\nax[0, 1].plot(dias, temperaturas['Barcelona'], color = 'tab:orange')\nax[1, 0].bar(dias, temperaturas['Madrid'])\nax[1, 1].bar(dias, temperaturas['Barcelona'], color = 'tab:orange')\nplt.show()\n</code></pre> <p></p>","tags":["Matplotlib"]},{"location":"python/manual/matplotlib/#integracion-con-pandas","title":"Integraci\u00f3n con Pandas","text":"<p>Matplotlib se integra a la perfecci\u00f3n con la librer\u00eda Pandas, permitiendo dibujar gr\u00e1ficos a partir de los datos de las series y DataFrames de Pandas.</p> <ul> <li><code>df.plot(kind=tipo, x=columnax, y=columnay, ax=ejes)</code> : Dibuja un diagrama del tipo indicado por el par\u00e1metro <code>kind</code> en los ejes indicados en el par\u00e1metro <code>ax</code>, representando en el eje x la columna del par\u00e1metro <code>x</code> y en el eje y la columna del par\u00e1metro <code>y</code>. El par\u00e1metro <code>kind</code> puede tomar como argumentos <code>'line'</code> (lineas), <code>'scatter'</code> (puntos), <code>'bar'</code> (barras verticales), <code>'barh'</code> (barras horizontales), <code>'hist'</code> (histograma), <code>'box'</code> (cajas), <code>'density'</code> (densidad), <code>'area'</code> (area) o <code>'pie'</code> (sectores). Es posible pasar otros par\u00e1metros para indicar el color, el marcador o el estilo de l\u00ednea como se vi\u00f3 en los apartados anteriores.</li> </ul> <pre><code>import pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'D\u00edas':['L', 'M', 'X', 'J', 'V', 'S', 'D'], \n                   'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], \n                   'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]})\nfig, ax = plt.subplots()\ndf.plot(x = 'D\u00edas', y = 'Madrid', ax = ax)\ndf.plot(x = 'D\u00edas', y = 'Barcelona', ax = ax)\nplt.show()\n</code></pre> <p></p> <p>Si no se indican los par\u00e1metros <code>x</code> e <code>y</code> se representa el \u00edndice de las filas en el eje x y una serie por cada columna del Dataframe. Las columnas no num\u00e9ricas se ignoran.</p> <pre><code>import pandas as pd \nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'D\u00edas':['L', 'M', 'X', 'J', 'V', 'S', 'D'], \n                   'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], \n                   'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]})\ndf = df.set_index('D\u00edas')\nfig, ax = plt.subplots()\ndf.plot(ax = ax)\nplt.show()\n</code></pre> <p></p>","tags":["Matplotlib"]},{"location":"python/manual/modulos/","title":"M\u00f3dulos","text":"","tags":["M\u00f3dulos"]},{"location":"python/manual/modulos/#modulos","title":"M\u00f3dulos","text":"<p>El c\u00f3digo de un programa en Python puede reutilizarse en otro import\u00e1ndolo. Cualquier fichero con c\u00f3digo de Python reutilizable se conoce como m\u00f3dulo o librer\u00eda.</p> <p>Los m\u00f3dulos suelen contener funciones reutilizables, pero tambi\u00e9n pueden definir variables con datos simples o compuestos (listas, diccionarios, etc), o cualquier otro c\u00f3digo v\u00e1lido en Python.</p> <p>Python permite importar un m\u00f3dulo completo o s\u00f3lo algunas partes de \u00e9l. Cuando se importa un m\u00f3dulo completo, el int\u00e9rprete de Python ejecuta todo el c\u00f3digo que contiene el m\u00f3dulo, mientras que si solo se importan algunas partes del m\u00f3dulo, solo se ejecutar\u00e1n esas partes.</p>","tags":["M\u00f3dulos"]},{"location":"python/manual/modulos/#importacion-completa-de-modulos-import","title":"Importaci\u00f3n completa de m\u00f3dulos (<code>import</code>)","text":"<ul> <li> <p><code>import M</code> : Ejecuta el c\u00f3digo que contiene <code>M</code> y crea una referencia a \u00e9l, de manera que pueden invocarse un objeto o funci\u00f3n <code>f</code> definida en \u00e9l mediante la sintaxis <code>M.f</code>.</p> </li> <li> <p><code>import M as N</code> : Ejecuta el c\u00f3digo que contiene <code>M</code> y crea una referencia a \u00e9l con el nombre <code>N</code>, de manera que pueden invocarse un objeto o funci\u00f3n <code>f</code> definida en \u00e9l mediante la sintaxis <code>N.f</code>. Esta forma es similar a la anterior, pero se suele usar cuando el nombre del m\u00f3dulo es muy largo para utilizar un alias m\u00e1s corto.</p> </li> </ul>","tags":["M\u00f3dulos"]},{"location":"python/manual/modulos/#importacion-parcial-de-modulos-from-import","title":"Importaci\u00f3n parcial de m\u00f3dulos (<code>from import</code>)","text":"<ul> <li> <p><code>from M import f, g, ...</code> : Ejecuta el c\u00f3digo que contiene <code>M</code> y crea referencias a los objetos <code>f, g, ...</code>, de manera que pueden ser invocados por su nombre. De esta manera para invocar cualquiera de estos objetos no hace falta precederlos por el nombre del m\u00f3dulo, basta con escribir su nombre.</p> </li> <li> <p><code>from M import *</code> : Ejecuta el c\u00f3digo que contiene <code>M</code> y crea referencias a todos los objetos p\u00fablicos (aquellos que no empiezan por el car\u00e1cter <code>_</code>) definidos en el m\u00f3dulo, de manera que pueden ser invocados por su nombre.</p> </li> </ul> <p>Cuando se importen m\u00f3dulos de esta manera hay que tener cuidado de que no haya coincidencias en los nombres de funciones, variables u otros objetos.</p> <p><pre><code>import calendar\nprint(calendar.month(2023, 8))\n</code></pre> <code>output</code> <pre><code>Mo Tu We Th Fr Sa Su\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n</code></pre></p> <pre><code>from math import *\ncos(pi) # output -1.0\n</code></pre>","tags":["M\u00f3dulos"]},{"location":"python/manual/modulos/#modulos-de-la-libreria-estandar-mas-importantes","title":"M\u00f3dulos de la librer\u00eda est\u00e1ndar m\u00e1s importantes","text":"<p>Python viene con una biblioteca de m\u00f3dulos predefinidos que no necesitan instalarse. Algunos de los m\u00e1s utilizados son:</p> <ul> <li>sys: Funciones y par\u00e1metros espec\u00edficos del sistema operativo.</li> <li>os: Interfaz con el sistema operativo.</li> <li>os.path: Funciones de acceso a las rutas del sistema.</li> <li>io: Funciones para manejo de flujos de datos y ficheros.</li> <li>string: Funciones con cadenas de caracteres.</li> <li>datetime: Funciones para fechas y tiempos.</li> <li>math: Funciones y constantes matem\u00e1ticas.</li> <li>statistics: Funciones estad\u00edsticas.</li> <li>random: Generaci\u00f3n de n\u00fameros pseudo-aleatorios.</li> </ul>","tags":["M\u00f3dulos"]},{"location":"python/manual/modulos/#otras-librerias-imprescindibles","title":"Otras librer\u00edas imprescindibles","text":"<p>Estas librer\u00edas no vienen en la distribuci\u00f3n est\u00e1ndar de Python y necesitan instalarse. Tambi\u00e9n puede optarse por la distribuci\u00f3n Anaconda que incorpora la mayor\u00eda de estas librer\u00edas.</p> <ul> <li>NumPy: Funciones matem\u00e1ticas avanzadas y arrays.</li> <li>SciPy: M\u00e1s funciones matem\u00e1ticas para aplicaciones cient\u00edficas.</li> <li>matplotlib: An\u00e1lisis y representaci\u00f3n gr\u00e1fica de datos.</li> <li>Pandas: Funciones para el manejo y an\u00e1lisis de estructuras de datos.</li> <li>Request: Acceso a internet por http.</li> </ul>","tags":["M\u00f3dulos"]},{"location":"python/manual/numpy/","title":"La librer\u00eda Numpy","text":"<p>NumPy es una librer\u00eda de Python especializada en el c\u00e1lculo num\u00e9rico y el an\u00e1lisis de datos, especialmente para un gran volumen de datos.</p> <p>Incorpora una nueva clase de objetos llamados arrays que permite representar colecciones de datos de un mismo tipo en varias dimensiones, y funciones muy eficientes para su manipulaci\u00f3n.</p> <p>La ventaja de Numpy frente a las listas predefinidas en Python es que el procesamiento de los arrays se realiza mucho m\u00e1s r\u00e1pido (hasta 50 veces m\u00e1s) que las listas, lo cual la hace ideal para el procesamiento de vectores y matrices de grandes dimensiones.</p> <p></p>","tags":["Numpy"]},{"location":"python/manual/numpy/#la-clase-de-objetos-array","title":"La clase de objetos <code>array</code>","text":"<p>Un array es una estructura de datos de un mismo tipo organizada en forma de tabla o cuadr\u00edcula de distintas dimensiones.</p> <p>Las dimensiones de un array tambi\u00e9n se conocen como ejes.</p> <p></p>","tags":["Numpy"]},{"location":"python/manual/numpy/#creacion-de-arrays","title":"Creaci\u00f3n de arrays","text":"<p>Para crear un array se utiliza la siguiente funci\u00f3n de NumPy</p> <ul> <li> <p><code>np.array(lista)</code> : Crea un array a partir de la lista o tupla <code>lista</code> y devuelve una referencia a \u00e9l. El n\u00famero de dimensiones del array depender\u00e1 de las listas o tuplas anidadas en <code>lista</code>:</p> </li> <li> <p>Para una lista de valores se crea un array de una dimensi\u00f3n, tambi\u00e9n conocido como vector.</p> </li> <li>Para una lista de listas de valores se crea un array de dos dimensiones, tambi\u00e9n conocido como matriz.</li> <li>Para una lista de listas de listas de valores se crea un array de tres dimensiones, tambi\u00e9n conocido como cubo.</li> <li>Y as\u00ed sucesivamente. No hay l\u00edmite en el n\u00famero de dimensiones del array m\u00e1s all\u00e1 de la memoria disponible en el sistema.</li> </ul> <p> Los elementos de la lista o tupla deben ser del mismo tipo.</p> <pre><code># (1)!\nimport numpy as np\n# Array de una dimensi\u00f3n\na1 = np.array([1, 2, 3])\nprint(a1) # output [1 2 3]\n# Array de dos dimensiones\na2 = np.array([[1, 2, 3], [4, 5, 6]])\nprint(a2) # output [[1 2 3],[4 5 6]]\n# Array de tres dimensiones\na3 = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n</code></pre> <ol> <li>Debes instalar la libreria de numpy en tu int\u00e9rprete con el siguiente comando <code>pip install numpy</code>.</li> </ol> <p><code>output</code> <pre><code>[[[ 1  2  3]\n  [ 4  5  6]]\n [[ 7  8  9]\n  [10 11 12]]]\n</code></pre></p> <p>Otras funciones \u00fatiles que permiten generar arrays son:</p> <ul> <li> <p><code>np.empty(dimensiones)</code> : Crea y devuelve una referencia a un array vac\u00edo con las dimensiones especificadas en la tupla <code>dimensiones</code>.</p> </li> <li> <p><code>np.zeros(dimensiones)</code> : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla <code>dimensiones</code> cuyos elementos son todos ceros.</p> </li> <li> <p><code>np.ones(dimensiones)</code> : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla <code>dimensiones</code> cuyos elementos son todos unos.</p> </li> <li> <p><code>np.full(dimensiones, valor)</code> : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla <code>dimensiones</code> cuyos elementos son todos <code>valor</code>.</p> </li> <li> <p><code>np.identity(n)</code> : Crea y devuelve una referencia a la matriz identidad de dimensi\u00f3n <code>n</code>.</p> </li> <li> <p><code>np.arange(inicio, fin, salto)</code> : Crea y devuelve una referencia a un array de una dimensi\u00f3n cuyos elementos son la secuencia desde <code>inicio</code> hasta <code>fin</code> tomando valores cada <code>salto</code>.</p> </li> <li> <p><code>np.linspace(inicio, fin, n)</code> : Crea y devuelve una referencia a un array de una dimensi\u00f3n cuyos elementos son la secuencia de <code>n</code> valores equidistantes desde <code>inicio</code> hasta <code>fin</code>.</p> </li> <li> <p><code>np.random.random(dimensiones)</code> : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla <code>dimensiones</code> cuyos elementos son aleatorios.</p> </li> </ul> <p><pre><code>print(np.zeros((2,3)))\n</code></pre> <code>output</code> <pre><code>[[0. 0. 0.]\n [0. 0. 0.]]\n</code></pre> <pre><code>print(np.identity(3))\n</code></pre> <code>output</code> <pre><code>[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n</code></pre> <pre><code>print(np.arange(1, 10, 2)) # output [1 3 5 7 9]\n</code></pre> <pre><code>print(np.linspace(0, 10, 5))\n</code></pre> <code>output</code> <pre><code>[ 0.   2.5  5.   7.5 10. ]\n</code></pre></p>","tags":["Numpy"]},{"location":"python/manual/numpy/#atributos-de-un-array","title":"Atributos de un array","text":"<p>Existen varios atributos y funciones que describen las caracter\u00edsticas de un array.</p> <ul> <li> <p><code>a.ndim</code> : Devuelve el n\u00famero de dimensiones del array <code>a</code>.</p> </li> <li> <p><code>a.shape</code> : Devuelve una tupla con las dimensiones del array <code>a</code>.</p> </li> <li> <p><code>a.size</code> : Devuelve el n\u00famero de elementos del array <code>a</code>.</p> </li> <li> <p><code>a.dtype</code>: Devuelve el tipo de datos de los elementos del array <code>a</code>.</p> </li> </ul>","tags":["Numpy"]},{"location":"python/manual/numpy/#acceso-a-los-elementos-de-un-array","title":"Acceso a los elementos de un array","text":"<p>Para acceder a los elementos contenidos en un array se usan \u00edndices al igual que para acceder a los elementos de una lista, pero indicando los \u00edndices de cada dimensi\u00f3n separados por comas.</p> <p>Al igual que para listas, los \u00edndices de cada dimensi\u00f3n comienzan en 0.</p> <p>Tambi\u00e9n es posible obtener subarrays con el operador dos puntos <code>:</code> indicando el \u00edndice inicial y el siguiente al final para cada dimensi\u00f3n, de nuevo separados por comas.</p> <p><pre><code>a = np.array([[1, 2, 3], [4, 5, 6]])\nprint(a[1, 0])  # Acceso al elemento de la fila 1 columna 0 # output 4\nprint(a[1][0])  # Otra forma de acceder al mismo elemento # output 4\n\nprint(a[:, 0:2])\n</code></pre> <code>output</code> <pre><code>[[1 2]\n [4 5]]\n</code></pre></p>","tags":["Numpy"]},{"location":"python/manual/numpy/#filtrado-de-elementos-de-un-array","title":"Filtrado de elementos de un array","text":"<p>Una caracter\u00edstica muy \u00fatil de los arrays es que es muy f\u00e1cil obtener otro array con los elementos que cumplen una condici\u00f3n.</p> <ul> <li><code>a[condicion]</code> : Devuelve una lista con los elementos del array <code>a</code> que cumplen la condici\u00f3n <code>condicion</code>.</li> </ul> <pre><code>a = np.array([[1, 2, 3], [4, 5, 6]])\nprint(a[(a % 2 == 0)]) # output [2 4 6]\nprint(a[(a % 2 == 0) &amp;  (a &gt; 2)]) # output [2 4]\n</code></pre>","tags":["Numpy"]},{"location":"python/manual/numpy/#operaciones-matematicas-con-arrays","title":"Operaciones matem\u00e1ticas con arrays","text":"<p>Existen dos formas de realizar operaciones matem\u00e1ticas con arrays: a nivel de elemento y a nivel de array.</p> <p>Las operaciones a nivel de elemento operan los elementos que ocupan la misma posici\u00f3n en dos arrays. Se necesitan, por tanto, dos arrays con las mismas dimensiones y el resultado es una array de la misma dimensi\u00f3n.</p> <p>Los operadores mamem\u00e1ticos <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>**</code> se utilizan para la realizar suma, resta, producto, cociente, resto y potencia a nivel de elemento.</p> <p><pre><code>a = np.array([[1, 2, 3], [4, 5, 6]])\nb = np.array([[1, 1, 1], [2, 2, 2]])\nprint(a + b )\n</code></pre> <code>output</code> <pre><code>[[2 3 4]\n [6 7 8]]\n</code></pre> <pre><code>print(a / b)\n</code></pre> <code>output</code> <pre><code>[[1.  2.  3. ]\n [2.  2.5 3. ]]\n</code></pre> <pre><code>print(a ** 2)\n</code></pre> <code>output</code> <pre><code>[[ 1  4  9]\n [16 25 36]]\n</code></pre></p>","tags":["Numpy"]},{"location":"python/manual/numpy/#algebra-matricial","title":"\u00c1lgebra matricial","text":"<p>Numpy incorpora funciones para realizar las principales operaciones algebraicas con vectores y matrices. La mayor\u00eda de los m\u00e9todos algebr\u00e1icos se agrupan en el subm\u00f3dulo <code>linalg</code>.</p>","tags":["Numpy"]},{"location":"python/manual/numpy/#producto-escalar-de-dos-vectores","title":"Producto escalar de dos vectores","text":"<p>Para realizar el producto escalar de dos vectores se utiliza el operador <code>@</code> o el siguiente m\u00e9todo:</p> <ul> <li><code>u.dot(v)</code>: Devuelve el producto escalar de los vectores <code>u</code> y <code>v</code>.</li> </ul> <pre><code>import numpy as np\na = np.array([1, 2, 3])\nb = np.array([1, 0, 1])\nprint(a @ b) # output 4\nprint(a.dot(b)) # output 4\n</code></pre>","tags":["Numpy"]},{"location":"python/manual/numpy/#modulo-de-un-vector","title":"M\u00f3dulo de un vector","text":"<p>Para calcular el m\u00f3dulo de un vector se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>norm(v)</code>: Devuelve el m\u00f3dulo del vector <code>v</code>.</li> </ul> <pre><code>import numpy as np\na = np.array([3, 4])\nprint(np.linalg.norm(a)) # output 5.0\n</code></pre>","tags":["Numpy"]},{"location":"python/manual/numpy/#producto-de-dos-matrices","title":"Producto de dos matrices","text":"<p>Para realizar el producto matricial se utiliza el mismo operador <code>@</code> y m\u00e9todo que para el producto escalar de vectores:</p> <ul> <li><code>a.dot(b)</code> : Devuelve el producto matricial de las matrices <code>a</code> y <code>b</code> siempre y cuando sus dimensiones sean compatibles.</li> </ul> <p><pre><code>import numpy as np\na = np.array([[1, 2, 3], [4, 5, 6]])\nb = np.array([[1, 1], [2, 2], [3, 3]])\nprint(a @ b)\n</code></pre> <code>output</code> <pre><code>  [[14 14]\n  [32 32]]\n</code></pre> <pre><code>print(a.dot(b))\n</code></pre> <code>output</code> <pre><code>  [[14 14]\n  [32 32]]\n</code></pre></p>","tags":["Numpy"]},{"location":"python/manual/numpy/#matriz-traspuesta","title":"Matriz traspuesta","text":"<p>Para trasponer una matriz se utiliza el m\u00e9todo</p> <ul> <li><code>a.T</code> : Devuelve la matriz traspuesta de la matriz <code>a</code>.</li> </ul> <p><pre><code>import numpy as np\na = np.array([[1, 2, 3], [4, 5, 6]])\nprint(a.T)\n</code></pre> <code>output</code> <pre><code>  [[1 4]\n  [2 5]\n  [3 6]]\n</code></pre></p>","tags":["Numpy"]},{"location":"python/manual/numpy/#traza-de-una-matriz","title":"Traza de una matriz","text":"<p>La traza de una matriz cuadrada se calcula con el siguiente m\u00e9todo:</p> <ul> <li><code>a.trace()</code> : Devuelve la traza (suma de la diagonal principal) de la matriz cuadrada <code>a</code>. </li> </ul> <pre><code>import numpy as np\na = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(a.trace()) # output 15\n</code></pre>","tags":["Numpy"]},{"location":"python/manual/numpy/#determinante-de-una-matriz","title":"Determinante de una matriz","text":"<p>El determinante de una matriz cuadrada se calcula con la siguiente funci\u00f3n:</p> <ul> <li><code>det(a)</code> : Devuelve el determinante de la matriz cuadrada <code>a</code>. </li> </ul> <pre><code>import numpy as np\na = np.array([[1, 2], [3, 4]])\nprint(np.linalg.det(a)) # output -2.0000000000000004\n</code></pre>","tags":["Numpy"]},{"location":"python/manual/numpy/#matriz-inversa","title":"Matriz inversa","text":"<p>La inversa de una matriz se calcula con la siguiente funci\u00f3n: </p> <ul> <li><code>inv(a)</code> : Devuelve la matriz inversa de la matriz cuadrada <code>a</code>. </li> </ul> <p><pre><code>import numpy as np\na = np.array([[1, 2], [3, 4]])\nprint(np.linalg.inv(a))\n</code></pre> <code>output</code> <pre><code>  [[-2.   1. ]\n  [ 1.5 -0.5]]\n</code></pre></p>","tags":["Numpy"]},{"location":"python/manual/numpy/#autovalores-de-una-matriz","title":"Autovalores de una matriz","text":"<p>Los autovalores de una matriz cuadrada se calculan con la siguiente funci\u00f3n:</p> <ul> <li><code>eigvals(a)</code> : Devuelve los autovalores de la matriz cuadrada <code>a</code>.</li> </ul> <p><pre><code>import numpy as np\na = np.array([[1, 1, 0], [1, 2, 1], [0, 1, 1]])\nprint(np.linalg.eigvals(a))\n</code></pre> <code>output</code> <pre><code>  [ 3.00000000e+00  1.00000000e+00 -3.36770206e-17]\n</code></pre></p>","tags":["Numpy"]},{"location":"python/manual/numpy/#autovectores-de-una-matriz","title":"Autovectores de una matriz","text":"<p>Los autovectores de una matriz cuadrada se calculan con la siguiente funci\u00f3n:</p> <ul> <li><code>eig(a)</code> : Devuelve los autovalores y los autovectores asociados de la matriz cuadrada <code>a</code>. </li> </ul> <p><pre><code>import numpy as np\na = np.array([[1, 1, 0], [1, 2, 1], [0, 1, 1]])\nprint(np.linalg.eig(a))\n</code></pre> <code>output</code> <pre><code>  (array([ 3.00000000e+00,  1.00000000e+00, -3.36770206e-17]), array([[-4.08248290e-01,  7.07106781e-01,  5.77350269e-01],\n        [-8.16496581e-01,  2.61239546e-16, -5.77350269e-01],\n        [-4.08248290e-01, -7.07106781e-01,  5.77350269e-01]]))\n</code></pre></p>","tags":["Numpy"]},{"location":"python/manual/numpy/#solucion-de-un-sistema-de-ecuaciones","title":"Soluci\u00f3n de un sistema de ecuaciones","text":"<p>Para resolver un sistema de ecuaciones lineales se utiliza la funci\u00f3n siguiente:</p> <ul> <li><code>solve(a, b)</code> : Devuelve la soluci\u00f3n del sistema de ecuaciones lineales con los coeficientes de la matriz <code>a</code> y los t\u00e9rminos independientes de la matriz <code>b</code>. </li> </ul> <pre><code>import numpy as np\n# Sistema de dos ecuaciones y dos inc\u00f3gnitas\n# x + 2y = 1\n# 3x + 5y = 2 \na = np.array([[1, 2], [3, 5]])\nb = np.array([1, 2])\nprint(np.linalg.solve(a, b)) # output [-1.  1.]\n</code></pre>","tags":["Numpy"]},{"location":"python/manual/objetos/","title":"Programaci\u00f3n Orientada a Objetos","text":"","tags":[]},{"location":"python/manual/objetos/#objetos","title":"Objetos","text":"<p>Python tambi\u00e9n permite la programaci\u00f3n orientada a objetos, que es un paradigma de programaci\u00f3n en la que los datos y las operaciones que pueden realizarse con esos datos se agrupan en unidades l\u00f3gicas llamadas objetos.</p> <p>Los objetos suelen representar conceptos del dominio del programa, como un estudiante, un coche, un tel\u00e9fono, etc. Los datos que describen las caracter\u00edsticas del objeto se llaman atributos y son la parte est\u00e1tica del objeto, mientras que las operaciones que puede realizar el objeto se llaman m\u00e9todos y son la parte din\u00e1mica del objeto. </p> <p>La programaci\u00f3n orientada a objetos permite simplificar la estructura y la l\u00f3gica de los grandes programas en los que intervienen muchos objetos que interact\u00faan entre si. </p> <p>Ejemplo. Una tarjeta de cr\u00e9dito puede representarse como un objeto:</p> <ul> <li>Atributos: N\u00famero de la tarjeta, titular, balance, fecha de caducidad, pin, entidad emisora, estado (activa o no), etc.</li> <li>M\u00e9todos: Activar, pagar, renovar, anular.</li> </ul> <p></p>","tags":[]},{"location":"python/manual/objetos/#acceso-a-los-atributos-y-metodos-de-un-objeto","title":"Acceso a los atributos y m\u00e9todos de un objeto","text":"<ul> <li><code>dir(objeto)</code>: Devuelve una lista con los nombres de los atributos y m\u00e9todos del objeto <code>objeto</code>.</li> </ul> <p>Para ver si un objeto tiene un determinado atributo o m\u00e9todo se utiliza la siguiente funci\u00f3n:</p> <ul> <li><code>hasattr(objeto, elemento)</code>: Devuelve <code>True</code> si <code>elemento</code> es un atributo o un m\u00e9todo del objeto <code>objeto</code> y <code>False</code> en caso contrario.</li> </ul> <p>Para acceder a los atributos y m\u00e9todos de un objeto se pone el nombre del objeto seguido del operador punto y el nombre del atributo o el m\u00e9todo.</p> <ul> <li><code>objeto.atributo</code>: Accede al atributo <code>atributo</code> del objeto <code>objeto</code>.</li> <li><code>objeto.m\u00e9todo(par\u00e1metros)</code>: Ejecuta el m\u00e9todo <code>m\u00e9todo</code> del objeto <code>objeto</code> con los par\u00e1metros que se le pasen.</li> </ul> <p>En Python los tipos de datos primitivos son tambi\u00e9n objetos que tienen asociados atributos y m\u00e9todos.</p> <p>Ejemplo. Las cadenas tienen un m\u00e9todo <code>upper</code> que convierte la cadena en may\u00fasculas. Para aplicar este m\u00e9todo a la cadena <code>c</code> se utiliza la instrucci\u00f3n <code>c.upper()</code>.</p> <pre><code>c = 'Python'\n# Llamada al m\u00e9todo upper del objeto c (cadena)\nprint(c.upper()) # output PYTHON\n</code></pre> <p>Ejemplo. Las listas tienen un m\u00e9todo <code>append</code> que convierte a\u00f1ade un elemento al final de la lista. Para aplicar este m\u00e9todo a la lista <code>l</code> se utiliza la instrucci\u00f3n <code>l.append(&lt;elemento&gt;)</code>.</p> <pre><code>l =  [1, 2, 3]     \nl.append(4) # Llamada al m\u00e9todo append del objeto l (lista)\nprint(l) # output [1, 2, 3, 4]\n</code></pre>","tags":[]},{"location":"python/manual/objetos/#clases-class","title":"Clases (<code>class</code>)","text":"<p>Los objetos con los mismos atributos y m\u00e9todos se agrupan clases. Las clases definen los atributos y los m\u00e9todos, y por tanto, la sem\u00e1ntica o comportamiento que tienen los objetos que pertenecen a esa clase. Se puede pensar en una clase como en un molde a partir del cu\u00e1l se pueden crear objetos.</p> <p>Para declarar una clase se utiliza la palabra clave <code>class</code> seguida del nombre de la clase y dos puntos, de acuerdo a la siguiente sintaxis:</p> <p><code>class &lt;nombre-clase&gt;:</code> <code>&lt;atributos&gt;</code> <code>&lt;m\u00e9todos&gt;</code></p> <p>Los atributos se definen igual que las variables mientras que los m\u00e9todos se definen igual que las funciones. Tanto unos como otros tienen que estar indentados por 4 espacios en el cuerpo de la clase.</p> <p>Ejemplo El siguiente c\u00f3digo define la clase <code>Saludo</code> sin atributos ni m\u00e9todos. La palabra reservada <code>pass</code> indica que la clase est\u00e1 vac\u00eda.</p> <pre><code>class Saludo:\n        pass        # Clase vac\u00eda sin atributos ni m\u00e9todos.\n\n\nprint(Saludo) # ouput &lt;class '__main__.Saludo'&gt;\n</code></pre> <p> Es una buena pr\u00e1ctica comenzar el nombre de una clase con may\u00fasculas.</p>","tags":[]},{"location":"python/manual/objetos/#clases-primitivas","title":"Clases primitivas","text":"<p>En Python existen clases predefinidas para los tipos de datos primitivos:</p> <ul> <li><code>int</code>: Clase de los n\u00fameros enteros.</li> <li><code>float</code>: Clase de los n\u00fameros reales.</li> <li><code>str</code>: Clase de las cadenas de caracteres.</li> <li><code>list</code>: Clase de las listas.</li> <li><code>tuple</code>: Clase de las tuplas.</li> <li><code>dict</code>: Clase de los diccionarios.</li> </ul> <pre><code>type(1) # output &lt;class 'int'&gt;\ntype(1.5) # output &lt;class 'float'&gt;\ntype('Python') # output &lt;class 'str'&gt;\ntype([1,2,3]) # output &lt;class 'list'&gt;\ntype((1,2,3)) # output &lt;class 'tuple'&gt;\ntype({1:'A', 2:'B'}) # output &lt;class 'dict'&gt;\n</code></pre>","tags":[]},{"location":"python/manual/objetos/#instanciacion-de-clases","title":"Instanciaci\u00f3n de clases","text":"<p>Para crear un objeto de una determinada clase se utiliza el nombre de la clase seguida de los par\u00e1metros necesarios para crear el objeto entre par\u00e9ntesis.</p> <ul> <li><code>clase(par\u00e1metros)</code>: Crea un objeto de la clase <code>clase</code> inicializado con los <code>par\u00e1metros</code> dados.</li> </ul> <p>Cuando se crea un objeto de una clase se dice que el objeto es una instancia de la clase.</p> <pre><code>class Saludo:\n        pass    # Clase vac\u00eda sin atributos ni m\u00e9todos.\n\n\ns = Saludo()    # Creaci\u00f3n del objeto mediante instanciaci\u00f3n de la clase.\ns # output __main__.Saludo object at 0x7fcfc7756be0&gt;      # Direcci\u00f3n de memoria donde se crea el objeto\ntype(s) # output &lt;class '__main__.Saludo'&gt;     # Clase del objeto\n</code></pre>","tags":[]},{"location":"python/manual/objetos/#definicion-de-metodos","title":"Definici\u00f3n de m\u00e9todos","text":"<p>Los m\u00e9todos de una clase son las funciones que definen el comportamiento de los objetos de esa clase. </p> <p>Se definen como las funciones con la palabra reservada <code>def</code>. La \u00fanica diferencia es que su primer par\u00e1metro es especial y se denomina <code>self</code>. Este par\u00e1metro hace siempre referencia al objeto desde donde se llama el m\u00e9todo, de manera que para acceder a los atributos o m\u00e9todos de una clase en su propia definici\u00f3n se puede utilizar la sintaxis <code>self.atributo</code> o <code>self.m\u00e9todo</code>.</p> <pre><code>class Saludo:\n        mensaje = \"Bienvenido \"     # Definici\u00f3n de un atributo\n        def saludar(self, nombre):  # Definici\u00f3n de un m\u00e9todo   \n            print(self.mensaje + nombre)\n            return\n\n\ns = Saludo()\ns.saludar('Usuario') # Bienvenido Usuario\n</code></pre> <p>La raz\u00f3n por la que existe el par\u00e1metro <code>self</code> es porque Python traduce la llamada a un m\u00e9todo de un objeto <code>objeto.m\u00e9todo(par\u00e1metros)</code> en la llamada <code>clase.m\u00e9todo(objeto, par\u00e1metros)</code>, es decir, se llama al m\u00e9todo definido en la clase del objeto, pasando como primer argumento el propio objeto, que se asocia al par\u00e1metro <code>self</code>.</p>","tags":[]},{"location":"python/manual/objetos/#el-metodo-__init__","title":"El m\u00e9todo <code>__init__</code>","text":"<p>En la definici\u00f3n de una clase suele haber un m\u00e9todo llamado <code>__init__</code> que se conoce como inicializador. Este m\u00e9todo es un m\u00e9todo especial que se llama cada vez que se instancia una clase y sirve para inicializar el objeto que se crea. Este m\u00e9todo crea los atributos que deben tener todos los objetos de la clase y por tanto contiene los par\u00e1metros necesarios para su creaci\u00f3n, pero no devuelve nada. Se invoca cada vez que se instancia un objeto de esa clase.</p> <pre><code>class Tarjeta:\n    def __init__(self, id, cantidad = 0):    # Inicializador\n        self.id = id                         # Creaci\u00f3n del atributo id  \n        self.saldo = cantidad                # Creaci\u00f3n del atributo saldo\n        return\n    def mostrar_saldo(self):\n        print('El saldo es', self.saldo, '\u20ac')\n        return\n\nt = Tarjeta('1111111111', 1000)     # Creaci\u00f3n de un objeto con argumentos             \nt.mostrar_saldo() # output El saldo es 1000 \u20ac\n</code></pre>","tags":[]},{"location":"python/manual/objetos/#atributos-de-instancia-vs-atributos-de-clase","title":"Atributos de instancia vs atributos de clase","text":"<p>Los atributos que se crean dentro del m\u00e9todo <code>__init__</code> se conocen como atributos del objeto, mientras que los que se crean fuera de \u00e9l se conocen como atributos de la clase. Mientras que los primeros son propios de cada objeto y por tanto pueden tomar valores distintos, los valores de los atributos de la clase son los mismos para cualquier objeto de la clase.</p> <p>En general, no deben usarse atributos de clase, excepto para almacenar valores constantes.</p> <pre><code>class Circulo:\n    pi = 3.14159                     # Atributo de clase\n    def __init__(self, radio):\n        self.radio = radio           # Atributo de instancia\n    def area(self):\n        return Circulo.pi * self.radio ** 2\n\nc1 = Circulo(2)\nc2 = Circulo(3)\n\nprint(c1.area()) # output 12.56636\nprint(c2.area()) # output 28.27431\nprint(c1.pi) # output 3.14159\nprint(c2.pi) # output 3.14159\n</code></pre>","tags":[]},{"location":"python/manual/objetos/#el-metodo-__str__","title":"El m\u00e9todo <code>__str__</code>","text":"<p>Otro m\u00e9todo especial es el m\u00e9todo llamado <code>__str__</code> que se invoca cada vez que se llama a las funciones <code>print</code> o <code>str</code>. Devuelve siempre una cadena que se suele utilizar para dar una descripci\u00f3n informal del objeto. Si no se define en la clase, cada vez que se llama a estas funciones con un objeto de la clase, se muestra por defecto la posici\u00f3n de memoria del objeto.</p> <pre><code>class Tarjeta:\n    def __init__(self, numero, cantidad = 0):\n        self.numero = numero\n        self.saldo = cantidad\n        return\n    def __str__(self):\n        return 'Tarjeta n\u00famero {} con saldo {:.2f}\u20ac'.format(self.numero, float(self.saldo))\n\nt = Tarjeta('0123456789', 1000) \nprint(t) # output Tarjeta n\u00famero 0123456789 con saldo 1000.00\u20ac\n</code></pre>","tags":[]},{"location":"python/manual/objetos/#herencia","title":"Herencia","text":"<p>Una de las caracter\u00edsticas m\u00e1s potentes de la programaci\u00f3n orientada a objetos es la herencia, que permite definir una especializaci\u00f3n de una clase a\u00f1adiendo nuevos atributos o m\u00e9todos. La nueva clase se conoce como clase hija y hereda los atributos y m\u00e9todos de la clase original que se conoce como clase madre.</p> <p>Para crear un clase a partir de otra existente se utiliza la misma sintaxis que para definir una clase, pero poniendo detr\u00e1s del nombre de la clase entre par\u00e9ntesis los nombres de las clases madre de las que hereda.</p> <p>Ejemplo. A partir de la clase <code>Tarjeta</code> definida antes podemos crear mediante herencia otra clase <code>Tarjeta_Descuento</code> para representar las tarjetas de cr\u00e9dito que aplican un descuento sobre las compras.</p> <pre><code>class Tarjeta:\n    def __init__(self, id, cantidad = 0):\n        self.id = id\n        self.saldo = cantidad\n        return\n    def mostrar_saldo(self):       # M\u00e9todo de la clase Tarjeta que hereda la clase Tarjeta_descuento\n        print('El saldo es',  self.saldo, '\u20ac.')\n        return\n\nclass Tarjeta_descuento(Tarjeta):\n    def __init__(self, id, descuento, cantidad = 0):\n        self.id = id\n        self.descuento = descuento\n        self.saldo = cantidad\n        return\n    def mostrar_descuento(self):   # M\u00e9todo exclusivo de la clase Tarjeta_descuento\n        print('Descuento de', self.descuento, '% en los pagos.')\n        return\n\nt = Tarjeta_descuento('0123456789', 2, 1000)\nt.mostrar_saldo() # output El saldo es 1000 \u20ac.\nt.mostrar_descuento() # output Descuento de 2 % en los pagos.\n</code></pre> <p>La principal ventaja de la herencia es que evita la repetici\u00f3n de c\u00f3digo y por tanto los programas son m\u00e1s f\u00e1ciles de mantener.</p> <p>En el ejemplo de la tarjeta de cr\u00e9dito, el m\u00e9todo <code>mostrar_saldo</code> solo se define en la clase madre. De esta manera, cualquier cambio que se haga en el cuerpo del m\u00e9todo en la clase madre, autom\u00e1ticamente se propaga a las clases hijas. Sin la herencia, este m\u00e9todo tendr\u00eda que replicarse en cada una de las clases hijas y cada vez que se hiciese un cambio en \u00e9l, habr\u00eda que replicarlo tambi\u00e9n en las clases hijas.</p>","tags":[]},{"location":"python/manual/objetos/#jerarquia-de-clases","title":"Jerarqu\u00eda de clases","text":"<p>A partir de una clase derivada mediante herencia se pueden crear nuevas clases hijas aplicando de nuevo la herencia. Ello da lugar a una jerarqu\u00eda de clases que puede representarse como un \u00e1rbol donde cada clase hija se representa como una rama que sale de la clase madre.</p> <p></p> <p>Debido a la herencia, cualquier objeto creado a partir de una clase es una instancia de la clase, pero tambi\u00e9n lo es de las clases que son ancestros de esa clase en la jerarqu\u00eda de clases.</p> <p>El siguiente comando permite averiguar si un objeto es instancia de una clase:</p> <ul> <li><code>isinstance(objeto, clase)</code>: Devuelve <code>True</code> si el objeto <code>objeto</code> es una instancia de la clase <code>clase</code> y <code>False</code> en caso contrario.</li> </ul> <pre><code># Asumiendo la definici\u00f3n de las clases Tarjeta y Tarjeta_descuento anteriores.\nt1 = Tarjeta('1111111111', 0)\nt2 = t = Tarjeta_descuento('2222222222', 2, 1000)\nprint(isinstance(t1, Tarjeta)) # output True\nprint(isinstance(t1, Tarjeta_descuento)) # output False\nprint(isinstance(t2, Tarjeta_descuento)) # output True\nprint(isinstance(t2, Tarjeta)) # output True\n</code></pre>","tags":[]},{"location":"python/manual/objetos/#sobrecarga-y-polimorfismo","title":"Sobrecarga y polimorfismo","text":"<p>Los objetos de una clase hija heredan los atributos y m\u00e9todos de la clase madre y, por tanto, a priori tienen tienen el mismo comportamiento que los objetos de la clase madre. Pero la clase hija puede definir nuevos atributos o m\u00e9todos o reescribir los m\u00e9todos de la clase madre de manera que sus objetos presenten un comportamiento distinto. Esto \u00faltimo se conoce como sobrecarga. </p> <p>De este modo, aunque un objeto de la clase hija y otro de la clase madre pueden tener un mismo m\u00e9todo, al invocar ese m\u00e9todo sobre el objeto de la clase hija, el comportamiento puede ser distinto a cuando se invoca ese mismo m\u00e9todo sobre el objeto de la clase madre. Esto se conoce como polimorfismo y es otra de las caracter\u00edsticas de la programaci\u00f3n orientada a objetos.</p> <pre><code>class Tarjeta:\n    def __init__(self, id, cantidad = 0):\n        self.id = id\n        self.saldo = cantidad\n        return\n    def mostrar_saldo(self):\n        print('El saldo es {:.2f}\u20ac.'.format(self.saldo))\n        return\n    def pagar(self, cantidad):\n        self.saldo -= cantidad\n        return\n\nclass Tarjeta_Oro(Tarjeta):\n    def __init__(self, id, descuento, cantidad = 0):\n        self.id = id\n        self.descuento = descuento\n        self.saldo = cantidad\n        return\n    def pagar(self, cantidad):\n        self.saldo -= cantidad * (1 - self.descuento / 1.00)\n\nt1 = Tarjeta('1111111111', 1000)\nt2 = Tarjeta_Oro('2222222222', 1, 1000)\nt1.pagar(100)\nt1.mostrar_saldo() # output El saldo es 900.00\u20ac.\nt2.pagar(100)\nt2.mostrar_saldo() # output El saldo es 901.00\u20ac.\n</code></pre>","tags":[]},{"location":"python/manual/objetos/#principios-de-la-programacion-orientada-a-objetos","title":"Principios de la programaci\u00f3n orientada a objetos","text":"<p>La programaci\u00f3n orientada a objetos se basa en los siguientes principios:</p> <ul> <li>Encapsulaci\u00f3n: Agrupar datos (atributos) y procedimientos (m\u00e9todos) en unidades l\u00f3gicas (objetos) y evitar maninupar los atributos accediendo directamente a ellos, usando, en su lugar, m\u00e9todos para acceder a ellos. </li> <li>Abstracci\u00f3n: Ocultar al usuario de la clase los detalles de implementaci\u00f3n de los m\u00e9todos. Es decir, el usuario necesita saber qu\u00e9 hace un m\u00e9todo y con qu\u00e9 par\u00e1metros tiene que invocarlo (interfaz), pero no necesita saber c\u00f3mo lo hace.</li> <li>Herencia: Evitar la duplicaci\u00f3n de c\u00f3digo en clases con comportamientos similares, definiendo los m\u00e9todos comunes en una clase madre y los m\u00e9todos particulares en clases hijas.</li> <li>Polimorfismo: Redefinir los m\u00e9todos de la clase madre en las clases hijas cuando se requiera un comportamiento distinto. As\u00ed, un mismo m\u00e9todo puede realizar operaciones distintas dependiendo del objeto sobre el que se aplique.</li> </ul> <p>Resolver un problema siguiendo el paradigma de la programaci\u00f3n orientada a objetos requiere un cambio de mentalidad con respecto a como se resuelve utilizando el paradigma de la programaci\u00f3n procedimental. </p> <p>La programaci\u00f3n orientada a objetos es m\u00e1s un proceso de modelado, donde se identifican las entidades que intervienen en el problema y su comportamiento, y se definen clases que modelizan esas entidades. Por ejemplo, las entidades que intervienen en el pago con una tarjeta de cr\u00e9dito ser\u00edan la tarjeta, el terminal de venta, la cuenta corriente vinculada a la tarjeta, el banco, etc. Cada una de ellas dar\u00eda lugar a una clase. </p> <p>Despu\u00e9s se crean objetos con los datos concretos del problema y se hace que los objetos interact\u00faen entre s\u00ed, a trav\u00e9s de sus m\u00e9todos, para resolver el problema. Cada objeto es responsable de una subtarea y colaboran entre ellos para resolver la tarea principal. Por ejemplo, la terminal de venta accede a los datos de la tarjeta y da la orden al banco para que haga un cargo en la cuenta vinculada a la tarjeta.</p> <p>De esta forma se pueden abordar problemas muy complejos descomponi\u00e9ndolos en peque\u00f1as tareas que son m\u00e1s f\u00e1ciles de resolver que el problema principal (\u00a1divide y vencer\u00e1s!).</p>","tags":[]},{"location":"python/manual/pandas/","title":"La librer\u00eda Pandas","text":"<p>Pandas es una librer\u00eda de Python especializada en el manejo y an\u00e1lisis de estructuras de datos.</p> <p></p> <p>Las principales caracter\u00edsticas de esta librer\u00eda son:</p> <ul> <li>Define nuevas estructuras de datos basadas en los arrays de la librer\u00eda NumPy pero con nuevas funcionalidades.</li> <li>Permite leer y escribir f\u00e1cilmente ficheros en formato CSV, Excel y bases de datos SQL.</li> <li>Permite acceder a los datos mediante \u00edndices o nombres para filas y columnas.</li> <li>Ofrece m\u00e9todos para reordenar, dividir y combinar conjuntos de datos.</li> <li>Permite trabajar con series temporales.</li> <li>Realiza todas estas operaciones de manera muy eficiente.</li> </ul>","tags":["Pandas"]},{"location":"python/manual/pandas/#tipos-de-datos-de-pandas","title":"Tipos de datos de Pandas","text":"<p>Pandas dispone de tres estructuras de datos diferentes:</p> <ul> <li>Series: Estructura de una dimensi\u00f3n.</li> <li>DataFrame: Estructura de dos dimensiones (tablas).</li> <li>Panel: Estructura de tres dimensiones (cubos).</li> </ul> <p>Estas estructuras se construyen a partir de arrays de la librer\u00eda NumPy, a\u00f1adiendo nuevas funcionalidades.</p>","tags":["Pandas"]},{"location":"python/manual/pandas/#la-clase-de-objetos-series","title":"La clase de objetos Series","text":"<p>Son estructuras similares a los arrays de una dimensi\u00f3n. Son homog\u00e9neas, es decir, sus elementos tienen que ser del mismo tipo, y su tama\u00f1o es inmutable, es decir, no se puede cambiar, aunque si su contenido.</p> <p>Dispone de un \u00edndice que asocia un nombre a cada elemento del la serie, a trav\u00e9s de la cu\u00e1l se accede al elemento.</p> <p>Ejemplo. La siguiente serie contiene las asignaturas de un curso.</p> <p></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#creacion-de-series","title":"Creaci\u00f3n de series","text":"","tags":["Pandas"]},{"location":"python/manual/pandas/#creacion-de-una-serie-a-partir-de-una-lista","title":"Creaci\u00f3n de una serie a partir de una lista","text":"<ul> <li><code>Series(data=lista, index=indices, dtype=tipo)</code> : Devuelve un objeto de tipo Series con los datos de la lista <code>lista</code>, las filas especificados en la lista <code>indices</code> y el tipo de datos indicado en <code>tipo</code>. Si no se pasa la lista de \u00edndices se utilizan como \u00edndices los enteros del 0 al \\(n-1\\), done \\(n\\) es el tama\u00f1o de la serie. Si no se pasa el tipo de dato se infiere.</li> </ul> <p><pre><code>import pandas as pd\ns = pd.Series(['Matem\u00e1ticas', 'Historia', 'Econom\u00eda', 'Programaci\u00f3n', 'Ingl\u00e9s'], dtype='string')\nprint(s)\n</code></pre> <code>output</code> <pre><code>0     Matem\u00e1ticas\n1        Historia\n2        Econom\u00eda\n3    Programaci\u00f3n\n4          Ingl\u00e9s\ndtype: string\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#creacion-de-una-serie-a-partir-de-un-diccionario","title":"Creaci\u00f3n de una serie a partir de un diccionario","text":"<ul> <li><code>Series(data=diccionario, index=indices)</code>: Devuelve un objeto de tipo Series con los valores del diccionario <code>diccionario</code> y las filas especificados en la lista <code>indices</code>. Si no se pasa la lista de \u00edndices se utilizan como \u00edndices las claves del diccionario.</li> </ul> <p><pre><code>import pandas as pd\ns = pd.Series({'Matem\u00e1ticas': 6.0,  'Econom\u00eda': 4.5, 'Programaci\u00f3n': 8.5})\nprint(s)\n</code></pre> <code>output</code> <pre><code>Matem\u00e1ticas     6.0\nEconom\u00eda        4.5\nProgramaci\u00f3n    8.5\ndtype: float64\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#atributos-de-una-serie","title":"Atributos de una serie","text":"<p>Existen varias propiedades o m\u00e9todos para ver las caracter\u00edsticas de una serie.</p> <ul> <li> <p><code>s.size</code> : Devuelve el n\u00famero de elementos de la serie <code>s</code>.</p> </li> <li> <p><code>s.index</code> : Devuelve una lista con los nombres de las filas del DataFrame <code>s</code>.</p> </li> <li> <p><code>s.dtype</code> : Devuelve el tipo de datos de los elementos de la serie <code>s</code>.</p> </li> </ul> <pre><code>import pandas as pd\ns = pd.Series([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])\ns.size # output 10\ns.index # output RangeIndex(start=0, stop=10, step=1)\ns.dtype # output dtype('int64')\n</code></pre>","tags":["Pandas"]},{"location":"python/manual/pandas/#acceso-a-los-elementos-de-una-serie","title":"Acceso a los elementos de una serie","text":"<p>El acceso a los elementos de un objeto del tipo Series puede ser a trav\u00e9s de posiciones o trav\u00e9s de \u00edndices (nombres).</p>","tags":["Pandas"]},{"location":"python/manual/pandas/#acceso-por-posicion","title":"Acceso por posici\u00f3n","text":"<p>Se realiza de forma similar a como se accede a los elementos de un array.</p> <ul> <li><code>s[i]</code> : Devuelve el elemento que ocupa la posici\u00f3n <code>i+1</code> en la serie <code>s</code>.</li> <li><code>s[posiciones]</code>: Devuelve otra serie con los elementos que ocupan las posiciones de la lista <code>posiciones</code>.</li> </ul>","tags":["Pandas"]},{"location":"python/manual/pandas/#acceso-por-indice","title":"Acceso por \u00edndice","text":"<ul> <li><code>s[nombre]</code> : Devuelve el elemento con el nombre <code>nombre</code> en el \u00edndice.</li> <li><code>s[nombres]</code> : Devuelve otra serie con los elementos correspondientes a los nombres indicadas en la lista <code>nombres</code> en el \u00edndice.</li> </ul> <p><pre><code>s[1:3]\n</code></pre> <code>output</code> <pre><code>Econom\u00eda        4.5\nProgramaci\u00f3n    8.5\ndtype: float64\n</code></pre> <code>output</code> <pre><code>s['Econom\u00eda'] # output 4.5\ns[['Programaci\u00f3n', 'Matem\u00e1ticas']]\n</code></pre> <code>output</code> <pre><code>Programaci\u00f3n    8.5\nMatem\u00e1ticas     6.0\ndtype: float64\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#resumen-descriptivo-de-una-serie","title":"Resumen descriptivo de una serie","text":"<p>Las siguientes funciones permiten resumir varios aspectos de una serie:</p> <ul> <li><code>s.count()</code> : Devuelve el n\u00famero de elementos que no son nulos ni <code>NaN</code> en la serie <code>s</code>.</li> <li><code>s.sum()</code> : Devuelve la suma de los datos de la serie <code>s</code> cuando los datos son de un tipo num\u00e9rico, o la concatenaci\u00f3n de ellos cuando son del tipo cadena <code>str</code>.</li> <li><code>s.cumsum()</code> : Devuelve una serie con la suma acumulada de los datos de la serie <code>s</code> cuando los datos son de un tipo num\u00e9rico.</li> <li><code>s.value_counts()</code> : Devuelve una serie con la frecuencia (n\u00famero de repeticiones) de cada valor de la serie <code>s</code>.</li> <li><code>s.min()</code> : Devuelve el menor de los datos de la serie <code>s</code>.</li> <li><code>s.max()</code> : Devuelve el mayor de los datos de la serie <code>s</code>.</li> <li><code>s.mean()</code> : Devuelve la media de los datos de la serie <code>s</code> cuando los datos son de un tipo num\u00e9rico.</li> <li><code>s.var()</code> : Devuelve la varianza de los datos de la serie <code>s</code> cuando los datos son de un tipo num\u00e9rico.</li> <li><code>s.std()</code> : Devuelve la desviaci\u00f3n t\u00edpica de los datos de la serie <code>s</code> cuando los datos son de un tipo num\u00e9rico.</li> <li><code>s.describe()</code>: Devuelve una serie con un resumen descriptivo que incluye el n\u00famero de datos, su suma, el m\u00ednimo, el m\u00e1ximo, la media, la desviaci\u00f3n t\u00edpica y los cuartiles.</li> </ul> <p><pre><code>import pandas as pd\ns = pd.Series([1, 1, 1, 1, 2, 2, 2, 3, 3, 4])\ns.count()  # Tama\u00f1o muestral # output 10\ns.sum()  # Suma # output 20\ns.cumsum()  # Suma acumulada\n</code></pre> <code>output</code> <pre><code>0     1\n1     2\n2     3\n3     4\n4     6\n5     8\n6    10\n7    13\n8    16\n9    20\ndtype: int64\n</code></pre> <code>output</code> <pre><code>s.value_counts()  # Frecuencias absolutas\n</code></pre> <code>output</code> <pre><code>1    4\n2    3\n3    2\n4    1\ndtype: int64\n</code></pre> <code>output</code> <pre><code>s.value_counts(normalize=True)  # Frecuencias relativas\n</code></pre> <code>output</code> <pre><code>1    0.4\n2    0.3\n3    0.2\n4    0.1\ndtype: float64\n</code></pre> <code>output</code> <pre><code>s.min()  # M\u00ednimo # output 1\ns.max()  # M\u00e1ximo # output 4\ns.mean()  # Media # output 2.0\ns.var()  # Varianza # output 1.1111111111111112\ns.std()  # Desviaci\u00f3n t\u00edpica # output 1.0540925533894598\ns.describe()  # Resume descriptivo\n</code></pre> <code>output</code> <pre><code>count    10.000000\nmean      2.000000\nstd       1.054093\nmin       1.000000\n25%       1.000000\n50%       2.000000\n75%       2.750000\nmax       4.000000\ndtype: float64\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#aplicar-operaciones-a-una-serie","title":"Aplicar operaciones a una serie","text":"<p>Los operadores binarios (<code>+</code>, <code>*</code>, <code>/</code>, etc.) pueden utilizarse con una serie, y devuelven otra serie con el resultado de aplicar la operaci\u00f3n a cada elemento de la serie.</p> <p><pre><code>import pandas as pd\ns = pd.Series([1, 2, 3, 4])\ns * 2\n</code></pre> <code>output</code> <pre><code>0    2\n1    4\n2    6\n3    8\ndtype: int64\n</code></pre> <pre><code>s % 2\n</code></pre> <code>output</code> <pre><code>0    1\n1    0\n2    1\n3    0\ndtype: int64\n</code></pre> <pre><code>s = pd.Series(['a', 'b', 'c'])\ns * 5\n</code></pre> <pre><code>0    aaaaa\n1    bbbbb\n2    ccccc\ndtype: object\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#aplicar-funciones-a-una-serie","title":"Aplicar funciones a una serie","text":"<p>Tambi\u00e9n es posible aplicar una funci\u00f3n a cada elemento de la serie mediante el siguiente m\u00e9todo:</p> <ul> <li><code>s.apply(f)</code> : Devuelve una serie con el resultado de aplicar la funci\u00f3n <code>f</code> a cada uno de los elementos de la serie <code>s</code>.</li> </ul> <p><pre><code>import pandas as pd\nfrom math import log\ns = pd.Series([1, 2, 3, 4])\ns.apply(log)\n</code></pre> <code>output</code> <pre><code>0    0.000000\n1    0.693147\n2    1.098612\n3    1.386294\ndtype: float64\n</code></pre> <pre><code>s = pd.Series(['a', 'b', 'c'])\ns.apply(str.upper)\n</code></pre> <code>output</code> <pre><code>0    A\n1    B\n2    C\ndtype: object\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#filtrar-una-serie","title":"Filtrar una serie","text":"<p>Para filtrar una serie y quedarse con los valores que cumplen una determinada condici\u00f3n se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>s[condicion]</code> : Devuelve una serie con los elementos de la serie <code>s</code> que se corresponden con el valor <code>True</code> de la lista booleana <code>condicion</code>. <code>condicion</code> debe ser una lista de valores booleanos de la misma longitud que la serie.</li> </ul> <p><pre><code>import pandas as pd\ns = pd.Series({'Matem\u00e1ticas': 6.0,  'Econom\u00eda': 4.5, 'Programaci\u00f3n': 8.5})\nprint(s[s &gt; 5])\n</code></pre> <code>output</code> <pre><code>Matem\u00e1ticas     6.0\nProgramaci\u00f3n    8.5\ndtype: float64\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#ordenar-una-serie","title":"Ordenar una serie","text":"<p>Para ordenar una serie se utilizan los siguientes m\u00e9todos:</p> <ul> <li> <p><code>s.sort_values(ascending=booleano</code>) : Devuelve la serie que resulta de ordenar los valores la serie <code>s</code>. Si argumento del par\u00e1metro <code>ascending</code> es <code>True</code> el orden es creciente y si es <code>False</code> decreciente.</p> </li> <li> <p><code>df.sort_index(ascending=booleano</code>) : Devuelve la serie que resulta de ordenar el \u00edndice de la serie <code>s</code>. Si el argumento del par\u00e1metro <code>ascending</code> es <code>True</code> el orden es creciente y si es <code>False</code> decreciente.</p> </li> </ul> <p><pre><code>import pandas as pd\ns = pd.Series({'Matem\u00e1ticas': 6.0,  'Econom\u00eda': 4.5, 'Programaci\u00f3n': 8.5})\nprint(s.sort_values())\n</code></pre> <code>output</code> <pre><code>Econom\u00eda        4.5\nMatem\u00e1ticas     6.0\nProgramaci\u00f3n    8.5\ndtype: float64\n</code></pre> <pre><code>print(s.sort_index(ascending = False))\n</code></pre> <code>output</code> <pre><code>Programaci\u00f3n    8.5\nMatem\u00e1ticas     6.0\nEconom\u00eda        4.5\ndtype: float64\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#eliminar-los-dados-desconocidos-en-una-serie","title":"Eliminar los dados desconocidos en una serie","text":"<p>Los datos desconocidos representan en Pandas por <code>NaN</code> y los nulos por <code>None</code>. Tanto unos como otros suelen ser un problema a la hora de realizar algunos an\u00e1lisis de datos, por lo que es habitual eliminarlos. Para eliminarlos de una serie se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>s.dropna()</code> : Elimina los datos desconocidos o nulos de la serie <code>s</code>.</li> </ul> <p><pre><code>import pandas as pd\nimport numpy as np\ns = pd.Series(['a', 'b', None, 'c', np.NaN,  'd'])\ns\n</code></pre> <code>output</code> <pre><code>0       a\n1       b\n2    None\n3       c\n4     NaN\n5       d\ndtype: object\n</code></pre> <pre><code>s.dropna()\n</code></pre> <code>output</code> <pre><code>0    a\n1    b\n3    c\n5    d\ndtype: object\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#la-clase-de-objetos-dataframe","title":"La clase de objetos DataFrame","text":"<p>Un objeto del tipo DataFrame define un conjunto de datos estructurado en forma de tabla donde cada columna es un objeto de tipo Series, es decir, todos los datos de una misma columna son del mismo tipo, y las filas son registros que pueden contender datos de distintos tipos.</p> <p>Un DataFrame contiene dos \u00edndices, uno para las filas y otro para las columnas, y se puede acceder a sus elementos mediante los nombres de las filas y las columnas.</p> <p>Ejemplo. El siguiente DataFrame contiene informaci\u00f3n sobre los alumnos de un curso. Cada fila corresponde a un alumno y cada columna a una variable.</p> <p></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#creacion-de-un-dataframe","title":"Creaci\u00f3n de un DataFrame","text":"","tags":["Pandas"]},{"location":"python/manual/pandas/#creacion-de-un-dataframe-a-partir-de-un-diccionario-de-listas","title":"Creaci\u00f3n de un DataFrame a partir de un diccionario de listas","text":"<p>Para crear un DataFrame a partir de un diccionario cuyas claves son los nombres de las columnas y los valores son listas con los datos de las columnas se utiliza el m\u00e9todo:</p> <ul> <li><code>DataFrame(data=diccionario, index=filas, columns=columnas, dtype=tipos)</code> : Devuelve un objeto del tipo DataFrame cuyas columnas son las listas contenidas en los valores del diccionario <code>diccionario</code>, los nombres de filas indicados en la lista <code>filas</code>, los nombres de columnas indicados en la lista <code>columnas</code> y los tipos indicados en la lista <code>tipos</code>. La lista <code>filas</code> tiene que tener el mismo tama\u00f1o que las listas del diccionario, mientras que las listas <code>columnas</code> y <code>tipos</code> tienen que tener el mismo tama\u00f1o que el diccionario. Si no se pasa la lista de filas se utilizan como nombres los enteros empezando en 0. Si no se pasa la lista de columnas se utilizan como nombres las claves del diccionario. Si no se pasa la lista de tipos, se infiere.</li> </ul> <p> Los valores asociados a las claves del diccionario deben ser listas del mismo tama\u00f1o.</p> <p><pre><code>import pandas as pd\ndatos = {'nombre':['Mar\u00eda', 'Luis', 'Carmen', 'Antonio'],\n'edad':[18, 22, 20, 21],\n'grado':['Econom\u00eda', 'Medicina', 'Arquitectura', 'Econom\u00eda'],\n'correo':['maria@gmail.com', 'luis@yahoo.es', 'carmen@gmail.com', 'antonio@gmail.com']\n}\n</code></pre> <pre><code>df = pd.DataFrame(datos)\nprint(df)\n</code></pre> <code>output</code> <pre><code>    nombre  edad         grado             correo\n0    Mar\u00eda    18      Econom\u00eda    maria@gmail.com\n1     Luis    22      Medicina      luis@yahoo.es\n2   Carmen    20  Arquitectura   carmen@gmail.com\n3  Antonio    21      Econom\u00eda  antonio@gmail.com\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#creacion-de-un-dataframe-a-partir-de-una-lista-de-listas","title":"Creaci\u00f3n de un DataFrame a partir de una lista de listas","text":"<p>Para crear un DataFrame a partir de una lista de listas con los datos de las columnas se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>DataFrame(data=listas, index=filas, columns=columnas, dtype=tipos)</code> : Devuelve un objeto del tipo DataFrame cuyas columnas son los valores de las listas de la lista <code>listas</code>, los nombres de filas indicados en la lista <code>filas</code>, los nombres de columnas indicados en la lista <code>columnas</code> y los tipos indicados en la lista <code>tipos</code>. La lista <code>filas</code>, tiene que tener el mismo tama\u00f1o que la lista <code>listas</code> mientras que las listas <code>columnas</code> y <code>tipos</code> tienen que tener el mismo tama\u00f1o que las listas anidadas en <code>listas</code>. Si no se pasa la lista de filas o de columnas se utilizan enteros empezando en 0. Si no se pasa la lista de tipos, se infiere.</li> </ul> <p> Si las listas anidadas en <code>listas</code> no tienen el mismo tama\u00f1o, las listas menores se rellenan con valores <code>NaN</code>.</p> <p><pre><code>import pandas as pd\ndf = pd.DataFrame([['Mar\u00eda', 18], ['Luis', 22], ['Carmen', 20]], columns=['Nombre', 'Edad'])\nprint(df)\n</code></pre> <code>output</code> <pre><code>   Nombre   Edad\n0   Mar\u00eda     18\n1    Luis     22\n2  Carmen     20\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#creacion-de-un-dataframe-a-partir-de-una-lista-de-diccionarios","title":"Creaci\u00f3n de un DataFrame a partir de una lista de diccionarios","text":"<p>Para crear un DataFrame a partir de una lista de diccionarios con los datos de las filas, se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>DataFrame(data=diccionarios, index=filas, columns=columnas, dtype=tipos)</code> : Devuelve un objeto del tipo DataFrame cuyas filas contienen los valores de los diccionarios de la lista <code>diccionarios</code>, los nombres de filas indicados en la lista <code>filas</code>, los nombres de columnas indicados en la lista <code>columnas</code> y los tipos indicados en la lista <code>tipos</code>. La lista <code>filas</code> tiene que tener el mismo tama\u00f1o que la lista <code>lista</code>. Si no se pasa la lista de filas se utilizan enteros empezando en 0. Si no se pasa la lista de columnas se utilizan las claves de los diccionarios. Si no se pasa la lista de tipos, se infiere.</li> </ul> <p> Si los diccionarios no tienen las mismas claves, las claves que no aparecen en el diccionario se rellenan con valores <code>NaN</code>.</p> <p><pre><code>import pandas as pd\ndf = pd.DataFrame([{'Nombre':'Mar\u00eda', 'Edad':18}, {'Nombre':'Luis', 'Edad':22}, {'Nombre':'Carmen'}])\nprint(df)\n</code></pre> <code>output</code> <pre><code>0   Mar\u00eda  18.0\n1    Luis  22.0\n2  Carmen   NaN\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#creacion-de-un-dataframe-a-partir-de-un-array","title":"Creaci\u00f3n de un DataFrame a partir de un array","text":"<p>Para crear un DataFrame a partir de un array de NumPy se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>DataFrame(data=array, index=filas, columns=columnas, dtype=tipo)</code> : Devuelde un objeto del tipo DataFrame cuyas filas y columnas son las del array <code>array</code>, los nombres de filas indicados en la lista <code>filas</code>, los nombres de columnas indicados en la lista <code>columnas</code> y el tipo indicado en <code>tipo</code>. La lista <code>filas</code> tiene que tener el mismo tama\u00f1o que el n\u00famero de filas del array y la lista <code>columnas</code> el mismo tama\u00f1o que el n\u00famero de columnas del array. Si no se pasa la lista de filas se utilizan enteros empezando en 0. Si no se pasa la lista de columnas se utilizan las claves de los diccionarios. Si no se pasa la lista de tipos, se infiere.</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.DataFrame(np.random.randn(4, 3), columns=['a', 'b', 'c'])\nprint(df)\n</code></pre> <code>output</code> <pre><code>          a         b         c\n0 -1.408238  0.644706  1.077434\n1 -0.279264 -0.249229  1.019137\n2 -0.805470 -0.629498  0.935066\n3  0.236936 -0.431673 -0.177379\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#creacion-de-un-dataframe-a-partir-de-un-fichero-csv-o-excel","title":"Creaci\u00f3n de un DataFrame a partir de un fichero CSV o Excel","text":"<p>Dependiendo del tipo de fichero, existen distintas funciones para importar un DataFrame desde un fichero.</p> <ul> <li> <p><code>read_csv(fichero.csv, sep=separador, header=n, index_col=m, na_values=no-validos, decimal=separador-decimal)</code> : Devuelve un objeto del tipo DataFrame con los datos del fichero CSV <code>fichero.csv</code> usando como separador de los datos la cadena <code>separador</code>. Como nombres de columnas se utiliza los valores de la fila <code>n</code> y como nombres de filas los valores de la columna <code>m</code>. Si no se indica <code>m</code> se utilizan como nombres de filas los enteros empezando en 0. Los valores inclu\u00eddos en la lista <code>no-validos</code> se convierten en <code>NaN</code>. Para los datos num\u00e9ricos se utiliza como separador de decimales el car\u00e1cter indicado en <code>separador-decimal</code>.</p> </li> <li> <p><code>read_excel(fichero.xlsx, sheet_name=hoja, header=n, index_col=m, na_values=no-validos, decimal=separador-decimal)</code> : Devuelve un objeto del tipo DataFrame con los datos de la hoja de c\u00e1lculo <code>hoja</code> del fichero Excel <code>fichero.xlsx</code>. Como nombres de columnas se utiliza los valores de la fila <code>n</code> y como nombres de filas los valores de la columna <code>m</code>. Si no se indica <code>m</code> se utilizan como nombres de filas los enteros empezando en 0. Los valores inclu\u00eddos en la lista <code>no-validos</code> se convierten en <code>NaN</code>. Para los datos num\u00e9ricos se utiliza como separador de decimales el car\u00e1cter indicado en <code>separador-decimal</code>.</p> </li> </ul> <p><pre><code>import pandas as pd\n# Importaci\u00f3n del fichero datos-colesteroles.csv\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesteroles.csv', sep=';', decimal=',')\nprint(df.head())\n</code></pre> <code>output</code> <pre><code>                              nombre  edad sexo    peso    altura  colesterol\n0       Jos\u00e9 Luis Mart\u00ednez Izquierdo    18    H    85.0    1.79         182.0\n1                     Rosa D\u00edaz D\u00edaz    32    M    65.0    1.73         232.0\n2              Javier Garc\u00eda S\u00e1nchez    24    H     NaN    1.81         191.0\n3                Carmen L\u00f3pez Pinz\u00f3n    35    M    65.0    1.70         200.0\n4               Marisa L\u00f3pez Collado    46    M    51.0    1.58         148.0\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#exportacion-de-ficheros","title":"Exportaci\u00f3n de ficheros","text":"<p>Tambi\u00e9n existen funciones para exportar un DataFrame a un fichero con diferentes formatos.</p> <ul> <li> <p><code>df.to_csv(fichero.csv, sep=separador, columns=booleano, index=booleano)</code> : Exporta el DataFrame <code>df</code> al fichero <code>fichero.csv</code> en formato CSV usando como separador de los datos la cadena <code>separador</code>. Si se pasa <code>True</code> al par\u00e1metro <code>columns</code> se exporta tambi\u00e9n la fila con los nombres de columnas y si se pasa <code>True</code> al par\u00e1metro <code>index</code> se exporta tambi\u00e9n la columna con los nombres de las filas.</p> </li> <li> <p><code>df.to_excel(fichero.xlsx, sheet_name = hoja, columns=booleano, index=booleano)</code> : Exporta el DataFrame <code>df</code> a la hoja de c\u00e1lculo <code>hoja</code> del fichero <code>fichero.xlsx</code> en formato Excel. Si se pasa <code>True</code> al par\u00e1metro <code>columns</code> se exporta tambi\u00e9n la fila con los nombres de columnas y si se pasa <code>True</code> al par\u00e1metro <code>index</code> se exporta tambi\u00e9n la columna con los nombres de las filas.</p> </li> </ul>","tags":["Pandas"]},{"location":"python/manual/pandas/#atributos-de-un-dataframe","title":"Atributos de un DataFrame","text":"<p>Existen varias propiedades o m\u00e9todos para ver las caracter\u00edsticas de un DataFrame.</p> <ul> <li> <p><code>df.info()</code> : Devuelve informaci\u00f3n (n\u00famero de filas, n\u00famero de columnas, \u00edndices, tipo de las columnas y memoria usado) sobre el DataFrame <code>df</code>.</p> </li> <li> <p><code>df.shape</code> : Devuelve una tupla con el n\u00famero de filas y columnas del DataFrame <code>df</code>.</p> </li> <li> <p><code>df.size</code> : Devuelve el n\u00famero de elementos del DataFrame.</p> </li> <li> <p><code>df.columns</code> : Devuelve una lista con los nombres de las columnas del DataFrame <code>df</code>.</p> </li> <li> <p><code>df.index</code> : Devuelve una lista con los nombres de las filas del DataFrame <code>df</code>.</p> </li> <li> <p><code>df.dtypes</code> : Devuelve una serie con los tipos de datos de las columnas del DataFrame <code>df</code>.</p> </li> <li> <p><code>df.head(n)</code> : Devuelve las <code>n</code> primeras filas del DataFrame <code>df</code>.</p> </li> <li> <p><code>df.tail(n)</code> : Devuelve las <code>n</code> \u00faltimas filas del DataFrame <code>df</code>.</p> </li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\ndf.info()\n</code></pre> <code>output</code> <pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 14 entries, 0 to 13\nData columns (total 6 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   nombre      14 non-null     object \n 1   edad        14 non-null     int64  \n 2   sexo        14 non-null     object \n 3   peso        13 non-null     float64\n 4   altura      14 non-null     float64\n 5   colesterol  13 non-null     float64\ndtypes: float64(3), int64(1), object(2)\nmemory usage: 800.0+ bytes\n</code></pre> <code>output</code> <pre><code>df.shape # output (14, 6)\ndf.size # output 84\ndf.columns # output Index(['nombre', 'edad', 'sexo', 'peso', 'altura', 'colesterol'], dtype='object')\ndf.index # output RangeIndex(start=0, stop=14, step=1)\ndf.dtypes\n</code></pre> <code>output</code> <pre><code>nombre         object\nedad            int64\nsexo           object\npeso          float64\naltura        float64\ncolesterol    float64\ndtype: object\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#renombrar-los-nombres-de-las-filas-y-columnas","title":"Renombrar los nombres de las filas y columnas","text":"<p>Para cambiar el nombre de las filas y las columnas de un DataFrame se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>df.rename(columns=columnas, index=filas)</code>: Devuelve el DataFrame que resulta de renombrar las columnas indicadas en las claves del diccionario <code>columnas</code> con sus valores y las filas indicadas en las claves del diccionario <code>filas</code> con sus valores en el DataFrame <code>df</code>.</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df.rename(columns={'nombre':'nombre y apellidos', 'altura':'estatura'}, index={0:1000, 1:1001, 2:1002}))\n</code></pre> <code>output</code> <pre><code>                    nombre y apellidos  edad sexo    peso  estatura    colesterol\n1000      Jos\u00e9 Luis Mart\u00ednez Izquierdo    18    H    85.0      1.79         182.0\n1001                    Rosa D\u00edaz D\u00edaz    32    M    65.0      1.73         232.0\n1002             Javier Garc\u00eda S\u00e1nchez    24    H     NaN      1.81         191.0\n3                  Carmen L\u00f3pez Pinz\u00f3n    35    M    65.0      1.70         200.0\n4                 Marisa L\u00f3pez Collado    46    M    51.0      1.58         148.0\n...\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#cambiar-el-indice-de-un-dataframe","title":"Cambiar el \u00edndice de un DataFrame","text":"<p>Aunque el \u00edndice de un DataFrame suele fijarse en la creaci\u00f3n del mismo, en ocasiones puede ser necesario cambiar el \u00edndice una vez creado el DataFrame. Para ello se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>df.set_index(keys = columnas, verify_integrity = bool)</code>: Devuelve el DataFrame que resulta de eliminar las columnas de la lista <code>columnas</code> y convertirlas en el nuevo \u00edndice. El par\u00e1metro <code>verify_integrity</code> recibe un booleano (<code>False</code> por defecto) y realiza una comprobaci\u00f3n para evitar duplicados en la clave cuando recibe <code>True</code>.</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df.set_index(\"nombre\").head())\n</code></pre> <code>output</code> <pre><code>                              edad sexo  peso  altura  colesterol\nnombre                                                           \nJos\u00e9 Luis Mart\u00ednez Izquierdo    18    H  85.0    1.79       182.0\nRosa D\u00edaz D\u00edaz                  32    M  65.0    1.73       232.0\nJavier Garc\u00eda S\u00e1nchez           24    H   NaN    1.81       191.0\nCarmen L\u00f3pez Pinz\u00f3n             35    M  65.0    1.70       200.0\nMarisa L\u00f3pez Collado            46    M  51.0    1.58       148.0\n&gt;&gt;&gt; \n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#reindexar-un-dataframe","title":"Reindexar un DataFrame","text":"<p>Para reordenar los \u00edndices de las filas y las columnas de un DataFrame, as\u00ed como a\u00f1adir o eliminar \u00edndices, se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>df.reindex(index=filas, columns=columnas, fill_value=relleno)</code> : Devuelve el DataFrame que resulta de tomar del DataFrame <code>df</code> las filas con nombres en la lista <code>filas</code> y las columnas con nombres en la lista <code>columnas</code>. Si alguno de los nombres indicados en <code>filas</code> o <code>columnas</code> no exist\u00eda en el DataFrame <code>df</code>, se crean filan o columnas nuevas rellenas con el valor <code>relleno</code>.</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df.reindex(index=[4, 3, 1], columns=['nombre', 'tensi\u00f3n', 'colesterol']))\n</code></pre> <code>output</code> <pre><code>                  nombre  tensi\u00f3n  colesterol\n4   Marisa L\u00f3pez Collado      NaN       148.0\n3    Carmen L\u00f3pez Pinz\u00f3n      NaN       200.0\n1         Rosa D\u00edaz D\u00edaz      NaN       232.0\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#acceso-a-los-elementos-de-un-dataframe","title":"Acceso a los elementos de un DataFrame","text":"<p>El acceso a los datos de un DataFrame se puede hacer a trav\u00e9s de posiciones o trav\u00e9s de los nombres de las filas y columnas.</p>","tags":["Pandas"]},{"location":"python/manual/pandas/#accesos-mediante-posiciones","title":"Accesos mediante posiciones","text":"<ul> <li> <p><code>df.iloc[i, j]</code> : Devuelve el elemento que se encuentra en la fila <code>i</code> y la columna <code>j</code> del DataFrame <code>df</code>. Pueden indicarse secuencias de \u00edndices para obtener partes del DataFrame.</p> </li> <li> <p><code>df.iloc[filas, columnas]</code> : Devuelve un DataFrame con los elementos de las filas de la lista <code>filas</code> y de las columnas de la lista <code>columnas</code>.</p> </li> <li> <p><code>df.iloc[i]</code> : Devuelve una serie con los elementos de la fila <code>i</code> del DataFrame <code>df</code>.</p> </li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df.iloc[1, 3]) # output 65\nprint(df.iloc[1, :2])\n</code></pre> <code>output</code> <pre><code>nombre     Rosa D\u00edaz D\u00edaz\nedad                   32\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#acceso-a-los-elementos-mediante-nombres","title":"Acceso a los elementos mediante nombres","text":"<ul> <li><code>df.loc[fila, columna]</code> : Devuelve el elemento que se encuentra en la fila con nombre <code>fila</code> y la columna de con nombre <code>columna</code> del DataFrame <code>df</code>.</li> </ul> <p><code>df.loc[filas, columnas]</code> : Devuelve un DataFrame con los elemento que se encuentra en las filas con los nombres de la lista <code>filas</code> y las columnas con los nombres de la lista <code>columnas</code> del DataFrame <code>df</code>.</p> <ul> <li> <p><code>df[columna]</code> : Devuelve una serie con los elementos de la columna de nombre <code>columna</code> del DataFrame <code>df</code>.</p> </li> <li> <p><code>df.columna</code> : Devuelve una serie con los elementos de la columna de nombre <code>columna</code> del DataFrame <code>df</code>. Es similar al m\u00e9todo anterior pero solo funciona cuando el nombre de la columna no tiene espacios en blanco.</p> </li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df.loc[2, 'colesterol']) # output 191\nprint(df.loc[:3, ('colesterol','peso')])\n</code></pre> <code>output</code> <pre><code>     colesterol    peso\n1         232.0    65.0\n2         191.0     NaN\n3         200.0    65.0\n</code></pre> <pre><code>print(df['colesterol'])\n</code></pre> <code>output</code> <pre><code>0     182.0\n1     232.0\n2     191.0\n3     200.0\n...\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#operaciones-con-las-columnas-de-un-dataframe","title":"Operaciones con las columnas de un DataFrame","text":"","tags":["Pandas"]},{"location":"python/manual/pandas/#anadir-columnas-a-un-dataframe","title":"A\u00f1adir columnas a un DataFrame","text":"<p>El procedimiento para a\u00f1adir una nueva columna a un DataFrame es similar al de a\u00f1adir un nuevo par a un diccionario, pero pasando los valores de la columna en una lista o serie.</p> <ul> <li> <p><code>d[nombre] = lista</code>: A\u00f1ade al DataFrame <code>df</code> una nueva columna con el nombre <code>nombre</code> y los valores de la lista <code>lista</code>. La lista debe tener el mismo tama\u00f1o que el n\u00famero de filas de <code>df</code>.</p> </li> <li> <p><code>d[nombre] = serie</code>: A\u00f1ade al DataFrame <code>df</code> una nueva columna con el nombre <code>nombre</code> y los valores de la serie <code>serie</code>. Si el tama\u00f1o de la serie es menor que el n\u00famero de filas de <code>df</code> se rellena con valores <code>NaN</code> mientras que si es mayor se recorta.</p> </li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\ndf['diabetes'] = pd.Series([False, False, True, False, True])\nprint(df)\n</code></pre> <code>output</code> <pre><code>                              nombre  edad sexo    peso  altura    colesterol diabetes\n0       Jos\u00e9 Luis Mart\u00ednez Izquierdo    18    H    85.0    1.79         182.0    False\n1                     Rosa D\u00edaz D\u00edaz    32    M    65.0    1.73         232.0    False\n2              Javier Garc\u00eda S\u00e1nchez    24    H   NaN.0    1.81         191.0     True\n3                Carmen L\u00f3pez Pinz\u00f3n    35    M    65.0    1.70         200.0    False\n4               Marisa L\u00f3pez Collado    46    M    51.0    1.58         148.0     True\n5                  Antonio Ruiz Cruz    68    H    66.0    1.74         249.0      NaN\n...\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#operaciones-sobre-columnas","title":"Operaciones sobre columnas","text":"<p>Puesto que los datos de una misma columna de un DataFrame son del mismo tipo, es f\u00e1cil aplicar la misma operaci\u00f3n a todos los elementos de la columna.</p> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df['altura']*100)\n</code></pre> <code>output</code> <pre><code>0     179\n1     173\n2     181\n...\n</code></pre> <pre><code>print(df['sexo']=='M')\n</code></pre> <code>output</code> <pre><code>0     False\n1      True\n2     False\n...\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#aplicar-funciones-a-columnas","title":"Aplicar funciones a columnas","text":"<p>Para aplicar funciones a todos los elementos de una columna se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>df[columna].apply(f)</code> : Devuelve una serie con los valores que resulta de aplicar la funci\u00f3n <code>f</code> a los elementos de la columna con nombre <code>columna</code> del DataFrame <code>df</code>.</li> </ul> <p><pre><code>import pandas as pd\nfrom math import log\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df['altura'].apply(log))\n</code></pre> <code>output</code> <pre><code>0     0.582216\n1     0.548121\n2     0.593327\n...\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#convertir-una-columna-al-tipo-datetime","title":"Convertir una columna al tipo <code>datetime</code>","text":"<p>A menudo una columna contiene cadenas que representan fechas. Para convertir estas cadenas al tipo <code>datetime</code> se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>to_datetime(columna, formato)</code>: Devuelve la serie que resulta de convertir las cadenas de la columna con el nombre <code>columna</code> en fechas del tipo <code>datetime</code> con el formado especificado en <code>formato</code>. (Ver librer\u00eda datetime)</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.DataFrame({'Name': ['Mar\u00eda', 'Carlos', 'Carmen'], 'Nacimiento':['05-03-2000', '20-05-2001', '10-12-1999']})\nprint(pd.to_datetime(df.Nacimiento, format = '%d-%m-%Y'))\n</code></pre> <code>output</code> <pre><code>0   2000-03-05\n1   2001-05-20\n2   1999-12-10\nName: Nacimiento, dtype: datetime64[ns]\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#resumen-descriptivo-de-un-dataframe","title":"Resumen descriptivo de un DataFrame","text":"<p>Al igual que para las series, los siguientes m\u00e9todos permiten resumir la informaci\u00f3n de un DataFrame por columnas:</p> <ul> <li><code>df.count()</code> : Devuelve una serie con el n\u00famero de elementos que no son nulos ni <code>NaN</code> en cada columna del DataFrame <code>df</code>.</li> <li><code>df.sum()</code> : Devuelve una serie con la suma de los datos de las columnas del DataFrame <code>df</code> cuando los datos son de un tipo num\u00e9rico, o la concatenaci\u00f3n de ellos cuando son del tipo cadena <code>str</code>.</li> <li><code>df.cumsum()</code> : Devuelve un DataFrame con la suma acumulada de los datos de las columnas del DataFrame <code>df</code> cuando los datos son de un tipo num\u00e9rico.</li> <li><code>df.min()</code> : Devuelve una serie con los menores de los datos de las columnas del DataFrame <code>df</code>.</li> <li><code>df.max()</code> : Devuelve una serie con los mayores de los datos de las columnas del DataFrame <code>df</code>.</li> <li><code>df.mean()</code> : Devuelve una serie con las medias de los datos de las columnas num\u00e9ricas del DataFrame <code>df</code>.</li> <li><code>df.var()</code> : Devuelve una serie con las varianzas de los datos de las columnas num\u00e9ricas del DataFrame <code>df</code>.</li> <li><code>df.std()</code> : Devuelve una serie con las desviaciones t\u00edpicas de los datos de las columnas num\u00e9ricas del DataFrame <code>df</code>.</li> <li><code>df.cov()</code> : Devuelve un DataFrame con las covarianzas de los datos de las columnas num\u00e9ricas del DataFrame <code>df</code>.</li> <li><code>df.corr()</code> : Devuelve un DataFrame con los coeficientes de correlaci\u00f3n de Pearson de los datos de las columnas num\u00e9ricas del DataFrame <code>df</code>.</li> <li><code>df.describe(include = tipo)</code> : Devuelve un DataFrame con un resumen estad\u00edstico de las columnas del DataFrame <code>df</code> del tipo <code>tipo</code>. Para los datos num\u00e9ricos (<code>number</code>) se calcula la media, la desviaci\u00f3n t\u00edpica, el m\u00ednimo, el m\u00e1ximo y los cuartiles. Para los datos no num\u00e9ricos (<code>object</code>) se calcula el n\u00famero de valores, el n\u00famero de valores distintos, la moda y su frecuencia. Si no se indica el tipo solo se consideran las columnas num\u00e9ricas.</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\ndf.edad.count()  # Tama\u00f1o muestral\n14\nprint(df.edad.mean())  # Media # output 38.214285714285715\nprint(df.edad.var())  # Varianza # output 244.02747252747255\nprint(df.edad.std())  # Desviaci\u00f3n t\u00edpica # output 15.62137870123737\n</code></pre> <pre><code>df.cov()  # Matriz de covarianzas\n</code></pre> <code>output</code> <pre><code>                  edad        peso    altura   colesterol\nedad        244.027473  -69.891026 -0.326593   279.717949\npeso        -69.891026  260.076923  1.764615    -2.424242\naltura       -0.326593    1.764615  0.013229     0.563269\ncolesterol  279.717949   -2.424242  0.563269  1587.858974\n</code></pre> <pre><code>df.corr()  # Matriz de correlaci\u00f3n\n</code></pre> <code>output</code> <pre><code>                edad      peso    altura  colesterol\nedad        1.000000 -0.276185 -0.181774    0.452391\npeso       -0.276185  1.000000  0.918984   -0.003621\naltura     -0.181774  0.918984  1.000000    0.122694\ncolesterol  0.452391 -0.003621  0.122694    1.000000\n</code></pre> <pre><code>print(df.describe())  # Resumen descriptivo\n</code></pre> <code>output</code> <pre><code>            edad        peso     altura  colesterol\ncount  14.000000   13.000000  14.000000   13.000000\nmean   38.214286   70.923077   1.768571  220.230769\nstd    15.621379   16.126901   0.115016   39.847948\nmin    18.000000   51.000000   1.580000  148.000000\n25%    24.750000   61.000000   1.705000  194.000000\n50%    35.000000   65.000000   1.755000  210.000000\n75%    49.750000   78.000000   1.840000  249.000000\nmax    68.000000  109.000000   1.980000  280.000000\n</code></pre> <pre><code>print(df.describe(include='object'))\n</code></pre> <code>output</code> <pre><code>                          nombre sexo\ncount                         14   14\nunique                        14    2\ntop      Antonio Fern\u00e1ndez Oca\u00f1a    H\nfreq                           1    8\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#eliminar-columnas-de-un-dataframe","title":"Eliminar columnas de un DataFrame","text":"<p>Para eliminar columnas de un DataFrame se utilizan los siguientes m\u00e9todos:</p> <ul> <li> <p><code>del d[nombre]</code> : Elimina la columna con nombre <code>nombre</code> del DataFrame <code>df</code>.</p> </li> <li> <p><code>df.pop(nombre)</code> : Elimina la columna con nombre <code>nombre</code> del DataFrame <code>df</code> y la devuelve como una serie.</p> </li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nedad = df.pop('edad')\nprint(df)\n</code></pre> <code>output</code> <pre><code>                              nombre    sexo  peso  altura    colesterol\n0       Jos\u00e9 Luis Mart\u00ednez Izquierdo     H    85.0    1.79         182.0\n1                     Rosa D\u00edaz D\u00edaz     M    65.0    1.73         232.0\n2              Javier Garc\u00eda S\u00e1nchez     H     \nNaN    1.81         191.0\n...\n</code></pre> <pre><code>print(edad)\n</code></pre> <code>output</code> <pre><code>0     18\n1     32\n2     24\n...\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#operaciones-con-las-filas-de-un-dataframe","title":"Operaciones con las filas de un DataFrame","text":"","tags":["Pandas"]},{"location":"python/manual/pandas/#anadir-una-fila-a-un-dataframe","title":"A\u00f1adir una fila a un DataFrame","text":"<p>Para a\u00f1adir una fila a un DataFrame se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>df.append(serie, ignore_index=True)</code> : Devuelve el DataFrame que resulta de a\u00f1adir una fila al DataFrame <code>df</code> con los valores de la serie <code>serie</code>. Los nombres del \u00edndice de la serie deben corresponderse con los nombres de las columnas de <code>df</code>. Si no se pasa el par\u00e1metro <code>ignore_index</code> entonces debe pasarse el par\u00e1metro <code>name</code> a la serie, donde su argumento ser\u00e1 el nombre de la nueva fila.</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\ndf = df.append(pd.Series(['Carlos Rivas', 28, 'H', 89.0, 1.78, 245.0], index=['nombre','edad','sexo','peso','altura','colesterol']), ignore_index=True)\nprint(df.tail())\n</code></pre> <code>output</code> <pre><code>                              nombre  edad sexo    peso  altura    colesterol\n10             Macarena \u00c1lvarez Luna    53    M    55.0    1.62         262.0\n11        Jos\u00e9 Mar\u00eda de la Gu\u00eda Sanz    58    H    78.0    1.87         198.0\n12   Miguel Angel Cuadrado Guti\u00e9rrez    27    H   109.0    1.98         210.0\n13             Carolina Rubio Moreno    20    M    61.0    1.77         194.0\n14                      Carlos Rivas    28    H    89.0    1.78         245.0\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#eliminar-filas-de-un-dataframe","title":"Eliminar filas de un DataFrame","text":"<p>Para eliminar filas de un DataFrame se utilizan el siguiente m\u00e9todo:</p> <ul> <li><code>df.drop(filas)</code> : Devuelve el DataFrame que resulta de eliminar las filas con los nombres indicados en la lista <code>filas</code> del DataFrame <code>df</code>.</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df.drop([1, 3]))\n</code></pre> <code>output</code> <pre><code>                              nombre  edad sexo   peso  altura  colesterol\n0       Jos\u00e9 Luis Mart\u00ednez Izquierdo    18    H   85.0    1.79       182.0\n2              Javier Garc\u00eda S\u00e1nchez    24    H    NaN    1.81       191.0\n4               Marisa L\u00f3pez Collado    46    M   51.0    1.58       148.0\n...\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#filtrar-las-filas-de-un-dataframe","title":"Filtrar las filas de un DataFrame","text":"<p>Una operaci\u00f3n bastante com\u00fan con un DataFrame es obtener las filas que cumplen una determinada condici\u00f3n.</p> <ul> <li><code>df[condicion]</code> : Devuelve un DataFrame con las filas del DataFrame <code>df</code> que se corresponden con el valor <code>True</code> de la lista booleana <code>condicion</code>. <code>condicion</code> debe ser una lista de valores booleanos de la misma longitud que el n\u00famero de filas del DataFrame.</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df[(df['sexo']=='H') &amp; (df['colesterol'] &gt; 260)])\n</code></pre> <code>output</code> <pre><code>                     nombre  edad sexo    peso  altura    colesterol\n6   Antonio Fern\u00e1ndez Oca\u00f1a    51    H    62.0    1.72         276.0\n9   Santiago Reillo Manzano    46    H    75.0    1.85         280.0\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#ordenar-un-dataframe","title":"Ordenar un DataFrame","text":"<p>Para ordenar un DataFrame de acuerdo a los valores de una determinada columna se utilizan los siguientes m\u00e9todos:</p> <ul> <li> <p><code>df.sort_values(columna, ascending=booleano</code>) : Devuelve el DataFrame que resulta de ordenar las filas del DataFrame <code>df</code> seg\u00fan los valores del la columna con nombre <code>columna</code>. Si argumento del par\u00e1metro <code>ascending</code> es <code>True</code> el orden es creciente y si es <code>False</code> decreciente.</p> </li> <li> <p><code>df.sort_index(ascending=booleano</code>) : Devuelve el DataFrame que resulta de ordenar las filas del DataFrame <code>df</code> seg\u00fan los nombres de las filas. Si el argumento del par\u00e1metro <code>ascending</code> es <code>True</code> el orden es creciente y si es <code>False</code> decreciente.</p> </li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df.sort_values('colesterol'))\n</code></pre> <code>output</code> <pre><code>                              nombre  edad sexo   peso  altura  colesterol\n4               Marisa L\u00f3pez Collado    46    M   51.0    1.58       148.0\n0       Jos\u00e9 Luis Mart\u00ednez Izquierdo    18    H   85.0    1.79       182.0\n2              Javier Garc\u00eda S\u00e1nchez    24    H    NaN    1.81       191.0\n13             Carolina Rubio Moreno    20    M   61.0    1.77       194.0\n...\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#eliminar-las-filas-con-dados-desconocidos-en-un-dataframe","title":"Eliminar las filas con dados desconocidos en un DataFrame","text":"<p>Para eliminar las filas de un DataFrame que contienen datos desconocidos <code>NaN</code> o nulos <code>None</code> se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>s.dropna(subset=columnas)</code> : Devuelve el DataFrame que resulta de eliminar las filas que contienen alg\u00fan dato desconocido o nulo en las columnas de la lista <code>columna</code> del DataFrame <code>df</code>. Si no se pasa un argumento al par\u00e1metro <code>subset</code> se aplica a todas las columnas del DataFrame.</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df.dropna())\n</code></pre> <code>output</code> <pre><code>                              nombre  edad sexo   peso  altura  colesterol\n0       Jos\u00e9 Luis Mart\u00ednez Izquierdo    18    H   85.0    1.79       182.0\n1                     Rosa D\u00edaz D\u00edaz    32    M   65.0    1.73       232.0\n3                Carmen L\u00f3pez Pinz\u00f3n    35    M   65.0    1.70       200.0\n4               Marisa L\u00f3pez Collado    46    M   51.0    1.58       148.0\n...\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#agrupacion-de-un-dataframe","title":"Agrupaci\u00f3n de un DataFrame","text":"<p>En muchas aplicaciones es \u00fatil agrupar los datos de un DataFrame de acuerdo a los valores de una o varias columnas (categor\u00edas), como por ejemplo el sexo o el pa\u00eds.</p> <p></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#dividir-un-dataframe-en-grupos","title":"Dividir un DataFrame en grupos","text":"<p>Para dividir un DataFrame en grupos se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>df.groupby(columnas).groups</code> : Devuelve un diccionario con cuyas claves son las tuplas que resultan de todas las combinaciones de los valores de las columnas con nombres en la lista <code>columnas</code>, y valores las listas de los nombres de las filas que contienen esos valores en las correspondientes columnas del DataFrame <code>df</code>.</li> </ul> <pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df.groupby('sexo').groups) # output {'H': Int64Index([0, 2, 5, 6, 8, 9, 11, 12], dtype='int64'), 'M': Int64Index([1, 3, 4, 7, 10, 13], dtype='int64')}\nprint(df.groupby(['sexo','edad']).groups) # output {('H', 18): Int64Index([0], dtype='int64'), ('H', 24): Int64Index([2], dtype='int64'), ('H', 27): Int64Index([12], dtype='int64'), ('H', 35): Int64Index([8], dtype='int64'), ('H', 46): Int64Index([9], dtype='int64'), ('H', 51): Int64Index([6], dtype='int64'), ('H', 58): Int64Index([11], dtype='int64'), ('H', 68): Int64Index([5], dtype='int64'), ('M', 20): Int64Index([13], dtype='int64'), ('M', 22): Int64Index([7], dtype='int64'), ('M', 32): Int64Index([1], dtype='int64'), ('M', 35): Int64Index([3], dtype='int64'), ('M', 46): Int64Index([4], dtype='int64'), ('M', 53): Int64Index([10], dtype='int64')}\n</code></pre> <p>Para obtener un grupo concreto se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>df.groupby(columnas).get_group(valores)</code> : Devuelve un DataFrame con las filas del DataFrame <code>df</code> que cumplen que las columnas de la lista <code>columnas</code> presentan los valores de la tupla <code>valores</code>. La lista <code>columnas</code> y la tupla <code>valores</code> deben tener el mismo tama\u00f1o.</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\nprint(df.groupby('sexo').get_group('M'))\n</code></pre> <code>output</code> <pre><code>                    nombre  edad sexo    peso   altura    colesterol\n1           Rosa D\u00edaz D\u00edaz    32    M    65.0     1.73         232.0\n3      Carmen L\u00f3pez Pinz\u00f3n    35    M    65.0     1.70         200.0\n4     Marisa L\u00f3pez Collado    46    M    51.0     1.58         148.0\n7    Pilar Mart\u00edn Gonz\u00e1lez    22    M    60.0     1.66           NaN\n10   Macarena \u00c1lvarez Luna    53    M    55.0     1.62         262.0\n13   Carolina Rubio Moreno    20    M    61.0     1.77         194.0\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#aplicar-una-funcion-de-agregacion-por-grupos","title":"Aplicar una funci\u00f3n de agregaci\u00f3n por grupos","text":"<p>Una vez dividido el DataFame en grupos, es posible aplicar funciones de agregaci\u00f3n a cada grupo mediante el siguiente m\u00e9todo:</p> <ul> <li><code>df.groupby(columnas).agg(funciones)</code> : Devuelve un DataFrame con el resultado de aplicar las funciones de agregaci\u00f3n de la lista <code>funciones</code> a cada uno de los DataFrames que resultan de dividir el DataFrame seg\u00fan las columnas de la lista <code>columnas</code>.</li> </ul> <p>Una funci\u00f3n de agregaci\u00f3n toma como argumento una lista y devuelve una \u00fanico valor. Algunas de las funciones de agregaci\u00f3n m\u00e1s comunes son:</p> <ul> <li><code>np.min</code> : Devuelve el m\u00ednimo de una lista de valores.</li> <li><code>np.max</code> : Devuelve el m\u00e1ximo de una lista de valores.</li> <li><code>np.count_nonzero</code> : Devuelve el n\u00famero de valores no nulos de una lista de valores.</li> <li><code>np.sum</code> : Devuelve la suma de una lista de valores.</li> <li><code>np.mean</code> : Devuelve la media de una lista de valores.</li> <li><code>np.std</code> : Devuelve la desviaci\u00f3n t\u00edpica de una lista de valores.</li> </ul> <p><pre><code>import pandas as pd\ndf = pd.read_csv(\n'https://raw.githubusercontent.com/jorgelgpz/cursos/main/datos/python/colesterol.csv')\n\nimport numpy as np\nprint(df.groupby('sexo').agg(np.mean))\n</code></pre> <code>output</code> <pre><code>           edad       peso    altura  colesterol\nsexo                                            \nH     40.875000  80.714286  1.837500     228.375\nM     34.666667  59.500000  1.676667     207.200\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#reestructurar-un-dataframe","title":"Reestructurar un DataFrame","text":"<p>A menudo la disposici\u00f3n de los datos en un DataFrame no es la adecuada para su tratamiento y es necesario reestructurar el DataFrame. Los datos que contiene un DataFrame pueden organizarse en dos formatos: ancho y largo.</p> <p></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#convertir-un-dataframe-a-formato-largo","title":"Convertir un DataFrame a formato largo","text":"<p>Para convertir un DataFrame de formato ancho a formato largo (columnas a filas) se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>df.melt(id_vars=id-columnas, value_vars=columnas, var_name=nombre-columnas, var_value=nombre-valores)</code> : Devuelve el DataFrame que resulta de convertir el DataFrame <code>df</code> de formato ancho a formato largo. Todas las columnas de lista <code>columnas</code> se reestructuran en dos nuevas columnas con nombres <code>nombre-columnas</code> y <code>nombre-valores</code> que contienen los nombres de las columnas originales y sus valores, respectivamente. Las columnas en la lista <code>id-columnas</code> se mantienen sin reestructurar. Si no se pasa la lista <code>columnas</code> entonces se reestructuran todas las columnas excepto las columnas de la lista <code>id-columnas</code>.</li> </ul> <p><pre><code>import pandas as pd\ndatos = {'nombre':['Mar\u00eda', 'Luis', 'Carmen'],\n'edad':[18, 22, 20],\n'Matem\u00e1ticas':[8.5, 7, 3.5],\n'Econom\u00eda':[8, 6.5, 5],\n'Programaci\u00f3n':[6.5, 4, 9]}\ndf = pd.DataFrame(datos)\ndf1 = df.melt(id_vars=['nombre', 'edad'], var_name='asignatura', value_name='nota')\nprint(df1)\n</code></pre> <code>output</code> <pre><code>   nombre  edad    asignatura  nota\n0   Mar\u00eda    18   Matem\u00e1ticas   8.5\n1    Luis    22   Matem\u00e1ticas   7.0\n2  Carmen    20   Matem\u00e1ticas   3.5\n3   Mar\u00eda    18      Econom\u00eda   8.0\n4    Luis    22      Econom\u00eda   6.5\n5  Carmen    20      Econom\u00eda   5.0\n6   Mar\u00eda    18  Programaci\u00f3n   6.5\n7    Luis    22  Programaci\u00f3n   4.0\n8  Carmen    20  Programaci\u00f3n   9.0\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#convertir-un-dataframe-a-formato-ancho","title":"Convertir un DataFrame a formato ancho","text":"<p>Para convertir un DataFrame de formato largo a formato ancho (filas a columnas) se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>df.pivot(index=filas, columns=columna, values=valores)</code> : Devuelve el DataFrame que resulta de convertir el DataFrame <code>df</code> de formato largo a formato ancho. Se crean tantas columnas nuevas como valores distintos haya en la columna <code>columna</code>. Los nombres de estas nuevas columnas son los valores de la columna <code>columna</code> mientras que sus valores se toman de la columna <code>valores</code>. Los nombres del \u00edndice del nuevo DataFrame se toman de los valores de la columna <code>filas</code>.</li> </ul> <p><pre><code># Continuaci\u00f3n del c\u00f3digo anterior\nprint(df1.pivot(index='nombre', columns='asignatura', values='nota'))\n</code></pre> <code>output</code> <pre><code>asignatura  Econom\u00eda  Matem\u00e1ticas  Programaci\u00f3n\nnombre                                  \nCarmen           5.0          3.5           9.0\nLuis             6.5          7.0           4.0\nMar\u00eda            8.0          8.5           6.5\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#combinar-varios-dataframes","title":"Combinar varios DataFrames","text":"<p>Dos o m\u00e1s DataFrames pueden combinarse en otro DataFrame. La combinaci\u00f3n puede ser de varias formas: </p> <ul> <li>Concatenaci\u00f3n: Combinaci\u00f3n de varios DataFrames concatenando sus filas o columnas.</li> <li>Mezcla: Combinaci\u00f3n de varios DataFrames usando columnas o \u00edndices comunes.</li> </ul>","tags":["Pandas"]},{"location":"python/manual/pandas/#concatenacion-de-dataframes","title":"Concatenaci\u00f3n de DataFrames","text":"<ul> <li> <p>Concatenaci\u00f3n de filas. Las filas de los DataFrames se concatenan unas a continuaci\u00f3n de las otras para formar el nuevo DataFrame. Para ello es necesario que los DataFrames que se combinen tengan el mismo \u00edndice de columnas.</p> <p></p> </li> <li> <p>Concatenaci\u00f3n de columnas. Las columnas de los DataFrames se concatenan unas a continuaci\u00f3n de las otras para formar el nuevo DataFrame. Para ello es necesario que los DataFrames que se combinen tengan el mismo \u00edndice de filas.</p> <p></p> </li> </ul> <p>Para concatenar dos o m\u00e1s DataFrames se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>df.concat(dataframes, axis = eje)</code>: Devuelve el DataFrame que resulta de concatenar los DataFrames de la lista <code>dataframes</code>. Si <code>eje</code> es 0 (valor por defecto) la concatenaci\u00f3n se realiza por filas, y si <code>eje</code> es 1 se realiza por columnas.</li> </ul> <p>Si los DataFrames que se concatenan por filas no tienen el mismo \u00edndice de columnas, el DataFrame resultante incluir\u00e1 todas las columnas existentes en los DataFrames y rellenar\u00e1 con valores <code>NaN</code> los datos no disponibles. Si los DataFrames que se concatenan por columnas no tienen el mismo \u00edndice de filas, el DataFrame resultante incluir\u00e1 todas las filas existentes en los DataFrames y rellenar\u00e1 con valores <code>NaN</code> los datos no disponibles.</p> <p><pre><code>import pandas as pd\ndf1 = pd.DataFrame({\"Nombre\":[\"Carmen\", \"Luis\"], \n\"Sexo\":[\"Mujer\", \"Hombre\"], \"Edad\":[22, 18]}).set_index(\"Nombre\")\ndf2 = pd.DataFrame({\"Nombre\":[\"Mar\u00eda\", \"Pedro\"], \n\"Sexo\":[\"Mujer\", \"Hombre\"], \"Edad\":[25, 30]}).set_index(\"Nombre\")\ndf = pd.concat([df1, df2])\ndf\n</code></pre> <code>output</code> <pre><code>          Sexo  Edad\nNombre              \nCarmen   Mujer    22\nLuis    Hombre    18\nMar\u00eda    Mujer    25\nPedro   Hombre    30\n</code></pre></p> <p><pre><code>import pandas as pd\ndf1 = pd.DataFrame({\"Nombre\":[\"Carmen\", \"Luis\", \"Mar\u00eda\"], \n\"Sexo\":[\"Mujer\", \"Hombre\", \"Mujer\"]}).set_index(\"Nombre\")\ndf2 = pd.DataFrame({\"Nombre\":[\"Carmen\", \"Luis\", \"Mar\u00eda\"], \n\"Edad\":[22, 18, 25]}).set_index(\"Nombre\")\ndf = pd.concat([df1, df2], axis = 1)\ndf\n</code></pre> <code>output</code> <pre><code>          Sexo  Edad\nNombre              \nCarmen   Mujer    22\nLuis    Hombre    18\nMar\u00eda    Mujer    25\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/pandas/#mezcla-de-dataframes","title":"Mezcla de DataFrames","text":"<p>La mezcla de DataFrames permite integrar filas de dos DataFrames que contienen informaci\u00f3n en com\u00fan en una o varias columnas o \u00edndices que se conocen como clave.</p> <p>Para mezclar dos DataFrames se utiliza el siguiente m\u00e9todo:</p> <ul> <li><code>df.merge(df1, df2, on = clave, how = tipo)</code>: Devuelve el DataFrame que resulta de mezclar el DataFrame <code>df2</code> con el DataFrame <code>df1</code>, usando como claves las columnas de la lista <code>clave</code> y siguiendo el m\u00e9todo de mezcla indicado por <code>tipo</code>. </li> </ul> <p>El tipo de mezcla puede ser </p> <ul> <li><code>\"inner\"</code> (por defecto): El DataFrame resultante solo contiene las filas cuyos valores en la clave est\u00e1n en los dos DataFrames. Es equivalente a la intersecci\u00f3n de conjuntos.</li> </ul> <p><pre><code>import pandas as pd\ndf1 = pd.DataFrame({\"Nombre\":[\"Carmen\", \"Luis\", \"Mar\u00eda\"],  \"Sexo\":[\"Mujer\", \"Hombre\", \"Mujer\"]})\ndf2 = pd.DataFrame({\"Nombre\":[\"Mar\u00eda\", \"Pedro\", \"Luis\"], \"Edad\":[25, 30, 18]})\ndf = pd.merge(df1, df2, on=\"Nombre\")\nprint(df)\n</code></pre> <code>output</code> <pre><code>      Nombre    Sexo  Edad\n    0   Luis  Hombre    18\n    1  Mar\u00eda   Mujer    25\n</code></pre></p> <ul> <li><code>\"outer\"</code>: El DataFrame resultante contiene todas las filas de los dos DataFrames. Si una fila de un DataFrame no puede emparejarse con otra los mismos valores en la clave en el otro DataFrame, la fila se a\u00f1ade igualmente al DataFrame resultante rellenando las columnas del otro DataFrame con el valor <code>NaN</code>. Es equivalente a la uni\u00f3n de conjuntos.</li> </ul> <p><pre><code>import pandas as pd\ndf1 = pd.DataFrame({\"Nombre\":[\"Carmen\", \"Luis\", \"Mar\u00eda\"],  \"Sexo\":[\"Mujer\", \"Hombre\", \"Mujer\"]})\ndf2 = pd.DataFrame({\"Nombre\":[\"Mar\u00eda\", \"Pedro\", \"Luis\"], \"Edad\":[25, 30, 18]})\ndf = pd.merge(df1, df2, on=\"Nombre\", how=\"outer\")\nprint(df)\n</code></pre> <code>output</code> <pre><code>       Nombre    Sexo  Edad\n    0  Carmen   Mujer   NaN\n    1    Luis  Hombre  18.0\n    2   Mar\u00eda   Mujer  25.0\n    3   Pedro     NaN  30.0\n</code></pre></p> <ul> <li><code>\"left\"</code>: El DataFrame resultante contiene todas las filas del primer DataFrame y descarta las filas del segundo DataFrame que no pueden emparejarse con alguna fila del primer DataFrame a trav\u00e9s de la clave.</li> </ul> <p><pre><code>import pandas as pd\ndf1 = pd.DataFrame({\"Nombre\":[\"Carmen\", \"Luis\", \"Mar\u00eda\"],  \"Sexo\":[\"Mujer\", \"Hombre\", \"Mujer\"]})\ndf2 = pd.DataFrame({\"Nombre\":[\"Mar\u00eda\", \"Pedro\", \"Luis\"], \"Edad\":[25, 30, 18]})\ndf = pd.merge(df1, df2, on=\"Nombre\", how=\"left\")\nprint(df)\n</code></pre> <code>output</code> <pre><code>       Nombre    Sexo  Edad\n    0  Carmen   Mujer   NaN\n    1    Luis  Hombre  18.0\n    2   Mar\u00eda   Mujer  25.0\n</code></pre></p> <ul> <li><code>\"right\"</code>: El DataFrame resultante contiene todas las filas del segundo DataFrame y descarta las filas del primer DataFrame que no pueden emparejarse con alguna fila del segundo DataFrame a trav\u00e9s de la clave.</li> </ul> <p><pre><code>import pandas as pd\ndf1 = pd.DataFrame({\"Nombre\":[\"Carmen\", \"Luis\", \"Mar\u00eda\"],  \"Sexo\":[\"Mujer\", \"Hombre\", \"Mujer\"]})\ndf2 = pd.DataFrame({\"Nombre\":[\"Mar\u00eda\", \"Pedro\", \"Luis\"], \"Edad\":[25, 30, 18]})\ndf = pd.merge(df1, df2, on=\"Nombre\", how=\"right\")\nprint(df)\n</code></pre> <code>output</code> <pre><code>      Nombre    Sexo  Edad\n    0  Mar\u00eda   Mujer    25\n    1  Pedro     NaN    30\n    2   Luis  Hombre    18\n</code></pre></p>","tags":["Pandas"]},{"location":"python/manual/programacion-funcional/","title":"Programaci\u00f3n funcional","text":"","tags":["Programaci\u00f3n funcional"]},{"location":"python/manual/programacion-funcional/#programacion-funcional","title":"Programaci\u00f3n funcional","text":"<p>En Python las funciones son objetos de primera clase, es decir, que pueden pasarse como argumentos de una funci\u00f3n, al igual que el resto de los tipos de datos.</p> <pre><code>def aplica(funcion, argumento):\n    return funcion(argumento)\n\ndef cuadrado(n):\n    return n*n\n\ndef cubo(n):\n    return n**3\n\naplica(cuadrado, 5) # output 25\naplica(cubo, 5) # output 125\n</code></pre>","tags":["Programaci\u00f3n funcional"]},{"location":"python/manual/programacion-funcional/#funciones-anonimas-lambda","title":"Funciones an\u00f3nimas (<code>lambda</code>)","text":"<p>Existe un tipo especial de funciones que no tienen nombre asociado y se conocen como funciones an\u00f3nimas o funciones lambda.</p> <p>La sintaxis para definir una funci\u00f3n an\u00f3nima es</p> <p><code>lambda &lt;par\u00e1metros&gt; : &lt;expresi\u00f3n&gt;</code></p> <p>Estas funciones se suelen asociar a una variable o par\u00e1metro desde la que hacer la llamada.</p> <pre><code>area = lambda base, altura : base * altura\narea(4, 5) # output 10\n</code></pre>","tags":["Programaci\u00f3n funcional"]},{"location":"python/manual/programacion-funcional/#aplicar-una-funcion-a-todos-los-elementos-de-una-coleccion-iterable-map","title":"Aplicar una funci\u00f3n a todos los elementos de una colecci\u00f3n iterable (<code>map</code>)","text":"<p><code>map(f, c)</code> : Devuelve una objeto iterable con los resultados de aplicar la funci\u00f3n <code>f</code> a los elementos de la colecci\u00f3n <code>c</code>. Si la funci\u00f3n <code>f</code> requiere <code>n</code> argumentos entonces deben pasarse <code>n</code> colecciones con los argumentos. Para convertir el objeto en una lista, tupla o diccionario hay que aplicar expl\u00edcitamente las funciones <code>list()</code>, <code>tuple()</code> o <code>dic()</code> respectivamente.</p> <pre><code>def cuadrado(n):\n    return n * n\n\nresultado = list(map(cuadrado, [1, 2, 3]))\nprint(resultado) # output [1, 4, 9]\n</code></pre> <pre><code>def rectangulo(a, b):\n    return a * b\n\nresultado = tuple(map(rectangulo, (1, 2, 3), (4, 5, 6)))\nprint(resultado) # output (4, 10, 18)\n</code></pre>","tags":["Programaci\u00f3n funcional"]},{"location":"python/manual/programacion-funcional/#filtrar-los-elementos-de-una-coleccion-iterable-filter","title":"Filtrar los elementos de una colecci\u00f3n iterable (filter)","text":"<p><code>filter(f, c)</code> : Devuelve una objeto iterable con los elementos de la colecci\u00f3n <code>c</code> que devuelven <code>True</code> al aplicarles la funci\u00f3n <code>f</code>. Para convertir el objeto en una lista, tupla o diccionario hay que aplicar expl\u00edcitamente las funciones <code>list()</code>, <code>tuple()</code> o <code>dic()</code> respectivamente.</p> <p> <code>f</code> debe ser una funci\u00f3n que recibe un argumento y devuelve un valor booleano.</p> <pre><code>def par(n):\n    return n % 2 == 0\n\nresultado = list(filter(par, range(10)))\nprint(resultado) # output [0, 2, 4, 6, 8]\n</code></pre>","tags":["Programaci\u00f3n funcional"]},{"location":"python/manual/programacion-funcional/#combinar-los-elementos-de-varias-colecciones-iterables-zip","title":"Combinar los elementos de varias colecciones iterables (<code>zip</code>)","text":"<p><code>zip(c1, c2, ...)</code> : Devuelve un objeto iterable cuyos elementos son tuplas formadas por los elementos que ocupan la misma posici\u00f3n en las colecciones <code>c1</code>, <code>c2</code>, etc. El n\u00famero de elementos de las tuplas es el n\u00famero de colecciones que se pasen. Para convertir el objeto en una lista, tupla o diccionario hay que aplicar expl\u00edcitamente las funciones <code>list()</code>, <code>tuple()</code> o <code>dic()</code> respectivamente.</p> <pre><code>asignaturas = ['Matem\u00e1ticas', 'F\u00edsica', 'Qu\u00edmica', 'Econom\u00eda']\nnotas = [6.0, 3.5, 7.5, 8.0]\nresultado_1_asignaturas = list(zip(asignaturas, notas))\nprint(resultado_1_asignaturas) # output [('Matem\u00e1ticas', 6.0), ('F\u00edsica', 3.5), ('Qu\u00edmica', 7.5), ('Econom\u00eda', 8.0)]\nresultado_2_asignaturas = dict(zip(asignaturas, notas[:3]))\nprint(resultado_2_asignaturas) # output {'Matem\u00e1ticas': 6.0, 'F\u00edsica': 3.5, 'Qu\u00edmica': 7.5}\n</code></pre>","tags":["Programaci\u00f3n funcional"]},{"location":"python/manual/programacion-funcional/#operar-todos-los-elementos-de-una-coleccion-iterable-reduce","title":"Operar todos los elementos de una colecci\u00f3n iterable (<code>reduce</code>)","text":"<p><code>reduce(f, l)</code> : Aplicar la funci\u00f3n <code>f</code> a los dos primeros elementos de la secuencia <code>l</code>. Con el valor obtenido vuelve a aplicar la funci\u00f3n <code>f</code> a ese valor y el siguiente de la secuencia, y as\u00ed hasta que no quedan m\u00e1s elementos en la lista. Devuelve el valor resultado de la \u00faltima aplicaci\u00f3n de la funci\u00f3n <code>f</code>.</p> <p>La funci\u00f3n <code>reduce</code> est\u00e1 definida en el m\u00f3dulo <code>functools</code>.</p> <pre><code>from functools import reduce\ndef producto(n, m):\n    return n * m\n\nresultado = reduce(producto, range(1, 5))\nprint(resultado) # output 24\n</code></pre>","tags":["Programaci\u00f3n funcional"]},{"location":"python/manual/referencias/","title":"Referencias","text":"","tags":[]},{"location":"python/manual/referencias/#referencias","title":"Referencias","text":"","tags":[]},{"location":"python/manual/referencias/#webs","title":"Webs","text":"<ul> <li>Python Sitio web de Python.</li> <li>Repl.it Entorno de desarrollo web para varios lenguajes, incluido Python.</li> <li>Python tutor Sitio web que permite visualizar la ejecuci\u00f3n el c\u00f3digo Python.</li> </ul>","tags":[]},{"location":"python/manual/referencias/#libros-y-manuales","title":"Libros y manuales","text":"<ul> <li>Tutorial de Python Tutorial r\u00e1pido de python.</li> <li>Python para todos Libro de introducci\u00f3n a Python con muchos ejemplos. Es de licencia libre.</li> <li>Python para principiantes Libro de introducci\u00f3n Python que abarca orientaci\u00f3n a objetos. Es de licencia libre.</li> <li>Python crash course Libro de introducci\u00f3n a Python gratuito.</li> <li>Think python 2e. Libro de introducci\u00f3n a Python que abarca tambi\u00e9n algoritmos, estructuras de datos y gr\u00e1ficos. Es de licencia libre.</li> <li>Learning Python Libro de introducci\u00f3n a Python con enfoque de programaci\u00f3n orientada a objetos.</li> </ul>","tags":[]},{"location":"python/manual/referencias/#videos","title":"V\u00eddeos","text":"<ul> <li>Curso \"Python para todos\".</li> </ul>","tags":[]},{"location":"python/manual/tipos-datos-simples/","title":"Tipos de Datos Primitivos Simples","text":"","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#tipos-de-datos-primitivos-simples","title":"Tipos de datos primitivos simples","text":"<ul> <li>N\u00fameros (numbers): Secuencia de d\u00edgitos (pueden incluir el - para negativos y el . para decimales) que representan n\u00fameros. Ejemplo. 0, -1, 3.1415.</li> <li>Cadenas (strings): Secuencia de caracteres alfanum\u00e9ricos que representan texto. Se escriben entre comillas simples o dobles. Ejemplo. 'Hola', \"Adi\u00f3s\".</li> <li>Booleanos (boolean): Contiene \u00fanicamente dos elementos <code>True</code> y <code>False</code> que representan los valores l\u00f3gicos verdadero y falso respectivamente.</li> </ul> <p>Estos datos son inmutables, es decir, su valor es constante y no puede cambiar.</p>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#tipos-de-datos-primitivos-compuestos-contenedores","title":"Tipos de datos primitivos compuestos (contenedores)","text":"<ul> <li>Listas (lists): Colecciones de objetos que representan secuencias ordenadas de objetos de distintos tipos. Se representan con corchetes y los elementos se separan por comas. Ejemplo. [1, \"dos\", [3, 4], True].</li> <li>Tuplas (tuples). Colecciones de objetos que representan secuencias ordenadas de objetos de distintos tipos. A diferencia de las listas son inmutables, es decir, que no cambian durante la ejecuci\u00f3n. Se representan mediante par\u00e9ntesis y los elementos se separan por comas. Ejemplo. (1, 'dos', 3)</li> <li>Diccionarios (dictionaries): Colecciones de objetos con una clave asociada. Se representan con llaves, los pares separados por comas y cada par contiene una clave y un objeto asociado separados por dos puntos. Ejemplo. {'pi':3.1416, 'e':2.718}.</li> </ul>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#clase-de-un-dato-type","title":"Clase de un dato (<code>type()</code>)","text":"<p>La clase a la que pertenece un dato se obtiene con el comando <code>type()</code></p> <pre><code>type(1) # output &lt;class 'int'&gt;\ntype(\"Hola\") # output &lt;class 'str'&gt;\ntype([1, \"dos\", [3, 4], True]) # output &lt;class 'list'&gt;\ntype({'pi':3.1416, 'e':2.718}) # output &lt;class 'dict'&gt;\ntype((1, 'dos', 3)) # output &lt;class 'tuple'&gt;\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#numeros-clases-int-y-float","title":"N\u00fameros (clases <code>int</code> y <code>float</code>)","text":"<p>Secuencia de d\u00edgitos (pueden incluir el - para negativos y el . para decimales) que representan n\u00fameros. Pueden ser enteros (<code>int</code>) o reales (<code>float</code>).</p> <pre><code>type(1) # output &lt;class 'int'&gt;\ntype(-2) # output &lt;class 'int'&gt;\ntype(2.3) # output &lt;class 'float'&gt;\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<ul> <li>Operadores aritm\u00e9ticos: <code>+</code> (suma), <code>-</code> (resta), <code>*</code> (producto), <code>/</code> (cociente), <code>//</code> (cociente divisi\u00f3n entera), <code>%</code> (resto divisi\u00f3n entera), <code>**</code> (potencia).</li> </ul> <p>Orden de prioridad de evaluaci\u00f3n:</p> Orden Operador 1 Funciones predefinidas 2 Potencias 3 Productos y cocientes 4 Sumas y restas <p>Se puede saltar el orden de evaluaci\u00f3n utilizando par\u00e9ntesis <code>( )</code>.</p> <pre><code>2+3 # output 5\n5*-2 # output -10\n5/2 # output 2.5\n5//2 # output 2\n(2+3)**2 # output 25\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#operadores-logicos-con-numeros","title":"Operadores l\u00f3gicos con n\u00fameros","text":"<p>Devuelven un valor l\u00f3gico o booleano.</p> <ul> <li>Operadores l\u00f3gicos: <code>==</code> (igual que), <code>&gt;</code> (mayor que), <code>&lt;</code> (menor que), <code>&gt;=</code> (mayor o igual que), <code>&lt;=</code> (menor o igual que), <code>!=</code> (distinto de).</li> </ul> <pre><code>3==3 # output True\n3.1&lt;=3 # output False\n-1!=1 # output True\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#cadenas-clase-str","title":"Cadenas (clase <code>str</code>)","text":"<p>Secuencia de caracteres alfanum\u00e9ricos que representan texto. Se escriben entre comillas sencillas ' o dobles \".</p> <pre><code>'Python'\n\"123\"\n'True'\n# Cadena vac\u00eda\n''\n# Cadena con un espacio en blanco\n' '\n# Cambio de l\u00ednea\n'\\n'\n# Tabulador\n'\\t'\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#acceso-a-los-elementos-de-una-cadena","title":"Acceso a los elementos de una cadena","text":"<p>Cada car\u00e1cter tiene asociado un \u00edndice que permite acceder a \u00e9l.</p> Cadena <code>P</code> <code>y</code> <code>t</code> <code>h</code> <code>o</code> <code>n</code> \u00cdndice positivo 0 1 2 3 4 5 \u00cdndice negativo -6 -5 -4 -3 -2 -1 <ul> <li><code>c[i]</code> devuelve el car\u00e1cter de la cadena <code>c</code> con el \u00edndice <code>i</code>.</li> </ul> <p> El \u00edndice del primer car\u00e1cter de la cadena es 0.</p> <p>Tambi\u00e9n se pueden utilizar \u00edndices negativos para recorrer la cadena del final al principio.</p> <p> El \u00edndice del \u00faltimo car\u00e1cter de la cadena es -1.</p> <p><pre><code>'Python'[0] # output 'P'\n'Python'[1] # output 'y'\n'Python'[-1] # output 'n'\n'Python'[6]\n</code></pre> <code>output</code> <pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: string index out of range\n</code></pre></p>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#subcadenas","title":"Subcadenas","text":"<ul> <li><code>c[i:j:k]</code> : Devuelve la subcadena de <code>c</code> desde el car\u00e1cter con el \u00edndice <code>i</code> hasta el car\u00e1cter anterior al \u00edndice <code>j</code>, tomando caracteres cada <code>k</code>.</li> </ul> <pre><code>'Python'[1:4] # output 'yth'\n'Python'[1:1] # output ''\n'Python'[2:] # output 'thon'\n'Python'[:-2] # output 'Pyth'\n'Python'[:] # output 'Python'\n'Python'[0:6:2] # output 'Pto'\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#operaciones-con-cadenas","title":"Operaciones con cadenas","text":"<ul> <li><code>c1 + c2</code> : Devuelve la cadena resultado de concatenar las cadenas <code>c1</code> y <code>c2</code>.</li> <li><code>c * n</code> : Devuelve la cadena resultado de concatenar <code>n</code> copias de la cadena <code>c</code>.</li> <li><code>c1 in c2</code> : Devuelve <code>True</code> si <code>c1</code> es una cadena concenida en <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 not in c2</code> : Devuelve <code>True</code> si <code>c1</code> es una cadena no concenida en <code>c2</code> y <code>False</code> en caso contrario.</li> </ul> <pre><code>'Me gusta ' + 'Python'\n# output 'Me gusta Python'\n'Python' * 3\n# output 'PythonPythonPython'\n'y' in 'Python'\n# output True\n'tho' in 'Python'\n# output True\n'to' not in 'Python'\n# output True\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#operaciones-de-comparacion-de-cadenas","title":"Operaciones de comparaci\u00f3n de cadenas","text":"<ul> <li><code>c1 == c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> es igual que la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &gt; c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> sucede a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &lt; c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> antecede a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &gt;= c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> sucede o es igual a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &lt;= c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> antecede o es igual a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 != c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> es distinta de la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> </ul> <p> Utilizan el orden establecido en el c\u00f3digo ASCII.</p> <pre><code>'Python' == 'python' # output False\n'Python' &lt; 'python' # output True\n'a' &gt; 'Z' # output True\n'A' &gt;= 'Z' # output False\n'' &lt; 'Python' # output True\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#funciones-de-cadenas","title":"Funciones de cadenas","text":"<ul> <li><code>len(c)</code> : Devuelve el n\u00famero de caracteres de la cadena <code>c</code>.</li> <li><code>min(c)</code> : Devuelve el car\u00e1cter menor de la cadena <code>c</code>.</li> <li><code>max(c)</code> : Devuelve el car\u00e1cter mayor de la cadena <code>c</code>.</li> <li><code>c.upper()</code> : Devuelve la cadena con los mismos caracteres que la cadena <code>c</code> pero en may\u00fasculas.</li> <li><code>c.lower()</code> : Devuelve la cadena con los mismos caracteres que la cadena <code>c</code> pero en min\u00fasculas.</li> <li><code>c.title()</code> : Devuelve la cadena con los mismos caracteres que la cadena <code>c</code> con el primer car\u00e1cter en may\u00fasculas y el resto en min\u00fasculas.</li> <li><code>c.split(delimitador)</code> : Devuelve la lista formada por las subcadenas que resultan de partir la cadena <code>c</code> usando como delimitador la cadena <code>delimitador</code>. Si no se especifica el delimitador utiliza por defecto el espacio en blanco.</li> </ul> <pre><code>len('Python') # output 6\nmin('Python') # output 'P'\nmax('Python') # output 'y'\n'Python'.upper() # output 'PYTHON'\n'A,B,C'.split(',') # output ['A', 'B', 'C']\n'I love Python'.split() # output ['I', 'love', 'Python']\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#cadenas-formateadas-format","title":"Cadenas formateadas (<code>format()</code>)","text":"<ul> <li><code>c.format(valores)</code>: Devuelve la cadena <code>c</code> tras sustituir los valores de la secuencia <code>valores</code> en los marcadores de posici\u00f3n de <code>c</code>. Los marcadores de posici\u00f3n se indican mediante llaves <code>{}</code> en la cadena <code>c</code>, y el reemplazo de los valores se puede realizar por posici\u00f3n, indicando en n\u00famero de orden del valor dentro de las llaves, o por nombre, indicando el nombre del valor, siempre y cuando los valores se pasen con el formato <code>nombre = valor</code>.</li> </ul> <pre><code>'Un {} vale {} {}'.format('\u20ac', 1.12, '$') # output 'Un \u20ac vale 1.12 $'\n'Un {2} vale {1} {0}'.format('\u20ac', 1.12, '$') # output 'Un $ vale 1.12 \u20ac'\n'Un {moneda1} vale {cambio} {moneda2}'.format(moneda1 = '\u20ac', cambio = 1.12, moneda2 = '$')\n# output 'Un \u20ac vale 1.12 $'\n</code></pre> <p>Los marcadores de posici\u00f3n, a parte de indicar la posici\u00f3n de los valores de reemplazo, pueden indicar tambi\u00e9n el formato de estos. Para ello se utiliza la siguiente sintaxis:</p> <ul> <li><code>{:n}</code> : Alinea el valor a la izquierda rellenando con espacios por la derecha hasta los <code>n</code> caracteres.</li> <li><code>{:&gt;n}</code> : Alinea el valor a la derecha rellenando con espacios por la izquierda hasta los <code>n</code> caracteres.</li> <li><code>{:^n}</code> : Alinea el valor en el centro rellenando con espacios por la izquierda y por la derecha hasta los <code>n</code> caracteres.</li> <li><code>{:nd}</code> : Formatea el valor como un n\u00famero entero con <code>n</code> caracteres rellenando con espacios blancos por la izquierda.</li> <li><code>{:n.mf}</code> : Formatea el valor como un n\u00famero real con un tama\u00f1o de <code>n</code> caracteres (inclu\u00eddo el separador de decimales) y <code>m</code> cifras decimales, rellenando con espacios blancos por la izquierda.</li> </ul> <pre><code>'Hoy es {:^10}, ma\u00f1ana {:10} y pasado {:&gt;10}'.format('lunes', 'martes', 'mi\u00e9rcoles')\n# output 'Hoy es   lunes   , ma\u00f1ana martes     y pasado  mi\u00e9rcoles'\n'Cantidad {:5d}'.format(12)\n# output 'Cantidad    12'\n'Pi vale {:8.4f}'.format(3.141592)\n# output 'Pi vale   3.1416'\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#datos-logicos-o-booleanos-clase-bool","title":"Datos l\u00f3gicos o booleanos (clase <code>bool</code>)","text":"<p>Contiene \u00fanicamente dos elementos <code>True</code> y <code>False</code> que representan los valores l\u00f3gicos verdadero y falso respectivamente.</p> <p><code>False</code> tiene asociado el valor 0 y <code>True</code> tiene asociado el valor 1.</p>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#operaciones-con-valores-logicos","title":"Operaciones con valores l\u00f3gicos","text":"<ul> <li>Operadores l\u00f3gicos:  <code>==</code> (igual que), <code>&gt;</code> (mayor), <code>&lt;</code> (menor), <code>&gt;=</code> (mayor o igual que), <code>&lt;=</code> (menor o igual que), <code>!=</code> (distinto de).</li> <li><code>not b</code> (negaci\u00f3n) : Devuelve <code>True</code> si el dato booleano <code>b</code> es <code>False</code> , y <code>False</code> en caso contrario.</li> <li><code>b1 and b2</code> : Devuelve <code>True</code> si los datos booleanos <code>b1</code> y <code>b2</code> son <code>True</code>, y <code>False</code> en caso contrario.</li> <li><code>b1 or b2</code> : Devuelve <code>True</code> si alguno de los datos booleanos <code>b1</code> o <code>b2</code> son <code>True</code>, y <code>False</code> en caso contrario.</li> </ul>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#tabla-de-verdad","title":"Tabla de verdad","text":"<code>x</code> <code>y</code> <code>not x</code> <code>x and y</code> <code>x or y</code> <code>False</code> <code>False</code> <code>True</code> <code>False</code> <code>False</code> <code>False</code> <code>True</code> <code>True</code> <code>False</code> <code>True</code> <code>True</code> <code>False</code> <code>False</code> <code>False</code> <code>True</code> <code>True</code> <code>True</code> <code>False</code> <code>True</code> <code>True</code> <pre><code>not True # output False\nFalse or True # output True\nTrue and False # output False\nTrue and True # output True\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#conversion-de-datos-primitivos-simples","title":"Conversi\u00f3n de datos primitivos simples","text":"<p>Las siguientes funciones convierten un dato de un tipo en otro, siempre y cuando la conversi\u00f3n sea posible.</p> <ul> <li><code>int()</code> convierte a entero. Ejemplo. <code>int('12')</code> <code>12</code> <code>int(True)</code> <code>1</code> <code>int('c')</code>  Error</li> <li><code>float()</code> convierte a real. Ejemplo. <code>float('3.14')</code> <code>3.14</code> <code>float(True)</code> <code>1.0</code> <code>float('III')</code>  Error</li> <li><code>str()</code> convierte a cadena. Ejemplo. <code>str(3.14)</code> <code>'3.14'</code> <code>str(True)</code> <code>'True'</code> </li> <li><code>bool()</code> convierte a l\u00f3gico. Ejemplo. <code>bool('0')</code> <code>False</code> <code>bool('3.14')</code> <code>True</code> <code>bool('')</code> <code>False</code> <code>bool('Hola')</code> <code>True</code></li> </ul>","tags":["Tipos de datos"]},{"location":"python/manual/tipos-datos-simples/#variables","title":"Variables","text":"<p>Una variable es un identificador ligado a alg\u00fan valor.</p> <p>Reglas para nombrarlas:</p> <ul> <li>Comienzan siempre por una letra, seguida de otras letras o n\u00fameros.</li> <li>No se pueden utilizarse palabras reservadas del lenguaje.</li> </ul> <p>A diferencia de otros lenguajes no tienen asociado un tipo y no es necesario declararlas antes de usarlas (tipado din\u00e1mico).</p> <p>Para asignar un valor a una variable se utiliza el operador <code>=</code> y para borrar una variable se utiliza la instrucci\u00f3n <code>del</code>.</p> <pre><code>lenguaje = 'Python'\nx = 3.14\ny = 3 + 2\n# Asignaci\u00f3n m\u00faltiple\na1, a2 = 1, 2\n# Intercambio de valores\na, b = b, a\n# Incremento (equivale a x = x + 2)\nx += 2\n# Decremento (equivale a x = x - 1)\nx -= 1\n# Valor no definido\nx = None\ndel x\n</code></pre>","tags":["Tipos de datos"]},{"location":"python/manual/tuplas/","title":"Tuplas","text":"","tags":["Tuplas"]},{"location":"python/manual/tuplas/#tuplas","title":"Tuplas","text":"<p>Una tupla es una secuencias ordenadas de objetos de distintos tipos.</p> <p>Se construyen poniendo los elementos entre corchetes <code>(</code> <code>)</code> separados por comas.</p> <p>Se caracterizan por:</p> <ul> <li>Tienen orden.</li> <li>Pueden contener elementos de distintos tipos.</li> <li>Son inmutables, es decir, no pueden alterarse durante la ejecuci\u00f3n de un programa.</li> </ul> <p>Se usan habitualmente para representar colecciones de datos una determinada estructura sem\u00e1ntica, como por ejemplo un vector o una matriz.</p> <pre><code># Tupla vac\u00eda\ntype(()) # output &lt;class 'tuple'&gt;\n# Tupla con elementos de distintos tipos\n(1, \"dos\", True)\n# Vector\n(1, 2, 3)\n# Matriz\n((1, 2, 3), (4, 5, 6))\n</code></pre>","tags":["Tuplas"]},{"location":"python/manual/tuplas/#creacion-de-tuplas-mediante-la-funcion-tuple","title":"Creaci\u00f3n de tuplas mediante la funci\u00f3n <code>Tuple</code>","text":"<p>Otra forma de crear tuplas es mediante la funci\u00f3n <code>tuple = ()</code>.</p> <ul> <li><code>tuple = (c)</code> : Crea una tupla con los elementos de la secuencia o colecci\u00f3n <code>c</code>.</li> </ul> <p>Se pueden indicar los elementos separados por comas, mediante una cadena, o mediante una colecci\u00f3n de elementos iterable.</p> <pre><code>tuple = () # output ()\ntuple = (1, 2, 3) # output (1, 2, 3)\ntuple = (\"Python\") # output ('P', 'y', 't', 'h', 'o', 'n')\ntuple = ([1, 2, 3]) # output (1, 2, 3)\n</code></pre>","tags":["Tuplas"]},{"location":"python/manual/tuplas/#operaciones-con-tuplas","title":"Operaciones con tuplas","text":"<p>El acceso a los elementos de una tupla se realiza del mismo modo que en las listas. Tambi\u00e9n se pueden obtener subtuplas de la misma manera que las sublistas.</p> <p>Las operaciones de listas que no modifican la lista tambi\u00e9n son aplicables a las tuplas.</p> <pre><code>a = (1, 2, 3)\na[1] # output 2\nlen(a) # output 3\na.index(3) # output 2\n0 in a # output False\nb = ((1, 2, 3), (4, 5, 6))\nb[1] # output (4, 5, 6)\nb[1][2] # output 6\n</code></pre>","tags":["Tuplas"]},{"location":"sql_server/","title":"Manual de SQL SERVER","text":""},{"location":"sql_server/#generalidades-de-base-de-datos","title":"Generalidades de base de datos","text":""},{"location":"sql_server/#modelo-relacional-de-base-de-datos","title":"Modelo relacional de base de datos","text":""},{"location":"sql_server/#creacion-de-una-base-de-datos","title":"Creaci\u00f3n de una base de datos","text":""},{"location":"sql_server/manual/creacion_de_una_base_de_datos/","title":"Creaci\u00f3n de una base de datos","text":""},{"location":"sql_server/manual/creacion_de_una_base_de_datos/#creacion-de-una-base-de-datos","title":"Creaci\u00f3n de una base de datos","text":"<p>En este ejemplo el script crea la base de datos, sino est\u00e1 creada.</p> <pre><code>USE master;\nGO\n\nIF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'NombreDeTuBaseDeDatos')\nBEGIN\n    CREATE DATABASE NombreDeTuBaseDeDatos;\n    PRINT 'Base de datos creada con \u00e9xito.';\nEND\nELSE\nBEGIN\n    PRINT 'La base de datos ya existe. No se requiere acci\u00f3n.';\nEND\nGO\n</code></pre>"},{"location":"sql_server/manual/creacion_de_una_base_de_datos/#sql-server-management-studio-management-studio","title":"SQL Server Management Studio Management Studio","text":""},{"location":"sql_server/manual/generalidades_de_base_de_datos/","title":"Generalidades de base de datos","text":"\u00bfQu\u00e9 es una base de datos?       <p><p> Una base de datos es un conjunto de datos que tienen una procedencia similar y  que son apuntados de forma sistem\u00e1tica para ser procesados posteriormente. El  procesamiento de estos datos va a depender de los objetivos que tengamos  nosotros o nuestra empresa.</p> <p>Todas las bases de datos hacen casi lo mismo. Ordenan y clasifican los datos y despu\u00e9s estar\u00e1 dispuesta para que investiguemos y analicemos. -- Graph Everywhere, 2021 </p></p>"},{"location":"sql_server/manual/generalidades_de_base_de_datos/#sistemas-gestores-de-bases-de-datos","title":"Sistemas gestores de bases de datos","text":"<p>Un sistema gestor de base de datos (SGBD), es un conjunto de programas que  permiten el almacenamiento, modificaci\u00f3n y extracci\u00f3n de la informaci\u00f3n en una  base de datos. Los usuarios acceden a la informaci\u00f3n con herramientas espec\u00edficas  de consulta y de generaci\u00f3n de informes.</p>"},{"location":"sql_server/manual/generalidades_de_base_de_datos/#cuales-son-los-componentes-de-un-sgbd","title":"\u00bfCu\u00e1les son los componentes de un SGBD?","text":"<p>Un sistema de gesti\u00f3n de base de datos consta de varios componentes, todos ellos contribuyen al buen funcionamiento del software. Los elementos b\u00e1sicos que lo  conforman son tres: <code>el diccionario de datos</code>, <code>el lenguaje de definici\u00f3n de datos</code> y el  <code>lenguaje de manipulaci\u00f3n de datos</code>.</p> <p>Diccionario de datos: consiste en una lista de metadatos que reflejan las  caracter\u00edsticas de los diversos tipos de datos incluidos en la base de datos. Adem\u00e1s,  estos metadatos informan sobre los permisos de uso de cada registro y su representaci\u00f3n f\u00edsica. De esta manera, el diccionario proporciona toda la  informaci\u00f3n relevante sobre los datos almacenados.</p> <p>Lenguaje de definici\u00f3n de datos: el lenguaje de definici\u00f3n de datos, tambi\u00e9n llamado  lenguaje de base de datos o DDL (Data Definition Language), sirve para estructurar  el contenido de la base de datos. Gracias a este lenguaje, es posible crear, modificar  y eliminar objetos individuales, como referencias, relaciones o derechos de usuario.</p> <p>Lenguaje de manipulaci\u00f3n de datos: mediante el lenguaje de manipulaci\u00f3n de datos  o DML (Data Manipulation Language), se pueden introducir nuevos registros en la  base de datos, as\u00ed como eliminar, modificar y consultar los que ya contiene. Este  lenguaje tambi\u00e9n permite comprimir y extraer los datos.</p>"},{"location":"sql_server/manual/generalidades_de_base_de_datos/#tipos-de-base-de-datos","title":"Tipos de Base de Datos","text":"<ul> <li>Bases de Datos Relacionales (RDBMS):</li> </ul> <pre>\n    Ejemplos: MySQL, PostgreSQL, Oracle, Microsoft SQL Server.\n    Utilizan tablas y relaciones para organizar la informaci\u00f3n.\n</pre> <ul> <li>Bases de Datos No Relacionales (NoSQL):</li> </ul> <pre>\n    Incluyen varios modelos de datos como documentos, clave-valor, columnares y grafos.\n    Ejemplos: MongoDB (documento), Cassandra (clave-valor), Neo4j (grafos).\n</pre>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/","title":"Modelo relacional de base de datos","text":""},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#modelo-relacional-de-base-de-datos","title":"Modelo relacional de base de datos","text":"<p>El modelo relacional (RM) representa la base de datos como una colecci\u00f3n de relaciones.  Una relaci\u00f3n no es m\u00e1s que una tabla de valores. Cada fila de la tabla representa una  colecci\u00f3n de valores de datos relacionados. Estas filas de la tabla denotan una entidad o  relaci\u00f3n del mundo real.</p> <p>El nombre de la tabla y los nombres de las columnas son \u00fatiles para interpretar el  significado de los valores en cada fila. Los datos se representan como un conjunto de  relaciones. En el modelo relacional, los datos se almacenan como tablas. Sin embargo, el  almacenamiento f\u00edsico de los datos es independiente de la forma en que los datos est\u00e1n  organizados l\u00f3gicamente.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#conceptos-del-modelo-relacional","title":"Conceptos del modelo relacional","text":""},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#tablas","title":"Tablas","text":"<p>En el modelo relacional, las relaciones se guardan en formato de tabla. Se almacena junto  con sus entidades. Una tabla tiene dos filas y columnas de propiedades. Las filas  representan registros y las columnas representan atributos.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#columna","title":"Columna","text":"<p>La columna representa el conjunto de valores para un atributo espec\u00edfico.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#atributo","title":"Atributo","text":"<p>Cada columna de una tabla. Los atributos son las propiedades que definen una relaci\u00f3n. por  ejemplo, NumeroEstudiante, Nombre, etc.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#tupla","title":"Tupla","text":"<p>No es m\u00e1s que una sola fila de una tabla, que contiene un solo registro.</p> <p></p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#esquema-de-relacion","title":"Esquema de relaci\u00f3n","text":"<p>Un esquema de relaci\u00f3n representa el nombre de la relaci\u00f3n con sus atributos.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#grado","title":"Grado","text":"<p>El n\u00famero total de atributos que en la relaci\u00f3n se denomina grado de relaci\u00f3n.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#cardinalidad","title":"Cardinalidad","text":"<p>N\u00famero total de filas presentes en la tabla.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#instancia-de-relacion","title":"Instancia de relaci\u00f3n","text":"<p>La instancia de relaci\u00f3n es un conjunto finito de tuplas en el sistema RDBMS. Las instancias  de relaci\u00f3n nunca tienen tuplas duplicadas.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#clave-de-relacion","title":"Clave de relaci\u00f3n","text":"<p>Cada fila tiene uno, dos o varios atributos, lo que se denomina clave de relaci\u00f3n.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#dominio-de-atributo","title":"Dominio de atributo","text":"<p>Cada atributo tiene un valor y alcance predefinidos que se conoce como dominio de  atributo.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#restricciones-de-integridad-relacional","title":"Restricciones de integridad relacional","text":"<p>Las restricciones de integridad relacional en DBMS se refieren a condiciones que deben  estar presentes para una relaci\u00f3n v\u00e1lida. Estas restricciones relacionales en DBMS se  derivan de las reglas en el mini mundo que representa la base de datos. Hay muchos tipos de restricciones de integridad en DBMS. Las restricciones del sistema de  gesti\u00f3n de bases de datos relacionales se dividen principalmente en tres categor\u00edas  principales:</p> <ol> <li>Restricciones de dominio.</li> <li>Restricciones clave.</li> <li>Restricciones de integridad referencial.</li> <li>Restricciones de dominio.</li> </ol>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#las-restricciones-de-dominio","title":"Las restricciones de dominio","text":"<p>Las restricciones de dominio se pueden violar si un valor de atributo no aparece en el  dominio correspondiente o no es del tipo de datos apropiado. Especifican que, dentro de  cada tupla el valor de cada atributo debe ser \u00fanico. Esto se especifica como tipos de datos  que incluyen datos enteros, n\u00fameros reales, caracteres, booleanos, cadenas de longitud  variable, etc.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#restricciones-clave","title":"Restricciones clave","text":"<p>Un atributo que puede identificar de forma \u00fanica una tupla en una relaci\u00f3n se denomina  llave primaria. El valor del atributo para diferentes tuplas en la relaci\u00f3n debe ser \u00fanico.</p> <p>Ejemplo: En la tabla dada, ClienteID es un atributo clave de la tabla Clientes. Es m\u00e1s probable que  tenga una \u00fanica clave para un cliente, ClienteID = 1 es solo para NombreCliente = \u201dGoogle\u201d.</p> <p></p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#restricciones-de-integridad-referencial","title":"Restricciones de integridad referencial","text":"<p>Las restricciones de integridad referencial en DBMS se basan en el concepto de claves  externas. Una clave externa es un atributo importante de una relaci\u00f3n al que se debe hacer  referencia en otras relaciones. El estado de restricci\u00f3n de integridad referencial ocurre  cuando la relaci\u00f3n se refiere a un atributo clave de una relaci\u00f3n diferente o igual. Sin  embargo, ese elemento clave debe existir en la tabla.</p> <p></p> <p>En el ejemplo anterior, tenemos 2 relaciones, Cliente y Facturaci\u00f3n.</p> <p>La tupla para ClienteID = 1 se hace referencia dos veces en la relaci\u00f3n Facturaci\u00f3n. Entonces  sabemos NombreCliente = Google tiene un monto de facturaci\u00f3n de $ 300.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#mejores-practicas-para-crear-un-modelo-relacional","title":"Mejores pr\u00e1cticas para crear un modelo relacional","text":"<ul> <li>Los datos deben representarse como una colecci\u00f3n de relaciones.</li> <li>Cada relaci\u00f3n debe describirse claramente en la tabla.</li> <li>Las filas deben contener datos sobre instancias de una entidad.</li> <li>Las columnas deben contener datos sobre los atributos de la entidad.</li> <li>Las celdas de la tabla deben contener un solo valor.</li> <li>Cada columna debe tener un nombre \u00fanico.</li> <li>No hay dos filas que sean id\u00e9nticas.</li> <li>Los valores de un atributo deben ser del mismo dominio.</li> </ul>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#ventajas-de-usar-el-modelo-relacional","title":"Ventajas de usar el modelo relacional","text":"<ul> <li>Simplicidad: un modelo de datos relacionales en DBMS es m\u00e1s simple que el modelo  jer\u00e1rquico y de red.</li> <li>Independencia estructural: la base de datos relacional solo se ocupa de los datos y  no de una estructura. Esto puede mejorar el rendimiento del modelo.</li> <li>F\u00e1cil de usar: el modelo relacional en DBMS es f\u00e1cil ya que las tablas que constan de  filas y columnas son bastante naturales y f\u00e1ciles de entender.</li> <li>Capacidad de consulta: hace posible que un lenguaje de consulta de alto nivel como SQL evite la navegaci\u00f3n compleja en la base de datos.</li> <li>Independencia de los datos: la estructura de la base de datos relacional se puede  cambiar sin tener que cambiar ninguna aplicaci\u00f3n.</li> <li>Escalable: con respecto a una cantidad de registros, o filas, y la cantidad de campos,  una base de datos debe ampliarse para mejorar su usabilidad.</li> </ul>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#desventajas-de-usar-el-modelo-relacional","title":"Desventajas de usar el modelo relacional","text":"<ul> <li>Pocas bases de datos relacionales tienen l\u00edmites en la longitud de los campos que no  se pueden exceder.</li> <li>Las bases de datos relacionales a veces pueden volverse complejas a medida que  aumenta la cantidad de datos y las relaciones entre los datos se vuelven m\u00e1s  complicadas.</li> <li>Los sistemas de bases de datos relacionales complejos pueden conducir a bases de  datos aisladas donde la informaci\u00f3n no se puede compartir de un sistema a otro.</li> </ul>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#planificacion-de-bases-de-datos-relacionales","title":"Planificaci\u00f3n de bases de datos relacionales","text":""},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#paso-1","title":"Paso 1","text":"<p>Determine las categor\u00edas de informaci\u00f3n que necesitar\u00e1 la base de datos relacional. Estas  categor\u00edas ser\u00e1n las tablas de la base de datos. Por ejemplo, una base de datos de ventas  puede incluir estas tablas: Clientes, que incluye informaci\u00f3n de clientes; Facturas, que  incluye informaci\u00f3n de pedidos; y Productos, que incluye informaci\u00f3n de productos.</p> <p></p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#paso-2","title":"Paso 2","text":"<p>Determine c\u00f3mo se relacionan entre s\u00ed las tablas. Para ello, escriba frases sencillas que  describan la forma en la que interact\u00faan las categor\u00edas como, por ejemplo, \"los clientes  realizan pedidos de productos\" y \"las facturas registran los pedidos de los clientes\".</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#paso-3","title":"Paso 3","text":"<p>Conecte una tabla a otra para indicar una relaci\u00f3n entre ellas. Por ejemplo, un cliente puede  tener facturas y las facturas pueden tener productos.</p> <p>Si una tabla no tiene ninguna relaci\u00f3n con otra, es probable que sea innecesaria. En este  ejemplo, la tabla Empleados no se ajusta a esa base de datos relacional o al menos al  fragmento de base de datos que desea crear en ese momento.</p> <p></p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#paso-4","title":"Paso 4","text":"<p>Indique el tipo de relaci\u00f3n entre las tablas conect\u00e1ndolas con un s\u00edmbolo representativo. En  una relaci\u00f3n de uno a uno, un registro de la Tabla A se asocia a un registro de la Tabla B.</p> <p>En una relaci\u00f3n de uno a muchos, un registro de la Tabla A se asocia a varios registros de la  Tabla B. En una relaci\u00f3n de muchos a muchos, varios registros de la Tabla A se asocian a varios  registros de la Tabla B.</p> <p></p> <p>En este ejemplo se muestra que:</p> <ul> <li>Un cliente puede tener muchas facturas.</li> <li>Un producto puede aparecer en muchas facturas.</li> <li>Una factura puede tener muchos productos.</li> </ul>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#paso-5","title":"Paso 5","text":"<p>Tenga en cuenta que hay una relaci\u00f3n de muchos a muchos entre Facturas y Productos. No  puede configurar directamente una relaci\u00f3n de muchos a muchos entre las dos tablas. Las bases de datos relacionales administran directamente las relaciones de uno a uno y de  uno a muchos. Debe resolver la relaci\u00f3n de muchos a muchos mediante una tabla  intermedia, que divida la relaci\u00f3n de muchos a muchos en dos relaciones de uno a muchos.  Para solucionar el problema en este ejemplo, a\u00f1ada la tabla intermedia Elementos de l\u00ednea  para almacenar informaci\u00f3n sobre los productos vendidos.</p> <p></p> <p>Tras resolver la relaci\u00f3n de muchos a muchos, en este ejemplo se muestra que: - Un cliente puede tener muchas facturas. - Una factura puede tener muchos elementos de l\u00ednea. - Un producto puede aparecer en muchos elementos de l\u00ednea.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#paso-6","title":"Paso 6","text":"<p>Determine los campos que necesitar\u00e1 cada tabla. Cada tabla tiene s\u00f3lo un tema, y todos  los campos de esa tabla hacen referencia \u00fanicamente a ese tema. Por ejemplo, los campos  de un registro de la tabla Clientes almacenan toda la informaci\u00f3n sobre un cliente.</p> <p>Por este motivo, debe asignar a cada cliente un n\u00famero de identificaci\u00f3n exclusivo. En la  base de datos, esta es la clave principal. No introducir\u00eda ning\u00fan n\u00famero de identificaci\u00f3n de  cliente en la tabla a no ser que tuviera que a\u00f1adir un cliente nuevo. Por lo tanto, la  existencia de un n\u00famero de cliente determina la existencia de un registro. La tabla Clientes  puede tambi\u00e9n incluir campos para el nombre, la direcci\u00f3n y el n\u00famero de tel\u00e9fono del  cliente.</p> <p>La tabla Productos puede incluir campos para el n\u00famero de identificaci\u00f3n del producto, el  precio por unidad de cada producto y la cantidad disponible en existencias. La tabla  Elementos de l\u00ednea puede incluir campos para los n\u00fameros de identificaci\u00f3n de productos y  facturas, as\u00ed como para el nombre, el precio por unidad, la cantidad y el precio total de  cada art\u00edculo vendido. La tabla Facturas puede incluir campos para el n\u00famero de  identificaci\u00f3n de facturas, la fecha del pedido y el vendedor.</p> <p></p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#paso-7","title":"Paso 7","text":"<p>Determine el campo de clave principal (o campos para una relaci\u00f3n de varios criterios)  para cada tabla e indique cada uno en su plan. A continuaci\u00f3n, indique el campo o los  campos de clave externa de cada tabla. En este ejemplo:</p> <ul> <li>Las claves principales son Clientes::ID de cliente, Facturas::ID de factura, Productos::ID  del producto y Elementos de l\u00ednea::ID de elemento.</li> <li>Las claves externas son Facturas::ID de cliente y Elementos de l\u00ednea::ID del producto.</li> </ul> <p>Para mostrar datos de clientes en la tabla Facturas, debe tener un campo com\u00fan entre las  dos tablas a fin de crear una relaci\u00f3n. ID de cliente es el campo com\u00fan. En la tabla Clientes,  es la clave principal; en la tabla Facturas, es la clave externa.</p> <p>En la tabla Elementos de l\u00ednea, ID del producto es el campo com\u00fan entre las tablas  Elementos de l\u00ednea y Productos. En la tabla ID del producto, este campo es la clave  principal; en la tabla Elementos de l\u00ednea, es la clave externa.</p> <p>Estos campos de clave son del tipo llave for\u00e1nea.</p> <p></p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#paso-8","title":"Paso 8","text":"<p>En cada una de las tablas, establezca qu\u00e9 campos van a almacenar datos y cu\u00e1les se  usar\u00e1n desde otras tablas relacionadas.</p> <p>En funci\u00f3n del tema de la tabla, puede comprobar en qu\u00e9 ubicaci\u00f3n es m\u00e1s l\u00f3gico  almacenar los datos y d\u00f3nde se deben utilizar los datos de una tabla relacionada. Todos los  campos de clave deber\u00edan aparecer solo una vez en la base de datos, a excepci\u00f3n de los  campos de coincidencia. Elimine las ocurrencias de los campos que no pertenezcan al tema  de la tabla.</p> <p></p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#paso-9","title":"Paso 9","text":"<p>Conecte cada clave principal con su clave externa(llave for\u00e1nea) correspondiente en la  tabla relacionada.</p> <p>Lo que establece una relaci\u00f3n entre tablas es que sus campos de clave contienen datos que  coinciden con los criterios de la relaci\u00f3n.</p> <p></p> <p>Este plan indica ahora:</p> <ul> <li>Un cliente puede tener muchas facturas diferentes, pero una factura individual  puede tener solo un cliente.</li> <li>Una factura puede tener muchos elementos de l\u00ednea, pero solo un elemento de l\u00ednea  individual aparece en una factura.</li> <li>Un producto puede aparecer en muchos elementos de l\u00ednea diferentes, pero un  elemento de l\u00ednea individual solo tiene un producto.</li> </ul>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#normalizacion-de-bases-de-datos","title":"Normalizaci\u00f3n de bases de datos","text":""},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#descripcion-de-la-normalizacion","title":"Descripci\u00f3n de la normalizaci\u00f3n","text":"<p>La normalizaci\u00f3n es el proceso de organizaci\u00f3n de datos en una base de datos. Esto incluye  crear tablas y establecer relaciones entre dichas tablas de acuerdo con reglas dise\u00f1adas  tanto para proteger los datos como para que la base de datos sea m\u00e1s flexible al eliminar  la redundancia y la dependencia incoherente.</p> <p>Los datos redundantes desperdician espacio en disco y crean problemas de mantenimiento.  Si se deben cambiar los datos que existen en m\u00e1s de un lugar, los datos deben cambiarse  exactamente del mismo modo en todas las ubicaciones. Un cambio de direcci\u00f3n de cliente  es mucho m\u00e1s f\u00e1cil de implementar si los datos se almacenan solo en la tabla Clientes y en  ninguna otra parte de la base de datos.</p> <p>Existen algunas reglas para la normalizaci\u00f3n de la base de datos. Cada regla se denomina  \"formulario normal\". Si se observa la primera regla, se dice que la base de datos est\u00e1 en  \"primera forma normal\". Si se observan las tres primeras reglas, se considera que la base  de datos est\u00e1 en \"tercera forma normal\". Aunque otros niveles de normalizaci\u00f3n son  posibles, la tercera forma normal se considera el nivel m\u00e1s alto necesario para la mayor\u00eda  de las aplicaciones.</p> <p>Al igual que con muchas reglas y especificaciones formales, los escenarios del mundo real  no siempre permiten el cumplimiento perfecto. En general, la normalizaci\u00f3n requiere tablas  adicionales y algunos clientes lo encuentran engorroso. Si decide infringir una de las tres  primeras reglas de normalizaci\u00f3n, aseg\u00farese de que la aplicaci\u00f3n anticipe cualquier  problema que pueda producirse, como datos redundantes y dependencias incoherentes.</p> <p>Las descripciones siguientes incluyen ejemplos.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#primera-forma-normal","title":"Primera forma normal:","text":"<ul> <li>Elimine los grupos de repetici\u00f3n en tablas individuales.</li> <li>Cree una tabla independiente para cada conjunto de datos relacionados.</li> <li>Identifique cada conjunto de datos relacionados con una clave principal.</li> </ul> <p>No use varios campos en una sola tabla para almacenar datos similares. Por ejemplo, para  realizar un seguimiento de un elemento de inventario que puede venir de dos or\u00edgenes  posibles, un registro de inventario puede contener campos para C\u00f3digo de proveedor 1 y  C\u00f3digo de proveedor 2.</p> <p>\u00bfQu\u00e9 sucede cuando se agrega un tercer proveedor? Agregar un campo no es la respuesta;  requiere modificaciones de programa y tabla y no se adapta sin problemas a un n\u00famero  din\u00e1mico de proveedores. En su lugar, coloque toda la informaci\u00f3n del proveedor en una  tabla independiente denominada Proveedores y, a continuaci\u00f3n, vincule el inventario a los  proveedores con una clave de n\u00famero de elemento o proveedores para realizar un  inventario con una clave de c\u00f3digo de proveedor.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#segunda-forma-normal","title":"Segunda forma normal","text":"<ul> <li>Cree tablas independientes para conjuntos de valores que se aplican a varios  registros.</li> <li>Relaciona estas tablas con una clave externa.</li> </ul> <p>Los registros no deben depender de nada que no sea la clave principal de una tabla (una  clave compuesta, si es necesario). Por ejemplo, considere la direcci\u00f3n de un cliente en un  sistema de contabilidad. La direcci\u00f3n es necesaria para la tabla Clientes, pero tambi\u00e9n para  las tablas Pedidos, Env\u00edo, Facturas, Clientes y Colecciones. En lugar de almacenar la  direcci\u00f3n del cliente como una entrada independiente en cada una de estas tablas,  gu\u00e1rdala en un solo lugar, ya sea en la tabla Clientes o en una tabla Direcciones  independiente.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#tercera-forma-normal","title":"Tercera forma normal","text":"<ul> <li>Elimine los campos que no dependen de la clave.</li> </ul> <p>Los valores de un registro que no forman parte de la clave de ese registro no pertenecen a  la tabla. En general, cada vez que el contenido de un grupo de campos se pueda aplicar a m\u00e1s de un \u00fanico registro de la tabla, considere la posibilidad de colocar esos campos en  una tabla independiente.</p> <p>Por ejemplo, en una tabla contrataci\u00f3n de empleados, se puede incluir el nombre  universitario y la direcci\u00f3n de un candidato. Pero necesita una lista completa de  universidades para los env\u00edos de correo en grupo. Si la informaci\u00f3n de la universidad se  almacena en la tabla Candidatos, no hay forma de enumerar las universidades sin  candidatos actuales. Cree una tabla Universidades independiente y vincule a la tabla  Candidatos con una clave de c\u00f3digo universitario.</p> <p>EXCEPCI\u00d3N: El cumplimiento de la tercera forma normal, aunque te\u00f3ricamente deseable, no  siempre es pr\u00e1ctico. Si tiene una tabla Clientes y desea eliminar todas las dependencias  entre campos posibles, debe crear tablas independientes para ciudades, c\u00f3digos POSTAL es, representantes de ventas, clases de clientes y cualquier otro factor que pueda duplicarse  en varios registros. En teor\u00eda, la normalizaci\u00f3n vale la pena purgar. Sin embargo, muchas  tablas peque\u00f1as pueden degradar el rendimiento o superar las capacidades de memoria y  archivo abiertos.</p> <p>Puede ser m\u00e1s factible aplicar la tercera forma normal solo a los datos que cambian con  frecuencia. Si algunos campos dependientes permanecen, dise\u00f1e la aplicaci\u00f3n para requerir  que el usuario compruebe todos los campos relacionados cuando se cambie alguno.</p> <p>Otras formas normales</p> <p>La cuarta forma normal, tambi\u00e9n llamada Formal normal codd de Boyce (BCNF), y la quinta forma normal existen, pero rara vez se consideran en dise\u00f1o pr\u00e1ctico. Si se ignoran  estas reglas, es posible que el dise\u00f1o de la base de datos sea menor que perfecto, pero no  deber\u00eda afectar a la funcionalidad.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#normalizacion-de-una-tabla-de-ejemplo","title":"Normalizaci\u00f3n de una tabla de ejemplo","text":"<p>Estos pasos muestran el proceso de normalizaci\u00f3n de una tabla de estudiantes ficticia.</p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#tabla-no-normalizada","title":"Tabla no normalizada","text":""},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#primera-forma-normal-sin-grupos-de-repeticion","title":"Primera forma normal: sin grupos de repetici\u00f3n","text":"<p>Las tablas solo deben tener dos dimensiones. Dado que un alumno tiene varias clases, estas  clases deben aparecer en una tabla independiente. Los campos Class1, Class2 y Class3 de  los registros anteriores son indicaciones de problemas de dise\u00f1o. Las hojas de c\u00e1lculo suelen usar la tercera dimensi\u00f3n, pero las tablas no deben hacerlo.  Otra forma de ver este problema es con una relaci\u00f3n de uno a varios, no ponga el lado uno  y los muchos en la misma tabla. En su lugar, crea otra tabla en primera forma normal  eliminando el grupo de repetici\u00f3n (Clase#), como se muestra a continuaci\u00f3n:</p> <p></p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#segunda-forma-normal-eliminar-datos-redundantes","title":"Segunda forma normal: eliminar datos redundantes","text":"<p>Tenga en cuenta los varios valores class# para cada valor Student# de la tabla anterior.  Class# no depende funcionalmente de Student# (clave principal), por lo que esta relaci\u00f3n  no est\u00e1 en segundo formato normal. Las tablas siguientes muestran el Segunda forma normal:</p> <p></p> <p></p>"},{"location":"sql_server/manual/modelo_relacional_de_base_de_datos/#tercera-forma-normal-eliminar-datos-que-no-dependen-de-la-clave","title":"Tercera forma normal: eliminar datos que no dependen de la clave","text":"<p>En el \u00faltimo ejemplo, Adv-Room (n\u00famero de oficina del asesor) depende funcionalmente del  atributo Advisor. La soluci\u00f3n es mover ese atributo de la tabla Estudiantes a la tabla  Profesor, como se muestra a continuaci\u00f3n:</p> <p></p> <p></p>"}]}